#
# print('a', 'b', 'c', sep='*')
# print('d', 'e', 'f', sep='**', end='')
# print('g', 'h', 'i', sep='+', end='%')
# print('j', 'k', 'l', sep='-', end='\n')
# print('m', 'n', 'o', sep='/', end='!')
# print('p', 'q', 'r', sep='1', end='%')
# print('s', 't', 'u', sep='&', end='\n')
# print('v', 'w', 'x', sep='%')
# print('y', 'z', sep='/', end='!')
#
# print('i','like','Python', sep='***')

# one = input()
# two = input()
# three = input()
# four = input()
# print(two,three,four,sep=one)

# name = input()
# print('Привет,', name , end='!')

# print('Java')
# print('Ruby')
# # print('Scala')
# print('Python', end='+')  # print('C++')
# # print('GO')
# print('C#', end='=')  # print('C')
# print('awesome')
# finish

#
# print('awesome')
# print('awesome')


# a = int(input())
# print(a)
# print(a+1)
# print(a+2)

# a = int(input())
# b = int(input())
# c = int(input())
# print(a+b+c)

# a = int(input())
# print('Объем =', a**3)
# print('Площадь полной поверхности =', 6*a**2)

# a = int(input())
# b = int(input())
# f = 3* (a + b)**3 + 275*b**2 - 127*a - 41
# print(f)

# a = int(input())
# print('Следующее за числом', a,'число:', a + 1)
# print('Для числа', a, 'предыдущее число:', a - 1)

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# s = (a+b+c+d)*3
# print(s)


#
# a = int(input())
# b = int(input())
# print(a, '+', b, '=', a + b)
# print(a, '-', b, '=', a - b)
# print(a, '*', b, '=', a * b)

# a1 = int(input())
# d = int(input())
# n = int(input())
# print(a1 + d * (n - 1))

# a = int(input())
# print( a, a * 2, a * 3, a * 4, a * 5, sep='-')
# a = 2//5
# print(a)

# b1 = int(input())
# q = int(input())
# n = int(input())
# b = b1 * q ** (n - 1)
# print(b)

# s = int(input())
# m = int(input())
# print(m%s)
# print(m//s)

# a = int(input())+ 1
# print(int(a/2))

# a = -int(input())
# print(-(a//4))


# a = int(input())
# print(a, 'мин - это', a//60 , 'час', a%60, 'минут.')
#
# print(a%10)

# num = int(input())
# digit3 = num % 10
# digit2 = (num // 10) % 10
# digit1 = num // 100
# print(digit1, digit2, digit3, sep=',')

# num = int(input())
# a1 = num%10
# a2 = (num//10)%10
# a3 = num//100
# summa = a1 + a2 + a3
# multi = a1 * a2 * a3
# print('Сумма цифр =', summa)
# print('Произведение цифр =', multi)

# num = int(input())
# c = num%10
# b = (num//10)%10
# a = num//100
# print(a,b,c,sep="")
# print(a,c,b,sep="")
# print(b,a,c,sep="")
# print(b,c,a,sep="")
# print(c,a,b,sep="")
# print(c,b,a,sep="")

# num = int(input())
# d = num//1000
# c = (num//100)%10
# b = (num//10)%10
# a = num % 10
# print('Цифра в позиции тысяч равна', d)
# print('Цифра в позиции сотен равна', c)
# print('Цифра в позиции десятков равна', b)
# print('Цифра в позиции единиц равна', a)

# print("The world's a little blurry", "Or maybe it's my eyes", end='!!!', sep=' :) ')
# # print("Remember not to get too close to stars", end=="")
# # print("Remember not to get too close to stars", "They're never gonna give you love like ours", sepp=" ")
# print("Told you not to worry", "But maybe that's a lie", sep=' :) ')
# print("Honey, what's your hurry", end='?')

# s = 13
# k = -5
# d = s + 2
# s = d
# k = 2 * s
# print(s + k + d)

# a = 17 // (23 % 7)
# print(a)
# b = 34 % a * 5 - 29 % 4 * 3
# print(a * b)

# a = ('*')*17
# b = ('*')+(' ')*15 + ('*')
# print(a)
# print(b)
# print(b)
# print(a)

# a = int(input())
# b = int(input())
# print('Квадрат суммы', a, 'и', b, 'равен', (a + b) ** 2)
# print('Сумма квадратов', a, 'и', b, 'равна', (a ** 2 + b ** 2))

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# t = a ** b + c ** d
# print(t)

# a = input()
# s = int(a + a + a) + int(a + a) + int(a)
# print(s)

# i=100
#
# if i / 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')
#
# if i // 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')
#
# if i % 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')
#
# if i // 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')
#
# if i % 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')
#
# if i // 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')

# password = input()
# auth = input()
# if password == auth:
#     print('Пароль принят')
# else:
#     print('Пароль не принят')


# a = int(input())
# if a % 2 == 0:
#     print('Четное')
# else:
#     print('Нечетное')

# ///Напишите программу, которая проверяет,
# что для заданного четырехзначного числа выполняется следующее соотношение:
# сумма первой и последней цифр равна разности второй и третьей цифр.
# number = int(input())
# a = number // 1000
# b = (number % 1000)//100
# c = (number % 100)//10
# d = number % 10
# one = a + d
# two = b - c
# if one == two:
#     print('ДА')
# else:
#     print('НЕТ')


# Напишите программу, которая определяет, разрешен пользователю доступ к интернет-ресурсу или нет.
# age = int(input())
# if age >= 18:
#     print('Доступ разрешен')
# else:
#     print('Доступ запрещен')

# Напишите программу, которая определяет,
# являются ли три заданных числа (в указанном порядке) последовательными членами арифметической прогрессии.
#
# a = int(input())
# b = int(input())
# c = int(input())
# if (b - a ) + b == c:
#     print('YES')
# else:
#     print('NO')
#
#
# # -------
# a = int(input())
# b = int(input())
# if b > a:
#     print(a)
# else:
#     print(b)

# Напишите программу, которая определяет наименьшее из четырёх чисел.

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
#
# if a <= b and a <= c and a <= d:
#     print(a)
# elif b <= a and b <= c and b <= d:
#     print(b)
# elif c <= a and b >= c and c <= d:
#     print(c)
# else:
#     print(d)

# Напишите программу, которая по введённому возрасту пользователя сообщает, к какой возрастной группе он относится:
#
#     до 13 включительно – детство;
#     от 14 до 24 – молодость;
#     от 25 до 59 – зрелость;
#     от 60 – старость.

# age = int(input())
# if age <= 13:
#     print('детство')
# elif 14 <= age <= 24:
#     print('молодость')
# elif 25 <= age <= 59:
#     print('зрелость')
# else:
#     print('старость')

# Напишите программу, которая считывает три числа и подсчитывает сумму только положительных чисел.
# Формат входных данных
# На вход программе подаются три целых числа.
# Формат выходных данных
# Программа должна вывести одно число – сумму положительных чисел.
# Примечание. Если положительных чисел нет, то следует вывести 0

# numb1 = int(input())
# numb2 = int(input())
# numb3 = int(input())
# numb_all = 0
# if numb1 < 0 and numb2 < 0 and numb3 < 0:
#     numb_all = 0
# if numb1 >= 0:
#     numb_all = numb_all + numb1
# if numb2 >= 0:
#     numb_all = numb_all + numb2
# if numb3 >= 0:
#     numb_all = numb_all + numb3
# print(numb_all)

# отрезок от -1 - 17

# x = int(input())
# if 2< -x <= 30 or  7< x <= 25:
#     print('Принадлежит')
# else:
#     print('Не принадлежит')

# x = int(input())
# if 1000 <= x <= 9999:
#     if x % 7 == 0 or x % 17 ==0:
#         print('YES')
#     else:
#         print('NO')
# else:
#     print('NO')

# a = int(input())
# b = int(input())
# c = int(input())
# if a + b > c and b + c > a and a + c > b:
#     print('YES')
# else:
#     print('NO')

# year = int(input())
# if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
#     print('YES')
# else:
#     print('NO')

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# if (c == a and 1 <= d <= 8) or (d == b and 1 <= c <= 8):
#     print('YES')
# else:
#     print('NO')

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# if -1 <= (c - a) <= 1 and -1 <= (d - b) <= 1:
#     print('YES')
# else:
#     print('NO')


# zoom = int(input())
# flash = int(input())
# if zoom < flash:
#     print('YES')
# elif zoom > flash:
#     print('NO')
# else:
#     print("Don't know")

# «Равносторонний», «Равнобедренный» или «Разносторонний»

# a = int(input())
# b = int(input())
# c = int(input())
# if a == b == c:
#     print('Равносторонний')
# elif a == b != c or a == c != b or b == c !=a:
#     print('Равнобедренный')
# else:
#     print('Разносторонний')

# numbers

# a = int(input())
# b = int(input())
# c = int(input())
# if b < a < c or b > a > c:
#     print(a)
# elif a < b < c or a > b > c:
#     print(b)
# elif a < c < b or a > c > b:
#     print(c)

# Дан порядковый номер месяца (1,2,…, 12)(1, \, 2, \ldots, 12)(1,2,…, 12).
# Напишите программу, которая выводит на экран количество дней в этом месяце. Принять, что год является невисокосным.
#
# Примечание. Постарайтесь написать программу, так чтобы в ней было не более трех условий.

# 1, 3, 5, 7, 8, 10, 12 месяцы - 31 день
# 4, 6, 9, 11 - 30
# 2 - 28

# m31 = 31
# m30 = 30
# m28 = 28
# ch = int(input())
# if ch == 2:
#     print(m28)
# elif ch == 4 or ch == 6 or ch == 9 or ch == 11:
#     print(m30)
# else:
#     print(m31)


# Известен вес боксера-любителя (целое число). Известно, что вес таков,
# что боксер может быть отнесён к одной из трех весовых категорий:
#
#     Легкий вес – до 60 кг;
#     Первый полусредний вес – до 64 кг;
#     Полусредний вес – до 69 кг.
#
# Напишите программу, определяющую, в какой категории будет выступать данный боксер.

# weight = int(input())
# if weight < 60:
#     print('Легкий вес')
# elif 60 <= weight < 64:
#     print('Первый полусредний вес')
# elif 64 <= weight < 69:
#     print('Полусредний вес')

# Напишите программу, которая считывает с клавиатуры два целых числа и строку.
# Если эта строка является обозначением одной из четырёх математических операций (+, -, *, /),
# то выведите результат применения этой операции к введённым ранее числам,
# в противном случае выведите «Неверная операция». Если пользователь захочет поделить на ноль,
# выведите текст «На ноль делить нельзя!».

# a = int(input())
# b = int(input())
# op = input()
# if op == '+':
#     z = a + b
#     print(z)
# elif op == '-':
#     z = a - b
#     print(z)
# elif op == '*':
#     z = a * b
#     print(z)
# elif op == '/':
#     if b == 0:
#         print('На ноль делить нельзя!')
#     else:
#         z = a / b
#         print(z)
# else:
#     print('Неверная операция')


# Напишите программу, которая считывает названия двух основных цветов для смешивания.
# Если пользователь вводит что-нибудь помимо названий «красный», «синий» или «желтый»,
# то программа должна вывести сообщение об ошибке. В противном случае программа должна вывести название вторичного цвета,
# который получится в результате.
# Формат входных данных
# На вход программе подаются две строки, каждая на отдельной строке.
# Формат выходных данных
# Программа должна вывести полученный цвет смешения либо сообщение «ошибка цвета», если введён был не цвет.
# Примечание 1. Если смешать красный и красный, то получится красный и т.д.

# c1, c2 = input(), input()
# r = 'красный'
# b = 'синий'
# y = 'желтый'
# if c1 == c2 == r:
#     print('красный')
# elif c1 == c2 == b:
#     print('синий')
# elif c1 == c2 == y:
#     print('желтый')
# elif c1 == r and c2 == b or c1 == b and c2 == r:
#     print('фиолетовый')
# elif c1 == r and c2 == y or c1 == y and c2 == r:
#     print('оранжевый')
# elif c1 == b and c2 == y or c1 == y and c2 == b:
#     print('зеленый')
# else:
#     print('ошибка цвета')

# На колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета карманов:
#     карман 0 зеленый;
#     для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
#     для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный;
#     для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
#     для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный.
# Напишите программу, которая считывает номер кармана и показывает, является ли этот карман зеленым, красным или черным.
# Программа должна вывести сообщение об ошибке, если пользователь вводит число, которое лежит вне диапазона от 0 до 36.
# Формат входных данных
# На вход программе подаётся одно целое число.
# Формат выходных данных
# Программа должна вывести цвет кармана либо сообщение «ошибка ввода», если введённое число лежит вне диапазона от 0 до 36.

# r = int(input())
# if r == 0:
#     print('зеленый')
# elif 1 <= r <= 10 or 19 <= r <= 28:
#     if r % 2 != 0:
#         print('красный')
#     elif r % 2 == 0:
#         print('черный')
# elif 11 <= r <= 18 or 29 <= r <= 36:
#     if r % 2 != 0:
#         print('черный')
#     elif r % 2 == 0:
#         print('красный')
# else:
#     print('ошибка ввода')

# На числовой прямой даны два отрезка: [a1;  b1][a_1; \,  b_1][a1;  b1 и [a2; b2][a_2; \, b_2][a2; b2].
# Напишите программу, которая находит их пересечение.
# Пересечением двух отрезков может быть:
#     отрезок;
#     точка;
#     пустое множество.
# Формат входных данных
# На вход программе подаются 4 целых числа a1, b1, a2, b2a_1, \, b_1, \, a_2, \, b_2a1​,b1​,a2​,b2​,
# каждое на отдельной строке. Гарантируется, что a1<b1a_1 < b_1a1​<b1​​ и a2<b2a_2 < b_2a2​<b2​​.
# Формат выходных данных
# Программа должна вывести на экран границы отрезка, являющегося пересечением, либо общую точку, либо текст «пустое множество».
#
# a1 = int(input())
# b1 = int(input())
# a2 = int(input())
# b2 = int(input())
# if b2 < a1 or b1 < a2:
#     print('пустое множество')
# elif b2 == a1:
#     print(b2)
# elif b1 == a2:
#     print(b1)
# elif a1 >= a2:
#     if b1 >= b2:
#         print(a2, b2)
#     elif b1 < b2:
#         print(a2, b1)
# elif a1 < a2:
#     if b1 >= b2:
#         print(a1, b1)
#     elif b1 < b2:
#         print(a1, b2)



# year = int(input())
# if year % 100 == 0:
#     print('YES')
# else:
#     print('NO')

# x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
# z = x1 + x2 + y1 + y2
# if z % 2 == 0:
#     print('YES')
# else:
#     print('NO')

# Футбольная команда набирает девочек от 10 до 15 лет включительно.
# Напишите программу, которая запрашивает возраст и пол претендента,
# используя обозначение пола буквы m (от male – мужчина) и f (от female – женщина) и
# определяет подходит ли претендент для вступления в команду или нет.
# Если претендент подходит, то выведите «YES», иначе выведите «NO».
# Формат входных данных
# На вход программе подаётся натуральное число – возраст претендента и буква обозначающая пол m (мужчина) или f (женщина).
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# age, gender = int(input()), input()
# if 10 <= age <= 15 and gender == 'f':
#     print('YES')
# else:
#     print('NO')

# a = int(input())
# if a == 1:
#     print('I')
# elif a == 2:
#     print('II')
# elif a == 3:
#     print('III')
# elif a == 4:
#     print('IV')
# elif a ==5:
#     print('V')
# elif a == 6:
#     print('VI')
# elif a == 7:
#     print('VII')
# elif a == 8:
#     print('VIII')
# elif a == 9:
#     print('IX')
# elif a == 10:
#     print('X')
# else:
#     print('ошибка')

# Напишите программу, которая принимает на вход число и в зависимости от условий выводит текст «YES», либо «NO».
#
# Условия:
#
#     если число нечётное, то вывести «YES»;
#     если число чётное в диапазоне от 2 до 5 (включительно), то вывести «NO»;
#     если число чётное в диапазоне от 6 до 20 (включительно), то вывести «YES»;
#     если число чётное и больше 20, то вывести «NO».


# a = int(input())
# if a % 2 != 0:
#     print('YES')
# elif a % 2 == 0 and 2 <= a <= 5:
#     print('NO')
# elif a % 2 == 0 and 6 <= a <= 20:
#     print('YES')
# elif a % 2 == 0 and a > 20:
#     print('NO')

# Даны две различные клетки шахматной доски.
# Напишите программу, которая определяет, может ли слон попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки,
# потом для второй клетки. Программа должна вывести «YES»,
# если из первой клетки ходом слона можно попасть во вторую или «NO» в противном случае.
# Формат входных данных
# На вход программе подаётся четыре числа от 1 до 8.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
# Примечание. Шахматный слон ходит по диагоналям.

# Если разность x1 и y1 равны разности x2 и y2. Или если суммы равны ,значит да. Иначе нет

# x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
# if (x1 - y1) == (x2 - y2) or (x1 + y1) == (x2 + y2):
#     print('YES')
# else:
#     print('NO')

# Даны две различные клетки шахматной доски. Напишите программу,  которая определяет,
# может ли конь попасть с первой клетки на вторую одним ходом.
# Программа получает на вход четыре числа от 1 до 8 каждое,
# задающие номер столбца и номер строки сначала для первой клетки,
# потом для второй клетки. Программа должна вывести «YES»,
# если из первой клетки ходом коня можно попасть во вторую или «NO» в противном случае.
# Формат входных данных
# На вход программе подаётся четыре числа от 1 до 8.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
# Примечание. Шахматный конь ходит буквой «Г».



# если (х1==х2 и у1!=у2) или (х1!=х2 и у1==у2) или модуль(х1-х2) == модулю (у1-у2), то выводим "YES". Иначе "NO"

# x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
# if (x1 == x2 and y1 != y2) or (x1 != x2 and y1 == y2) or abs(x1 - x2) == abs(y1 - y2):
#     print('YES')
# else:
#     print('NO')
# put your python code here


# a = float(input())
# b = float(input())
# s = 0.5 * a * b
# print(s)

# Две старушки идут навстречу друг другу с постоянными скоростями V1V_1V1​ и V2V_2V2​ км/ч.
# Определите, через какое время старушки встретятся, если расстояние между ними равно SSS км.

# s = float(input())
# v1 = float(input())
# v2 = float(input())
# t = s / (v1 + v2)
# print(t)

# x = float(input())
# if x != 0.0:
#     y = x ** -1
#     print(y)
# else:
#     print('Обратного числа не существует')

# Конвертер фаренгейты - цельсии

# f = float(input())
# c = (5 / 9) * (f - 32)
# print(c)

# На вход программе подается число n – количество собачьих лет.
# Напишите программу, которая вычисляет возраст собаки в человеческих годах.
# Формат входных данных
# На вход программе подаётся натуральное число – количество собачьих лет.
# Формат выходных данных
# Программа должна вывести возраст собаки в человеческих годах.
#  В течение первых двух лет собачий год равен 10.5 человеческим годам.
#  После этого каждый год собаки равен 4 человеческим годам.

# n = int(input())
# if n <= 2:
#     t = float(n) * 10.5
#     print(t)
# elif n >= 2:
#     t = 21 + (n - 2) * 4
#     print(t)

# Дано положительное действительное число. Выведите его первую цифру после десятичной точки.
# Формат входных данных
# На вход программе подается положительное действительное число.
# Формат выходных данных
# Программа должна вывести цифру в соответствии с условием задачи.

# n = float(input())
# n1 = int(n * 10.0) % 10
# print(n1)

# Дано положительное действительное число. Выведите его дробную часть.
# Формат входных данных
# На вход программе подается положительное действительное число.
# Формат выходных данных
# Программа должна вывести дробную часть числа в соответствии с условием задачи.

# 44.45

# n = float(input())
# # n = 44.45
# n1 = n - float(int(n))
# print(n1)

# Напишите программу, которая находит наименьшее и наибольшее из пяти чисел.
# Формат входных данных
# На вход программе подается пять целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести наименьшее и наибольшее число с поясняющей надписью.


# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# e = int(input())
# max_n = max(a, b, c, d, e)
# min_n = min(a, b, c, d, e)
# print('Наименьшее число =', min_n)
# print('Наибольшее число =', max_n)

# Напишите программу, которая упорядочивает три числа от большего к меньшему.
# Формат входных данных
# На вход программе подается три целых числа, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести три числа, каждое на отдельной строке, упорядоченных от большего к меньшему.


# a = int(input())
# b = int(input())
# c = int(input())
# max_n = max(a, b, c)
# min_n = min(a, b, c)
# avg_n = a + b + c - max_n - min_n
# print(max_n)
# print(avg_n)
# print(min_n)

# Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется средней по величине цифре.
# Напишите программу, которая определяет интересное число или нет.
# Если число интересное, следует вывести – «Число интересное» иначе «Число неинтересное».
# Формат входных данных
# На вход программе подается целое трехзначное число.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
# n = int(input())
# a = n // 100
# b = (n //10) % 10
# c = n % 10
# max_n = max(a, b, c)
# min_n = min(a, b, c)
# avg_n = a + b + c - max_n - min_n
# if max_n - min_n == avg_n:
#     print('Число интересное')
# else:
#     print('Число неинтересное')

# a = abs(float(input()))
# b = abs(float(input()))
# c = abs(float(input()))
# d = abs(float(input()))
# e = abs(float(input()))
# s = a + b + c + d + e
# print(s)

# Прогуливаясь по Манхэттену, вы не можете попасть из точки А в точку Б по кратчайшему пути.
# Если только вы не умеете проходить сквозь стены, вам обязательно придется идти вдоль его параллельно-перпендикулярных улиц.
# На плоскости манхэттенское расстояние между двумя точками (p1; p2)(p_{1}; \, p_{2})(p1​;p2​)
# и (q1; q2)(q_{1}; \, q_{2})(q1​;q2​) определяется так ∣p1−q1∣+∣p2−q2∣|p_{1}-q_{1}|+|p_{2}-q_{2}|∣p1​−q1​∣+∣p2​−q2​∣.
# Напишите программу определяющую манхэттенское расстояние между двумя точками, координаты которых заданы.
# Формат входных данных
# На вход программе подается четыре целых числа, каждое на отдельной строке –
# p1, p2, q1, q2p_{1}, \, p_{2}, \, q_{1}, \, q_{2}p1​,p2​,q1​,q2​.
# Формат выходных данных
# Программа должна вывести одно число – манхэттенское расстояние.

# p1 = int(input())
# p2 = int(input())
# q1 = int(input())
# q2 = int(input())
# s = abs(p1 - q1) + abs(p2 - q2)
# print(s)

# from math import *

# x1 = float(input())
# y1 = float(input())
# x2 = float(input())
# y2 = float(input())
# s = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
# print(s)

# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу RRR.
# Формат входных данных
# На вход программе подается одно вещественное число RRR​.
# Формат выходных данных
# Программа должна вывести два числа – площадь круга и длину окружности радиуса RRR

# r = float(input())
# s = pi * r **2
# c = 2 * pi * r
# print(s)
# print(c)

# В математике выделяют следующие средние значения:
#     среднее арифметическое чисел aaa и bbb: a+b2\dfrac{a+b}{2}2a+b​;
#     среднее геометрическое чисел aaa и bbb: a⋅b\sqrt{a\cdot b}a⋅b
# среднее гармоническое чисел aaa и bbb: 2aba+b\dfrac{2ab}{a+b}a+b2ab​;
# среднее квадратичное чисел aaa и bbb: a2+b22\sqrt{\dfrac{a^2+b^2}{2}}2a2+b2​
# Формат входных данных
# На вход программе подается два вещественных числа aaa и bbb​, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести 4 числа – среднее арифметическое, геометрическое, гармоническое и квадратичное.

# a = float(input())
# b = float(input())
# ar = (a + b) / 2
# geo = sqrt(a * b)
# harm = (2 * a * b) / (a + b)
# quad = sqrt((a ** 2 + b ** 2)/2)
# print(ar)
# print(geo)
# print(harm)
# print(quad)


# from math import *
# x = radians(float(input()))
# s = sin(x) + cos(x) + tan(x)**2
# print(s)

# from math import *
# x = float(input())
# s = floor(x) + ceil(x)
# print(s)


# from math import *
# a = float(input())
# b = float(input())
# c = float(input())
# d = b **2 - 4 * a * c
# if d > 0:
#     x1 = (-b + sqrt(d)) / (2 * a)
#     x2 = (-b - sqrt(d)) / (2 * a)
#     print(max(x1, x2))
#     print(min(x1, x2))
# elif d == 0:
#     x1 = -b / (2 * a)
#     print(x1)
# else:
#     print('Нет корней')


# from math import *
# n = float(input())
# a = float(input())
# s = (n * a ** 2) / (4 * tan(pi / n))
# print(s)


# st1 = 'Python is a great language!", said Fred. "I don\'t ever remember having this much fun before."'
# print(st1)

# Hello [введенное имя] [введенная фамилия]! You just delved into Python
# fn = input()
# ln = input()
# print(f'Hello {fn} {ln}! You just delved into Python')

# Футбольная команда Barcelona имеет длину 9 символовФутбольная команда Barcelona имеет длину 9 символов

#f = input()
# l = len(f)
# print(f'Футбольная команда {f} имеет длину {l} символов')

# a = input()
# b = input()
# c = input()
# ma = max(len(a), len(b), len(c))
# mi = min(len(a), len(b), len(c))
# if len(a) == mi:
#     print(a)
# elif len(b) == mi:
#     print(b)
# elif len(c) == mi:
#     print(c)
# if len(a) == ma:
#     print(a)
# elif len(b) == ma:
#     print(b)
# elif len(c) == ma:
#     print(c)

# Вводятся 3 строки в случайном порядке.
# Напишите программу, которая выясняет можно ли из длин этих строк построить возрастающую арифметическую прогрессию.
# Формат входных данных
# На вход программе подаются три строки, каждая на отдельной строке.
# Формат выходных данных
# Программа должна вывести строку «YES», если из длин введенных слов можно построить арифметическую прогрессию, «NO» в ином случае.

# a = input()
# b = input()
# c = input()
# ma = max(len(a), len(b), len(c))
# mi = min(len(a), len(b), len(c))
# mavg = len(a) + len (b) + len(c) - max(len(a), len(b), len(c)) - min(len(a), len(b), len(c))
# if (ma + mi) / 2 == mavg:
#     print('YES')
# else:
#     print('NO')

# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если в введенной строке есть подстрока «синий» и «NO» в противном случае.

# b = input()
# if 'синий'  in b:
#     print('YES')
# else:
#     print('NO')

# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если в введённой строке есть подстрока «суббота» или «воскресенье», и «NO» в противном случае.

# s = input()
# if 'суббота' in s or 'воскресенье' in s:
#     print('YES')
# else:
#     print('NO')

# Будем считать email адрес корректным, если в нем есть символ собачки (@) и точки.
# Напишите программу проверяющую корректность email адреса.

# s = input()
# if '@' in s and '.' in s:
#     print('YES')
# else:
#     print('NO')

# Примечание 1. Однократное выполнение тела цикла называется итерацией цикла.

# for i in range(10):
#     print('Python is awesome!')

# t = input()
# n = int(input())
# for i in range(n):
#     print(t)

# for i in range(6):
#     print('AAA')
# for i in range(5):
#     print('BBBB')
# print('E')
# for i in range(9):
#     print('TTTTT')
# print('G')


# n = int(input())
# w = ('*') * 19
# for i in range(n):
#     print(w)

# n = input()
# for i in range(10):
#     print(i, n)



# n = int(input())
# for i in range(n + 1):
#     print(f'Квадрат числа {i} равен {i ** 2}')

# На вход программе подается натуральное число n (n≥2)n \, (n \ge 2)n(n≥2) – катет прямоугольного равнобедренного треугольника.
# Напишите программу, которая выводит звездный треугольник в соответствии с примером.
# Формат входных данных
# На вход программе подается одно натуральное число n (n≥2)n \, (n \ge 2)n(n≥2).

# k = int(input())
# for i in range(k):
#     print('*' * k)
#     k = k -1

# На вход программе подается три натуральных числа m, p, nm, \, p, \, nm,p,n:
#     m:m:m: стартовое количество организмов;
#     p:p:p: среднесуточное увеличение в %;
#     n:n:n: количество дней для размножения.
# Напишите программу, которая предсказывает размер популяции организмов.
# Программа должна выводить размер популяции в каждый день, начиная с 111 и заканчивая nnn-м днем.

# m = int(input())
# p = int(input())
# n = int(input())
# for i in range(n):
#     print(f'{i+1} {float(m)}')
#     m = float(m + m * p/100)


# m = int(input())
# n = int(input())
# if m < n:
#     for i in range(m, n + 1):
#         print(i)
# else:
#     for i in range(m, n - 1, -1):
#         print(i)


# Даны два целых числа mmm и nnn (m>nm > nm>n).
# Напишите программу, которая выводит все нечетные числа от mmm до nnn включительно в порядке убывания.
# Формат входных данных
# На вход программе подаются два целых числа mmm и nnn, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.

# m = int(input())
# n = int(input())
# for i in range(m % 2 - 1 + m, n - 1, -2):
#     print(i)

# Даны два натуральных числа mmm и nnn ( m≤nm \le nm≤n).
# Напишите программу, которая выводит все числа от mmm до nnn включительно удовлетворяющие хотя бы одному из условий:
#     число кратно 17;
#     число оканчивается на 9;
#     число кратно 3 и 5 одновременно.
# Формат входных данных
# На вход программе подаются два натуральных числа mmm и nnn (m≤nm \le nm≤n), каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.
# Примечание. Если чисел удовлетворяющих условию нет, выводить ничего не надо.

# m = int(input())
# n = int(input())
# for i in range(m, n + 1):
#     if i % 17 == 0 or i % 10 == 9 or (i % 3 == 0 and i % 5 == 0):
#         print(i)

# Дано натуральное число nnn. Напишите программу, которая выводит таблицу умножения на nnn.
# Формат входных данных
# На вход программе подается натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу умножения на введенное число.
# n = int(input())
# for i in range(1,11):
#     print(f'{n} x {i} = {n * i}')

# total = 0
# for i in range(1, 6):
#     total += i
#     print(total, end='')

# На вход программе подаются два целых числа aaa и bbb (a≤b)(a \le b)(a≤b). Напишите программу,
# которая подсчитывает количество чисел в диапазоне от aaa до bbb включительно, куб которых оканчивается на 444 или 999.
# Формат входных данных
# На вход программе подаются два целых числа aaa и bbb (a≤b)(a \le b)(a≤b).
# Формат выходных данных
# Программа должна вывести одно целое число в соответствии с условием программы.
# Примечание. Куб числа aaa – это его третья степень a**3
# a = int(input())
# b = int(input())
# counter = 0
# for i in range(a, b + 1):
#     if (i ** 3) % 10 == 4 or (i ** 3) % 10 == 9:
#         counter += 1
# print(counter)

# На вход программе подается натуральное число nnn, а затем nnn целых чисел, каждое на отдельной строке.
# Напишите программу, которая подсчитывает сумму введенных чисел.
# Формат входных данных
# На вход программе подаются натуральное число nnn, а затем nnn целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести сумму данных чисел.

# total = 0
# n = int(input())
# for i in range(n):
#     x = int(input())
#     total += x
# print(total)

# На вход программе подается натуральное число nnn. Напишите программу, которая вычисляет значение выражения
# (1+12 +13+…+1n)−ln⁡(n).\left(1+\dfrac12 + \dfrac13 + \ldots + \dfrac{1}{n} \right) - \ln (n).
# (1+21​ +31​+…+n1​)−ln(n).
#
# Примечание. Для вычисления натурального логарифма воспользуйтесь функцией log(n), которая находится в модуле math.
# from math import log
# n = int(input())
# total = 0
# for i in range(1, n + 1):
#     total += 1 / i
# z = total - log(n)
# print(z)

# На вход программе подается натуральное число nnn. Напишите программу,
# которая подсчитывает сумму тех чисел от 111 до nnn (включительно)
# квадрат которых оканчивается на 2,5 or 8.

# n = int(input())
# total = 0
# for i in range(1, n + 1):
#     if i ** 2 % 10 == 2 or i ** 2 % 10 == 5 or i ** 2 % 10 == 2:
#         total +=i
# print(total)

# На вход программе подается натуральное число nnn. Напишите программу, которая вычисляет n!n!n!.
# Входные данные
# На вход программе подается натуральное число n, (n≤12)n, \, (n \le 12)n,(n≤12).
# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.
# Примечание. Факториалом натурального числа nnn, называется произведение всех натуральных чисел от 1 1 1 до nnn, то есть
# n!=1⋅2⋅3⋅…⋅nn!=1\cdot2\cdot3\cdot…\cdot n
# n!=1⋅2⋅3⋅…⋅n

# total = 1
# n = int(input())
# for i in range(1, n +1):
#     total = total * i
# print(total)

# Напишите программу, которая считывает 10 чисел и выводит произведение отличных от нуля чисел.
# Формат входных данных
# На вход программе подаются 10 целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести произведение отличных от нуля чисел.
# Примечание. Гарантируется, что хотя бы одно из 10 чисел является ненулевым.

# total = 1
# for i in range(1, 11):
#     n = int(input())
#     if n != 0:
#         total = total * n
# print(total)

# На вход программе подается натуральное число nnn. Напишите программу, которая вычисляет сумму всех его делителей.
# Входные данные
# На вход программе подается натуральное число nnn.
# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.
# Примечание. Функция подсчета суммы всех делителей числа является очень важной в теории чисел.

# n = int(input())
# d = 0
# for i in range(1, n + 1):
#     if n % i == 0:
#         d += i
# print(d)

# На вход программе подается натуральное число nnn. Напишите программу вычисления знакочередующей суммы
# 1−2+3−4+5−6+…+(−1)n+1n.1-2+3-4+5-6 + \ldots + (-1)^{n+1}n.
# 1−2+3−4+5−6+…+(−1)n+1n.
# Входные данные
# На вход программе подается натуральное число nnn.
# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.
# n = int(input())
# summa = 0
# for i in range(1, n + 1):
#     summa += i * ((-1) ** (i + 1))
# print(summa)

# На вход программе подается натуральное число nnn,
# а затем nnn различных натуральных чисел, каждое на отдельной строке.
# Напишите программу, которая выводит наибольшее и второе наибольшее число последовательности.
# Формат входных данных
# На вход программе подаются натуральное число n≥2n \ge 2n≥2,
# а затем nnn различных натуральных чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести два наибольших числа, каждое на отдельной строке.

# n = int(input())
# large = 0
# pre_large = 0
# for i in range(1, n + 1):
#     x = int(input())
#     if x > large:
#         pre_large = large
#         large = x
#     if x > pre_large and x < large:
#         pre_large = x
# print(large)
# print(pre_large)

# Напишите программу, которая считывает последовательность из
# 10 целых чисел и определяет является ли каждое из них четным или нет.
# Формат входных данных
# На вход программе подаются 10 целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести строку «YES», если все числа четные и «NO» в ином случае.
# counter = 0
# for i in range(0, 10):
#     x = int(input())
#     if x % 2 == 0:
#         counter += 1
# if counter == 10:
#     print('YES')
# else:
#     print('NO')


# Напишите программу, которая считывает натуральное число nnn и выводит первые nnn чисел последовательности Фибоначчи.
# Формат входных данных
# На вход программе подается одно число n  (n≤100)n\,  (n \le 100)n (n≤100) – количество членов последовательности.
# Формат выходных данных
# Программа должна вывести члены последовательности Фибоначчи, отделенные символом пробела.
# Примечание. Последовательность Фибоначчи – это последовательность натуральных чисел,
# где каждое последующее число является суммой двух предыдущих:
# 1,  1,  2,  3,  5,  8,  13,   21,  34,  55, 
# 89,…1,  \, 1, \,  2, \,  3, \,  5, \,  8, \,  13, \,  21, \,  34, \,  55, \,  89, \ldots
# 1, 1, 2, 3, 5, 8, 13,  21, 34, 55, 89,…

# n = int(input())
# a = 1
# x = 0
# for i in range(1, n + 1):
#     b = 0
#     b = a
#     a = b + x
#     x = b
#     print(b, end=' ')


# i = 7
# a = 5
# while i < 11:
#     a += i
#     i += 2
# print(a)


# На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Концом последовательности является слово «КОНЕЦ» (без кавычек). Напишите программу, которая выводит члены данной последовательности.
# Формат входных данных
# На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Формат выходных данных
# Программа должна вывести члены данной последовательности.
# final = input()
#
# while final != 'КОНЕЦ' and final != 'конец':
#     print(final)
#     final = input()

# На вход программе подается последовательность слов, каждое слово на отдельной строке.
# Концом последовательности является одно из трех слов: «стоп», «хватит», «достаточно»
# (маленькими буквами, без кавычек). Напишите программу, которая выводит общее количество членов данной последовательности.
# «стоп», «хватит», «достаточно»
# w = input()
# counter = 0
# while w != 'стоп' and w != 'хватит' and w != 'достаточно':
#     w = input()
#     counter += 1
# print(counter)

# На вход программе подается последовательность целых чисел делящихся на 777, каждое число на отдельной строке.
# Концом последовательности является любое число не делящееся на 777.
# Напишите программу, которая выводит члены данной последовательности.

# n = int(input())
# while n % 7 == 0:
#     print(n)
#     n = int(input())

# На вход программе подается последовательность целых чисел, каждое число на отдельной строке.
# Концом последовательности является любое отрицательное число.
# Напишите программу, которая выводит сумму всех членов данной последовательности.
# Формат входных данных
# На вход программе подается последовательность чисел, каждое число на отдельной строке.
# c = 0
# n = int(input())
# while n >= 0:
#     c += n
#     n = int(input())
# print(c)

# На вход программе подается последовательность целых чисел от 111 до 555, характеризующее оценку ученика,
# каждое число на отдельной строке. Концом последовательности является любое отрицательное число,
# либо число большее 555. Напишите программу, которая выводит количество пятерок.
# Формат входных данных
# На вход программе подается последовательность чисел, каждое число на отдельной строке.
# Формат выходных данных
# Программа должна вывести количество пятерок

# c = 0
# n = int(input())
# while n >= 0 and n <= 5:
#     if n == 5:
#         c += 1
#     n = int(input())
# print(c)

# Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево,
# к тому же ведьмак не принимает купюры, он принимает только чеканные монеты.
# В мире ведьмака существуют монеты с номиналами 1, 5, 10, 251, \, 5, \, 10, \, 251,5,10,25.
# Напишите программу, которая определяет какое минимальное количество чеканных монет нужно заплатить ведьмаку.
# Формат входных данных
# На вход программе подается одно натуральное число, цена за услугу ведьмака.
# Формат выходных данных
# Программа должна вывести минимально возможное количество чеканных монет для оплаты.

# 49 7     25

# c = 0
# s = int(input())
# while s >= 25:
#     c += 1
#     s -= 25
# while s >= 10:
#     c += 1
#     s -= 10
# while s >= 5:
#     c += 1
#     s -= 5
# while s >= 1:
#     c += 1
#     s -= 1
# print(c)

# Дано натуральное число. Напишите программу, которая выводит его цифры в столбик в обратном порядке.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести цифры введенного числа в столбик в обратном порядке.


# n = 678
# print(n//10) 67
# print(n%10) 8

# n = int(input())
# while n != 0:
#     print(n % 10)
#     n = n //10

# Дано натуральное число. Напишите программу, которая меняет порядок цифр числа на обратный.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести число, записанное в обратном порядке.

# n = int(input())
# k = 0
# while n != 0:
#     k = k * 10 + n % 10
#     n = n // 10
# print(k)

# Дано натуральное число n, (n≥10)n, \, (n \ge 10)n,(n≥10). Напишите программу,
# которая определяет его максимальную и минимальную цифры.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести максимальную и минимальную цифры введенного числа (с поясняющей надписью)
# Максимальная цифра равна 7
# Минимальная цифра равна 0

# mini = 9
# maxi = 0
# n = int(input())
# while n != 0:
#     flag = n % 10
#     n = n // 10
#     if flag > maxi:
#         maxi = flag
#     if flag < mini:
#         mini = flag
# print('Максимальная цифра равна', maxi)
# print('Минимальная цифра равна', mini)

# Дано натуральное число. Напишите программу, которая вычисляет:
#     сумму его цифр;
#     количество цифр в нем;
#     произведение его цифр;
#     среднее арифметическое его цифр;
#     его первую цифру;
#     сумму его первой и последней цифры.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести значения указанных величин в указанном порядке


# мой код:
# n = int(input())
# n1 = n
# sum_n = 0
# count_n = 0
# multi_n = 1
# avg_n = 0.0
# flag_first_n = '1'
# last_n = n % 10
# while n != 0:
#     count_n += 1
#     flag_first_n += '0'
#     flag = n % 10
#     sum_n += flag
#     multi_n *= flag
#     n = n // 10
#
# avg_n = float(sum_n) / float(count_n)
# first_n = n1 * 10 // int(flag_first_n)
# print(sum_n)
# print(count_n)
# print(multi_n)
# print(avg_n)
# print(first_n)
# print(last_n + first_n)

# чужой
# объявляем переменные
# n = int(input())  # препарируемое число)))
# num = n  # уменьшаемый остаток для получения "стоп" в цикле
# total = 0  # сумма чисел
# product = 1  # произведение чисел
# quantity = 0  # количество чисел
#
# # делаем цикл
# while num:
#     total += num % 10  # считаем суму чисел
#     product *= num % 10  # считаем произведение чисел
#     quantity += 1  # считаем количество чисел
#     num //= 10  # откидывает последнее число
#
# # выводим ответы
# print(total)  # сумма чисел
# print(quantity)  # количество чисел
# print(product)  # произведение чисел
# print(total / quantity)  # среднее арифмитическое всех чисел
# print(n // 10 ** (quantity - 1))  # первое число
# print(n // 10 ** (quantity - 1) + n % 10)

# еще одно шикарное :
# n,sm,kol,pr = int(input()),0,0,1
# np = n % 10
# while n != 0:
#     sm += n % 10
#     kol +=1
#     pr *= n % 10
#     n1 = n
#     n = n // 10
# print(sm,kol,pr,sm/kol,n1,n1+np,sep='\n')

# Дано натуральное число n (n>9)n \, (n > 9)n(n>9). Напишите программу, которая определяет его вторую (с начала) цифру.
# Формат входных данных
# На вход программе подается одно натуральное число, состоящее как минимум из двух цифр.
# Формат выходных данных
# Программа должна вывести его вторую (с начала) цифру.


# n = 713121
# n1 = n
# counter = 0
# while n != 0:
#     counter += 1
#     n //= 10
#     print(n)
# print((n1 // 10 ** (counter - 2) % 10))
# n, c = input(), 0
# while n != 0:

# Дано натуральное число. Напишите программу, которая определяет, состоит ли указанное число из одинаковых цифр.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести «YES» если число состоит из одинаковых цифр и «NO» в противном случае.

# n = int(input())
# k = n % 10
# counter_0 = 0
# counter_1 = 0
# while n != 0:
#     counter_0 += 1
#     if n % 10 == k:
#         counter_1 += 1
#     n = n //10
# if counter_1 == counter_0:
#     print('YES')
# else:
#     print('NO')

# Дано натуральное число. Напишите программу, которая определяет,
# является ли последовательность его цифр при просмотре справа налево упорядоченной по неубыванию.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести «YES» если последовательность его цифр при просмотре
# справа налево является упорядоченной по неубыванию и «NO» в противном случае.

# n = int(input())
# k = 0
# y = 0
# counter = 1
# count_all = 0
# while n != 0:
#     k = n % 10
#     y = (n // 10) % 10
#     if y >= k:
#         counter += 1
#
#     count_all += 1
#     n //= 10
# if counter == count_all:
#     print('YES')
# else:
#     print('NO')

# не мое решение
# n,b = int(input()),'YES'
# while n // 10 != 0 :
#     a = n % 10
#     n = n // 10
#     if a > n % 10:
#         b = 'NO'
# print(b)

# for i in range(10):
#     print(i, end='*')
#     if i > 6:
#         break

# n = 10
# while n > 0:
#     n -= 1
#     if n == 2:
#         continue
#     print(n, end='*')

# result = 0
# for i in range(10):
#     if i % 2 == 0:
#         continue
#     result += i
# print(result)

# На вход программе подается число n>1n > 1n>1. Напишите программу, которая выводит его наименьший отличный от 111 делитель.
# Формат входных данных
# На вход программе подается одно натуральное число nnn.
# Формат выходных данных
# Программа должна вывести наименьший делитель отличный от 111.
# Примечание. Используйте оператор break при обнаружении делителя.

# n = int(input())
# for i in range(2, n +1):
#     if n % i == 0:
#         print(i)
#         break

# На вход программе подается натуральное число nnn. Напишите программу,
# которая выводит числа от 111 до nnn включительно за исключением:
#     чисел от 555 до 999 включительно;
#     чисел от 171717 до 373737 включительно;
#     чисел от 787878 до 878787 включительно.
# Формат входных данных
# На вход программе подается одно натуральное число nnn.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи, каждое на отдельной строке.
# Примечание. Используйте оператор continue .
# n = int(input())
# for i in range(1, n +1):
#     if 5 <= i <= 9 or 17 <= i <= 37 or 78 <= i <= 87:
#         continue
#     print(i)

# На обработку поступает последовательность из 101010 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10610^6106.
# Нужно написать программу, которая выводит на экран количество неотрицательных чисел последовательности и их произведение.
# Если неотрицательных чисел нет, требуется вывести на экран «NO». Программист торопился и написал программу неправильно.
# Найдите все ошибки в этой программе (их ровно 444).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание 1. Число xxx не превышает по абсолютной величине 10610^6106, если −106≤x ≤106-10^6 \le x \le 10^6−106≤x ≤106.
# Примечание 2. При необходимости вы можете добавить необходимые строки кода.
# print(10**6)
# count = 0
# p = 1
# for i in range(1, 11):
#     x = int(input())
#     if x > 0 and abs(x) <= (10) ** 6:
#         p = p * x
#         count = count + 1
# if count >= 1:
#     print(count)
#     print(p)
# else:
#     print('NO')
#
# count = 0
# p = 1
# for i in range(1, 11):
#     x = int(input())
#     if x >= 0:
#         p = p * x
#         count = count + 1
# if count > 0:
#     print(count)
#     print(p)
# else:
#     print('NO')

# Нужно написать программу, которая выводит на экран сумму всех отрицательных чисел последовательности
# и максимальное отрицательное число в последовательности. Если отрицательных чисел нет, требуется вывести на экран «NO».
# Программист торопился и написал программу неправильно.
# Найдите все ошибки в этой программе (их ровно 5).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

# mx = 0
# s = 0
# x = 0
# for i in range(2):
#     mx = x
#     x = int(input())
#     if x > 0:
#         continue
#     if x < 0:
#         s += x
#     if x > mx and x < 0:
#         mx = x
# if s < 0:
#     print(s)
#     print(mx)
# else:
#     print('NO')


# На обработку поступает последовательность из 777 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10610^6106.
# Нужно написать программу, которая подсчитывает и выводит сумму всех чётных чисел последовательности или 000,
# если чётных чисел в последовательности нет. Программист торопился и написал программу неправильно.
# Найдите все ошибки в этой программе (их ровно 444).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание 1. Число xxx не превышает по абсолютной величине 10610^6106, если −106≤x ≤106-10^6 \le x \le 10^6−106≤x ≤106.
# Примечание 2. При необходимости вы можете добавить необходимые строки кода.

# s = 0   #4
# for i in range(1, 8):  #1
#     n = int(input())     #2
#     if n % 2 == 0:      #3
#         s += n
# print(s)

# На обработку поступает натуральное число.
# Нужно написать программу, которая выводит на экран максимальную цифру числа, кратную 333.
# Если в числе нет цифр, кратных 333, требуется на экран вывести «NO». Программист торопился и написал программу неправильно.
# Найдите все ошибки в этой программе (их ровно 555).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание 1. Число 000 делится на любое натуральное число.
# Примечание 2. При необходимости вы можете добавить нужные строки кода.
#

# n = int(input())
# max_digit = -1
# while n > 0:
#     digit = n % 10
#     if digit % 3 == 0:
#         if digit > max_digit:
#             max_digit = digit
#     n = n // 10
# if max_digit == -1:
#     print('NO')
# else:
#     print(max_digit)
#


# На обработку поступает натуральное число.
# Нужно написать программу, которая выводит на экран его первую (старшую) цифру.
# Программист торопился и написал программу неправильно.
# Найдите все ошибки в этой программе (их ровно 2).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

# n = int(input())
# # n = 143
# while n > 0:
#     k = n % 10
#     n = n // 10
#     if n % 10 > k:
#         k = n % 10
# print(k)

# из инета
# n = int(input())
# while n > 9:  # Ошибка - цикл имеет смысл только в случае если данное натурально число дву- и  более -значное.
#     n //= 10  # Ошибка - нам необходимо постепенно отбрасывать числа до первого, а не выяснять последние из них.
# print(n)

# n = input()
# n = 123312312312
# product = 1
# while n >= 10:
#     digit = n % 10
#     product = product * digit
#     n //= 10
# print(product)

# for i in range(3):
#     for j in range(3):
#         if i == j:
#             break
#         print(i, j)

# for i in range(8):
#     for j in range(6):
#         print('*', end='')
#     print()

# for i in range(8):
#     for j in range(i + 1):
#         print('*', end='')
#     print()

# for i in range(1, 4):
#     for j in range(3, 5):
#         print(i + j, end='')

# counter = 0
# for i in range(99, 102):
#     temp = i
#     while temp > 0:
#         counter += 1
#         temp //= 10
# print(counter)

# Дано натуральное число n  (n≤ 9)n \, (n \le 9)n (n≤ 9).
# Напишите программу, которая печатает таблицу размером n×3n \times 3n×3 состоящую из данного числа (числа отделены одним пробелом).
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу размером n×3n \times 3n×3 состоящую из данного числа.

# n = int(input())
# for i in range(n):
#     for j in range(3):
#         print(n, end=' ')
#     print()

# Дано натуральное число n  (n≤ 9)n \, (n \le 9)n (n≤ 9).
# Напишите программу, которая печатает таблицу размером n×5n \times 5n×5,
# где в iii-ой строке указано число iii (числа отделены одним пробелом).
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу размером n×5n \times 5n×5 в соответствии с условием.
# n = int(input())
# for i in range(n):
#     for j in range(5):
#         print(i +1, end=' ')
#     print()


# Дано натуральное число n  (n≤ 9)n \, (n \le 9)n (n≤ 9).
# Напишите программу, которая печатает таблицу сложения для всех чисел от 111 до nnn в соответствии с примером.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу сложения для всех чисел от 111 до nnn.

# n = int(input())
# for i in range(1, n+1):
#     for j in range(1,10):
#         print(f'{i} + {j} = {i + j}')
#     print()


# Дано нечетное натуральное число nnn. Напишите программу,
# которая печатает равнобедренный звездный треугольник с основанием, равным nnn в соответствии с примером:
# *
# **
# ***
# ****
# ***
# **
# *
# Формат входных данных
# На вход программе подается одно нечетное натуральное число.
# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.

# n = int(input())
# for i in range(n//2+1):
#     for j in range(i):
#         print('*', end='')
#     print()
# for i in range(n//2+1, 0, -1):
#     for j in range(i):
#         print('*', end='')
#     print()

# Дано натуральное число nnn. Напишите программу, которая печатает численный треугольник в соответствии с примером:
# 1
# 22
# 333
# 4444
# 55555
# ...
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.
# Примечание. Используйте вложенный цикл for

# # n = int(input())
# n = 5
# for i in range(1, n + 1):
#     for j in range(1, i + 1):
#         print(i, end='')
#     print()

# 28n+30k+31m=365
# for n in range(13):
#     for k in range(12):
#         for m in range(11):
#             if 28 * n + 30 * k + 31 * m == 365:
#                 print(f'28 * {n} + 30 * {k} + 31 * {m} = 365')

# Имеется 100 рублей.
# Сколько быков, коров и телят можно купить на все эти деньги, если плата за быка – 10 рублей,
# за корову – 5 рублей, за теленка – 0.5 рубля и надо купить 100 голов скота?
# Примечание. Используйте вложенный цикл for.

# s = 100
# b = 10
# c = 5
# t = 0.5
# q = 100
# for i in range(int(s / b)+1):
#     for j in range(int(s / c)+1):
#         for k in range(int(s / t)+1):
#             if b * i + c * j + k * t == s:
#                 if i + j + k == q:
#                     print(i, j, k, end=' ')

# В 1769 году Леонард Эйлер сформулировал обобщенную версию Великой теоремы Ферма,
# предполагая, что по крайней мере nnn энных степеней необходимо для получения суммы,
# которая сама является энной степенью для n>2n > 2n>2. Напишите программу для опровержения гипотезы Эйлера
# (продержавшейся до 1967 года), и найдите четыре положительных целых числа, сумма 5-х степеней которых равна
# 5-й степени другого положительного целого числа.
# Таким образом, найдите пять натуральных чисел a, b, c, d, ea, \, b, \, c, \, d, \, ea,b,c,d,e удовлетворяющих условию:
# a5+b5+c5+d5=e5.a^5+b^5+c^5+d^5=e^5.
# a5+b5+c5+d5=e5. В ответе укажите сумму a+b+c+d+ea+b+c+d+ea+b+c+d+e.
# Примечание 1. Используйте вложенный цикл for.
# Примечание 2. Считайте, что числа a,b,c,d,ea, b, c, d, ea,b,c,d,e не превосходят 150150150.
# Примечание 3. Программа может работать дольше чем обычно.
# В зависимости от способа решения задачи на выполнение программы может уходить до нескольких минут.
# Попробуйте сократить количество вложенных циклов.

# for a in range(1, 151):
#     for b in range(1, 151):
#         for c in range(1, 151):
#             for d in range(1, 151):
#                 for e in range(1, 151):
#                     if (a ** 5 + b ** 5 + c ** 5 + d ** 5) ** (1 / 5) == e:
#                         print(a, b, c, d, e, end=' ')
#                         print('FUCK YEAH')

# Дано натуральное число nnn.
# Напишите программу, которая печатает численный треугольник с высотой равной nnn, в соответствии с примером:
# 1
# 2 3
# 4 5 6
# 7 8 9 10
# 11 12 13 14 15
# 16 17 18 19 20 21
# ...
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.
# Примечание. Используйте вложенный цикл for.

# n = int(input())
# k = 1
# for i in range(n + 1):
#     for j in range(i):
#         print(k, end=' ')
#         k += 1
#     print()


# n = int(input())
# for i in range(n + 1):
#     for j in range(i):
#         print(j + 1, end=' ')
#         if j == i - 1:
#             for v in range(j, 0, -1):
#                 print(v, end=' ')
#     print()

# На вход программе подается два натуральных числа aaa и bbb (a< ba < ba< b).
# Напишите программу, которая находит натуральное число из отрезка [a; b][a; \, b][a;b] с максимальной суммой делителей.
# Формат входных данных
# На вход программе подаются два числа, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести два числа на одной строке, разделенных пробелом:
# число с максимальной суммой делителей и сумму его делителей.
# Примечание. Если таких чисел несколько, то выведите наибольшее из них.
# a = int(input())
# b = int(input())
# s1 = 0
# c = 0
# for i in range(a, b + 1):
#     s = 0
#     for j in range(1, b + 1):
#         if i % j == 0:
#             s += j
#             if s >= s1:
#                 s1 = s
#                 c = i
# print(c)
# print(s1)

# На вход программе подается натуральное число nnn. Напишите программу,
# выводящую графическое изображение делимости чисел от 111 до nnn включительно.
# В каждой строке надо напечатать очередное число и столько символов «+», сколько делителей у этого числа.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести графическое изображение чисел от 111 до nnn, каждое на отдельной строке.

# n = int(input())
# for i in range(1, n + 1):
#     print(i, end='')
#     for j in range(1, n + 1):
#         if i % j == 0:
#             print('+', end='')
#     print()

# На вход программе подается натуральное число nnn.
# Напишите программу, которая находит цифровой корень данного числа.
# Цифровой корень числа n получается следующим образом: если сложить все цифры этого числа,
# затем все цифры найденной суммы и повторить этот процесс, то в результате будет получено однозначное число (цифра),
# которое и называется цифровым корнем данного числа.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести цифровой корень введенного числа.
# Примечание. Используйте вложенные циклы while.

# n = int(input())
# while n > 9:
#     s = 0
#     while n > 0:
#         last_digit = n % 10
#         s += last_digit
#         n = n // 10
#     n = s
# print(n)

# Дано натуральное число nnn. Напишите программу, которая выводит значение суммы 1!+2!+3!+…+n!1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести значение суммы 1!+2!+3!+…+n!1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.
# Примечание 1. Факториалом натурального числа nnn, называется произведение всех натуральных чисел от 1 1 1 до nnn, то есть
# n!=1⋅2⋅3⋅…⋅nn!=1\cdot2\cdot3\cdot…\cdot n
# n!=1⋅2⋅3⋅…⋅n
# Примечание 2. Задачу можно решить без вложенного цикла. Напишите две версии программы =)

# n = int(input())
# k = 1
# c = 0
# for i in range(1, n + 1):
#     k = 1
#     for j in range(1, i + 1):
#         k *= j
#     c += k
# print(c)

# На вход программе подается два натуральных числа aaa и bbb (a< ba < ba< b).
# Напишите программу, которая находит все простые числа от aaa до bbb включительно.
# Формат входных данных
# На вход программе подаются два числа, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести все простые числа от aaa до bbb включительно, каждое на отдельной строке.
# Примечание. Число 111 простым не является.

# a = int(input())
# b = int(input())
# for i in range(a, b + 1):
#     count = 0
#     for j in range(1, i + 1):
#         if i % j == 0:
#             count += 1
#
#     if count == 2:
#         print(i)

# n = 5
# res = 1
# i = 2
# while i <= n:
#     res *= i
#     i += 1
# print(res)

# n = 44553
# # n = int(input())
# s = 0
# while n > 1:
#     if n % 2 == 0:
#         s = s + n % 10
#     n //= 10
# print(s)

# На обработку поступает последовательность из 8 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 101210^{12}1012.
# Нужно написать программу, которая выводит на экран количество делящихся нацело на 4
# чисел в исходной последовательности и максимальное делящееся нацело на 4 число.
# Если делящихся нацело на 4 чисел нет, требуется на экран вывести «NO». Программист торопился и написал программу неправильно.
# Найдите все ошибки в этой программе (их может быть одна или несколько).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание. Обратите внимание, что требуется найти ошибки в имеющейся программе,
# а не написать свою, возможно, использующую другой алгоритм решения.
# n = 7
# count = 0
# maximum = 1000
# for i in range(1, n + 1):
#     x = int(input())
#     if x // 4 == 0:
#         count += 1
#         if x < maximum:
#             maximum = x
# if count > 0:
#     print(count)
#     print(maximum)
# else:
#     print('NO')

# n = 8
# count = 0
# maximum = -100000000000001
# for i in range(1, n + 1):
#     x = int(input())
#     if x % 4 == 0:
#         count += 1
#         if x > maximum:
#             maximum = x
# if count > 0:
#     print(count)
#     print(maximum)
# else:
#     print('NO')

# На обработку поступает последовательность из 4 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10810^8108.
# Нужно написать программу, которая выводит на экран количество нечётных чисел в исходной последовательности
# и максимальное нечётное число. Если нечётных чисел нет, требуется на экран вывести «NO».
# Программист торопился и написал программу неправильно.
# Найдите все ошибки в этой программе (их может быть одна или несколько).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание. Обратите внимание, что требуется найти ошибки в имеющейся программе,
# а не написать свою, возможно, использующую другой алгоритм решения.

# n = 4
# count = 0
# maximum = -100000001
# for i in range(1, n + 1):
#     x = int(input())
#     if x % 2 != 0:
#         count += 1
#         if x > maximum:
#             maximum = x
#
# if count > 0:
#     print(count)
#     print(maximum)
# else:
#     print('NO')

# На вход программе подается натуральное число nnn.
# Напишите программу, которая печатает звездную рамку размерами n×19n \times 19n×19.
# Формат входных данных
# На вход программе подаётся натуральное число n∈[3; 19]n \in [3; \, 19]n∈[3;19] — высота звездной рамки.
# Формат выходных данных
# Программа должна вывести звездную рамку размерами n×19n \times 19n×19.
# Подсказка. Для печати звездной линии используйте умножение строки на число
# n = int(input())
# a = '*' * 19
# b = '*' + ' ' * 17 + '*'
# for i in range(1, n + 1):
#     if i == 1 or i == n:
#         print(a)
#     else:
#         print(b)

# Дано натуральное число n (n>99)n \, (n > 99)n(n>99). Напишите программу, которая определяет его третью (с начала) цифру.
# Формат входных данных
# На вход программе подается одно натуральное число, состоящее как минимум из трех цифр.
# Формат выходных данных
# Программа должна вывести его третью (с начала) цифру.
# n = int(input())
# counter = 0
# k = n
# while n > 0:
#     counter +=1
#     n //= 10
# # tab = n // 10 ** (counter - 2)
# tab = (k // 10 ** (counter - 3)) % 10
# print(tab)
#
#  из инета , фу какая у меня гадость:
# # put your python code here
# n = int(input())
# while n > 999:
#     n //= 10
# print(n % 10)

# Дано натуральное число. Напишите программу, которая вычисляет:
#     количество цифр 3 в нем;
#     сколько раз в нем встречается последняя цифра;
#     количество четных цифр;
#     сумму его цифр, больших пяти;
#     произведение цифр, больших семи (если цифр больших семи нет, то вывести 1, если такая цифра одна, то вывести ее);
#     сколько раз в нем встречается цифры 0 и 5 (всего суммарно).
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести значения указанных величин в указанном порядке.

# n = int(input())
# c_3 = 0
# last = n % 10
# c_l = 0
# c_ch = 0
# s_5 = 0
# c_multi = 1
# c_05 = 0
# while n > 0:
#     if n % 10 == 3:
#         c_3 += 1
#     if n % 10 == last:
#         c_l += 1
#     if n % 2 == 0:
#         c_ch += 1
#     if n % 10 > 5:
#         s_5 += n % 10
#     if n % 10 > 7:
#         c_multi *= n % 10
#     if n % 10 == 0 or n % 10 == 5:
#         c_05 += 1
#     n //= 10
#
# print(c_3)
# print(c_l)
# print(c_ch)
# print(s_5)
# print(c_multi)
# print(c_05)

# Сриниваса Рамануджан – индийский математик, славившийся своей интуицией в области чисел.
# Когда английский математик Годфри Харди навестил его однажды в больнице, он обмолвился, что номером такси,
# на котором он приехал, было 172917291729, такое скучное и заурядное число. На что Рамануджан ответил: "Нет, нет!" \
# " Это очень интересное число. Это наименьшее число, выражаемое как сумма двух кубов двумя разными способами". Другими словами:
# 1729 =13+123=93+103.1729 = 1^3 + 12^3 = 9^3 + 10^3.
# 1729 =13+123=93+103.
# Напишите программу, которая находит аналогичные интересные числа.
# В ответе запишите первые 5 чисел в порядке возрастания, включая число 172917291729.


#
# for i in range(0, 15):
#     for j in range(0, 15):
#         if i ** 3 + j ** 3 == 1729:
#             print(i, j)
# print(1 ** 3 + 12 ** 3)
# 1 ** 3 + 12 ** 3 = 9 ** 3 + 10 ** 3
#
# for a in range(33):
#     for b in range(33):
#         for c in range(33):
#             for d in range(33):
#                 if a ** 3 + b ** 3 == c ** 3 + d ** 3 and a != b != c != d and a ** 3 + b ** 3 < 3000:
#                     print(a ** 3 + b ** 3)
#
# for a in range(1, 41):
#     for c in range(1, a):
#         for d in range(1, c+1):
#             for b in range(1, d):
#                 if a**3 + b**3 == d**3 + c**3:
#                     print(a**3+b**3)
#

# s = '01234567891011121314151617'
# for i in range(0, len(s), 5):
#     print(s[i], end='')

# На вход программе подается одна строка.
# Напишите программу, которая выводит элементы строки с индексами 0, 2, 4, ... в столбик.
# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести элементы строки с индексами 0, 2, 4, ..., каждое на отдельной строке.

# a, b, c = input(), input(), input()
#
# n = input()
# print(b[0],a[0],c[0], end='')

# На вход программе подается одна строка состоящая из цифр. Напишите программу, которая считает сумму цифр данной строки
# k = input()
# n = str(k)
# f = 0
# for i in range(0, len(n)):
#     f += int(n[i])
# print(f)

# На вход программе подается одна строка. Напишите программу, которая выводит сообщение «Цифра» (без кавычек),
# если строка содержит цифру. В противном случае вывести сообщение «Цифр нет» (без кавычек).

# for i in range(0,10):
#     if i in n:
#         print()
#
# n = input()
# count_plus = 0
# count_multi = 0
# for i in range(0, len(n)):
#     if '*' == n[i]:
#         count_multi += 1
#     if '+' == n[i]:
#         count_plus += 1
# print(f'Символ + встречается {count_plus} раз')
# print(f'Символ * встречается {count_multi} раз')

# На вход программе подается одна строка. Напишите программу, которая определяет сколько в ней одинаковых соседних символов.
# n = input()
# p = 0
# k = 0
# for i in range(0, len(n)):
#     if n[i] in 'ауоыиэяюёеАУОЫИЭЯЮЁЕ':
#         p += 1
#     if n[i] in 'бвгджзйклмнпрстфхцчшщБВГДЖЗЙКЛМНПРСТФХЦЧШЩ':
#         k += 1
#
# print('Количество гласных букв равно', p)
# print('Количество согласных букв равно', k)

# n = int(input())
# txt = str()
# while n > 0:
#     txt += str(n % 2)
#     n //= 2
# print(txt)

# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[::-1])

# На вход программе подается одно слово,
# записанное в нижнем регистре. Напишите программу, которая определяет является ли оно палиндромом.

# t = input()
# if t[::] == t[::-1]:
#     print('YES')
# else:
#     print('NO')

# На вход программе подается одна строка. Напишите программу, которая выводит:
#
#     общее количество символов в строке;
#     исходную строку повторенную 3 раза;
#     первый символ строки;
#     первые три символа строки;
#     последние три символа строки;
#     строку в обратном порядке;
#     строку с удаленным первым и последним символом.
#
# Формат входных данных
# На вход программе подается одна строка, длина которой больше 3 символов.
# n = 'khdkjhashd'
# print(len(n))
# print(n * 3)
# print(n[0])
# print(n[0:3])
# print(n[-3:])
# print(n[::-1])
# print(n[1:-1])

# На вход программе подается одна строка. Напишите программу, которая выводит:
#
#     третий символ этой строки;
#     предпоследний символ этой строки;
#     первые пять символов этой строки;
#     всю строку, кроме последних двух символов;
#     все символы с четными индексами;
#     все символы с нечетными индексами;
#     все символы в обратном порядке;
#     все символы строки через один в обратном порядке, начиная с последнего.

# n = 'khdkjhashd'
# print(n[2])
# print(n[-2])
# print(n[0:5])
# print(n[0:-2])
# print(n[::2])
# print(n[1::2])
# print(n[::-1])
# print(n[::-2])

# На вход программе подается строка текста.
# Напишите программу, которая разрежет ее на две равные части, переставит их местами и выведет на экран.
# Формат входных данных
# На вход программе подается строка текста.

# n = 'Hello'
# print(round(len(n)//2))
#
# print(len(n) - len(n)//2)
# print(n[len(n) - len(n)//2:], n[:(len(n) - len(n)//2)], sep='')

# Англо-русский словарик:
# capitalize — писать прописными буквами, закрепить.
# swapcase — обменять регистр. swap — гл. обмениваться, case — случай, регистр, падеж, дело, расследование...
# title — заголовок, титул.
# lower — нижний.
# upper — верхний.

# s = 'i Learn Python language'
# print(s.capitalize())

# n = 'chris Alan'
# if n.title() == n:
#     print('YES')
# else:
#     print('NO')

# n = 'я очень хороший текст =)'
# if 'хорош' in n.lower():
#     print('YES')
# else:
#     print('NO')

# подсчет в нижнем регистре

# n = 'abcABCD12345'
# counter = 0
# for i in range(0,len(n)):
#     if 'a' <= n[i] <= 'z':
#         counter += 1
# print(counter)

# s = 'www.stepik.org'
# print(s.startswith('www'))

# На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом.
# Напишите программу, которая подсчитывает количество слов в ней.
# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести количество слов.
# Примечание 1. Строка текста не содержит пробелов в начале и конце.
# Примечание 2. Используйте для решения задачи метод count.

# n = 'jgjh hjkhkjh'
# print(n.count(' ', 0, len(n)) + 1)

# n = 'АааГГЦЦцТТттт'
# nk = n.lower()
# print('Аденин:', nk.count('а'))
# print('Гуанин:', nk.count('г'))
# print('Цитозин:', nk.count('ц'))
# print('Тимин:', nk.count('т'))

# n = 3
# counter = 0
# for i in range(0, n):
#     x = input()
#     if x.count('11') >= 3:
#         counter += 1
# print(counter)
#

# На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.

# n = 'nezabud dl-6'
# m = '1234567890'
# counter = 0
# for i in range(0,len(n)):
#     if n[i] in m:
#         counter += 1
# print(counter)

# Программа должна вывести «YES» если введенная строка заканчивается подстрокой .com или .ru и «NO» в противном случае.

# n = 'edsfsdf.com'
# if n.endswith('.com') or n.endswith('.ru'):
#     print('YES')
# else:
#     print('NO')

# На вход программе подается строка текста. Напишите программу, которая выводит на экран символ, который появляется наиболее часто.
# Формат входных данных
# На вход программе подается строка текста. Текст может содержать строчные
# и заглавные буквы английского и русского алфавита, а также цифры.
# Формат выходных данных
# Программа должна вывести символ, который появляется наиболее часто.
# Примечание 1. Если таких символов несколько, следует вывести последний по порядку символ.
# Примечание 2. Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.

# n = input()
# counter = 0
# t = str()
# for i in range(0, len(n)):
#     if n.count(n[i]) >= counter:
#         counter = n.count(n[i])
#         t = n[i]
# print(t)

# На вход программе подается строка текста.
# Если в этой строке буква «f» встречается только один раз, выведите её индекс.
# Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке,
# разделенных символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».

# n = input()
# counter = 0
# max_pos = 0
# min_pos = len(n)
# for i in range(0, len(n)):
#     if n[i] == 'f':
#         counter += 1
#         if i < min_pos:
#             min_pos = i
#         if counter >= 2:
#             max_pos = i
#
# if counter == 0:
#     print('NO')
# else:
#     print(min_pos, end=' ')
# if max_pos > 0:
#     print(max_pos)

# правильнее:
# s= input()
# if s.find('f') == -1:
#     print('NO')
# elif s.find('f') == s.rfind('f'):
#     print(s.find('f'))
# else:
#     print(s.find('f'),s.rfind('f'))

# На вход программе подается строка текста, в которой буква «h» встречается минимум два раза.
# Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h»,
# а также все символы, находящиеся между ними.

# s = 'sadasdhasdasdashasd'
# print(s[0:s.find('h')] , s[s.rfind('h') + 1:], sep='')
# for i in range(26):
#     print(chr(ord('A') + i))

# a = int(input())
# b = int(input())
# for i in range(a, b + 1):
#     print(chr(i), end=' ')

# На вход программе подается строка текста.
# Напишите программу, которая переводит каждый ее символ в соответствующий ему код из таблицы символов Unicode.

# a = input()
# for i in range(0, len(a)):
#     print(ord(a[i]), end=' ')
#

# f = 14
# a = 'fsfftsfufksttskskt'
# k = str('')
# for i in range(0, len(a)):
#     print(ord(a[i]), end=' ')



# f = 14
# a = 'fsfftsfufksttskskt'
# for i in a:
#     ch = ord(i) - f
#     if ch < 97:
#         ch += 26
#     print(chr(ch), end='')

# s = 'Python rocks!'
# print(s[1:5])

# На вход программе подается строка текста.
# Напишите программу, которая удаляет из нее все символы с индексами кратными 3, то есть символы с индексами 0, 3, 6, ....
# n = 'dsfdsfasdfsdas'
# for i in range(0,len(n)):
#     if i % 3 != 0:
#         print(n[i], end='')



# Sample Input:
# 1231
# Sample Output:
# one23one

# n = '1231'
# print(n.replace('1','one'))


# n = '12@31@'
# print(n.replace('@',''))

# На вход программе подается строка текста. Напишите программу, которая выводит индекс второго вхождения буквы «f».
# Если буква «f» встречается только один раз, выведите число -1, а если не встречается ни разу, выведите число -2

# n = 'affective'
# if n.count('f') == 0:
#     print('-2')
# elif n.count('f') == 1:
#     print('-1')
# else:
#     z = n.replace('f', '1',1)
#     print(z.find('f'))

# На вход программе подается строка текста в которой буква «h» встречается как минимум два раза.
# Напишите программу, которая возвращает исходную строку и переворачивает последовательность символов,
# заключенную между первым и последним вхождением буквы «h».
# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# s = '1234567h1234567h1234567'
#
# print(s[:s.find('h')+1], s[s.rfind('h')-1:s.find('h'):-1], s[s.rfind('h')::], sep='')

# numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
# print(len(numbers))
# print(numbers[-1])
# print(numbers[::-1])
# if 5 in numbers and 17 in numbers:
#     print('YES')
# else:
#     print('NO')
# del numbers[0]
# del numbers[-1]
# print(numbers)


# n = int(input())
# l = []
# for i in range(0, n):
#     k = input()
#     l.append(k)
# print(l)

# Напишите программу, выводящую следующий список:
# ['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', ...]
# Формат выходных данных
# Программа должна вывести указанный список.
# Примечание. Последний элемент списка состоит из 26 символов z.

# n = ord('z')
# print(n)
# l = list()
# for i in range(97, 123):
#     t = ''
#     for k in range(i - 96):
#         t += chr(i)
#     l.append(t)
#
# print(l)

# n = int(input())
# l = []
# for i in range(n):
#     x = int(input())
#     l.append(x ** 2)
# print(l)

# На вход программе подается натуральное число nnn.
# Напишите программу, которая создает список состоящий из делителей введенного числа.

# n = 17
# l = []
# for i in range(1, n+1):
#     if n % i == 0:
#         l.append(i)
# print(l)

# n = 5
# l = []
# for i in range(n):
#     x = int(input())
#     l.append(x)
# k = 0
# t = []
# for i in range(1,len(l)):
#     k = l[i-1] + l[i]
#     t.append(k)
# print(t)

# На вход программе подается натуральное число nnn, а затем nnn целых чисел. Напишите программу, которая
# создает из указанных чисел список, затем удаляет все элементы стоящие по нечетным индексам, а затем выводит полученный список.
# Формат входных данных
# На вход программе подаются натуральное число nnn, а затем nnn целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести список в соответствии с условием задачи.
# Примечание. Используйте оператор del.

# l = []
# for i in range(n):
#     x = int(input())
#     l.append(x)
# f = l[::2]
# print(f)
#
# как вариант:
# n=int(input())
# b=[]
# for i in range(n):
#     a=int(input())
#     b.append(a)
# del b[1::2]
# print(b)

# На вход программе подается натуральное число nnn и nnn строк, а затем число kkk.
# Напишите программу, которая выводит kkk-ую букву из введенных строк на одной строке без пробелов.
# Формат входных данных
# На вход программе подается натуральное число nnn,  далее nnn строк, каждая на отдельной строке.
# В конце вводится натуральное число kkk – номер буквы (нумерация начинается с единицы).
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
# Примечание. Если некоторые строки слишком короткие, и в них нет символа с заданным номером,
# то такие строки при выводе нужно игнорировать.

# n = int(input())
# n = 10
# l = []
# for i in range(n):
#     x = input()
#     l.append(x)
# # l = ['aaaaa','a','a','a','a','bbbbb','a','a','a','a']
#
# m = int(input())
# # m = 5
# for i in range(len(l)):
#     if m <= len(l[i]):
#         print(l[i][m-1], end='')

# На вход программе подается натуральное число nnn, а затем nnn
# not строк
# Напишите программу, которая создает список из символов всех строк, а затем выводит его.
# Формат входных данных
# На вход программе подаются натуральное число nnn, а затем nnn строк, каждая на отдельной строке.
# Формат выходных данных
# Программа должна вывести список состоящий из символов всех введенных строк.
# Примечание. В результирующем списке могут содержаться одинаковые символы.

# n = 3
# n = int(input())
# l = []
# for i in range(n):
#     st = input()
#     for j in range(len(st)):
#         l.append(st[j])
# print(l)

# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# k = 0
# for i in range(len(numbers)):
#     k += numbers[i] **2
# print(k)

# На вход программе подается натуральное число nnn, а затем nnn целых чисел.
# Напишите программу, которая для каждого введенного числа xxx выводит значение функции
# f(x)=x2+2x+1f(x) = x^2 + 2x + 1f(x)=x2+2x+1, каждое на отдельной строке.
# Формат входных данных
# На вход программе подаются натуральное число nnn, а затем nnn целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести сначала введенные числа, затем пустую строку, а затем соответствующие значения функции.
# Примечание. Для первого теста имеем:
# f(1)=12+2⋅1+1=4, f(2)=22+2⋅2+1=9, f(3)=32+2⋅3+1=16,…f(1) = 1^2 + 2\cdot 1 + 1 = 4, \, f(2) = 2^2 + 2\cdot 2 + 1 = 9, \, f(3) = 3^2 + 2 \cdot 3 + 1 = 16, \ldots
# f(1)=12+2⋅1+1=4,f(2)=22+2⋅2+1=9,f(3)=32+2⋅3+1=16,…


# n = int(input())
# l1 , l2 = [], []
# for i in range(n):
#     summ = 0
#     x = int(input())
#     l1.append(x)
#     summ = x ** 2 + 2 * x + 1
#     l2.append(summ)
# print(*l1, sep='\n')
# print()
# print(*l2,sep='\n')

# nu = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# print(*nu, sep='\n')

# При анализе данных, собранных в рамках научного эксперимента, бывает полезно удалить самое большое и самое маленькое значение.
# На вход программе подается натуральное число nnn, а затем nnn различных натуральных чисел.
# Напишите программу, которая удаляет наименьшее и наибольшее значение из указанных чисел,
# а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.
# Формат входных данных
# На вход программе подаются натуральное число nnn, а затем nnn различных натуральных чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# put your python code here
# n = int(input())
# k = []
# for i in range(n):
#     x = int(input())
#     k.append(x)
# k.remove(max(k))
# k.remove(min(k))
# print(*k, sep='\n')

# На вход программе подается натуральное число nnn, а затем nnn строк.
# Напишите программу, которая выводит только уникальные строки, в том же порядке, в котором они были введены.
# Формат входных данных
# На вход программе подаются натуральное число nnn, а затем nnn строк, каждая на отдельной строке.

# put your python code here
# n = int(input())
# k = []
# for i in range(n):
#     x = input()
#     if x not in k:
#         k.append(x)
# print(*k, sep='\n')

# На вход программе подается натуральное число nnn, затем nnn строк, затем еще одна строка — поисковый запрос.
# Напишите программу, которая выводит все введенные строки, в которых встречается поисковый запрос.
# Формат входных данных
# На вход программе подаются натуральное число nnn — количество строк, затем сами строки в указанном количестве, затем один поисковый запрос.
# Формат выходных данных
# Программа должна вывести все введенные строки, в которых встречается поисковый запрос.
# Примечание. Поиск не должен быть чувствителен к регистру символов.

# n = 3
# # put your python code here
# n = int(input())
# l = []
# for i in range(n):
#     st = input()
#     l.append(st)
# z = input()
# for i in range(len(l)):
#     # for j in range(len(l[i]))
#     if z.lower() in l[i].lower():
#         print(l[i])


# На вход программе подается натуральное число nnn,
# затем nnn строк, затем число kkk — количество поисковых запросов, затем kkk строк — поисковые запросы.
# Напишите программу, которая выводит все введенные строки, в которых встречаются все поисковые запросы.
# Формат входных данных
# На вход программе подаются натуральное число nnn — количество строк, затем сами строки в указанном количестве,
# затем число kkk, затем сами поисковые запросы.

# n = int(input())
# l = []
# k = []
# for i in range(n):
#     st = input()
#     l.append(st)
# w = int(input())
# for i in range(w):
#     st_2 = input()
#     k.append(st_2)
# counter = 0
# for i in l:
#     counter = 0
#     for j in k:
#         if j.lower() in i.lower():
#             counter +=1
#     if counter == len(k):
#         print(i)

# На вход программе подается натуральное число nnn, а затем nnn целых чисел.
# Напишите программу, которая сначала выводит все отрицательные числа, затем нули,
# а затем все положительные числа, каждое на отдельной строке. Числа должны быть выведены в том же порядке,
# в котором они были введены.
# Формат входных данных
# На вход программе подаются натуральное число nnn, а затем nnn целых чисел, каждое на отдельной строк

# n = int(input())
# minus = []
# zero = []
# plus = []
# for i in range(n):
#     x = int(input())
#     if x < 0:
#         minus.append(x)
#     if x == 0:
#         zero.append(x)
#     if x > 0:
#         plus.append(x)
# print(*minus, sep='\n')
# print(*zero, sep='\n')
# print(*plus, sep='\n')

# Дана строка, состоящая из слов, разделенных пробелами. Напишите программу, которая подсчитывает количество слов в этой строке.
# Формат входных данных
# На вход программе подается строка.

# put your python code here
# st = input()
# k = st.split()
# print(len(k))

# k = ["Обезьяна", "Петух", "Собака", "Свинья", "Крыса", "Бык", "Тигр", "Заяц", "Дракон", "Змея", "Лошадь", "Овца"]
# # n = int(input())
# n = 2001
# for i in range(len(k)):
#     if n % 12 == i:
#         print(i)
#         print(k[i])


# n = 156000
# # n = int(input())
# k = str(n)
# z = 0
#
# if len(k) > 5:
#     z = k[-1:-6:-1]
#     print(k[:-5], z, sep = '')
#
# else:
#     print(int(k[::-1]))

# another answer:
# s = input()
# print(int(s[:-5] + s[-5:][::-1]))

# n = 'У лукоморья дуб зеленый златая цепь на дубе том'
# k = n.split()
# print(*k, sep='\n')

# Инициалы
# На вход программе подается строка текста,
# содержащая имя, отчество и фамилию человека. Напишите программу, которая выводит инициалы человека.
# n = input()
# k = n.split()
# for i in range(len(k)):
#     print(*k[i][0:1], end='.')

# C:\Windows\System32\calc.exe

# t = 'C:\Windows\System32\calc.exe'
# k = t.split('\\')
# print(*k, sep='\n')

# 1 2 3 4 5
# n = '1 2 3 4 5'
# n = input()
# k = n.split()
# for i in range(len(k)):
#     print('+'* int(k[i]))
#
# Another way:
# for i in input().split():
#     print('+' * int(i))

# 192.168.0.3
# Sample Output 1:
# ДА
# Sample Input 2:
# 192.168.0.300
# Sample Output 2:
# НЕТ

# n = input().split('.')
#
# c = 0
# for i in n:
#     if int(i) in range(0,256):
#         c += 1
# if c == 4:
#     print('ДА')
# else:
#     print('НЕТ')


# Sample Input 1:
# 1234567
# *
# Sample Output 1:
# 1*2*3*4*5*6*7

# n = input()
# k = input().join(n)
# print(k)

# n = '8 7 6'
# l = n.split()
# k = n.split()
# counter = 0
# print(l)
# for i in range(len(l)):
#     for j in range(len(k)):
#         if k[j] == l[i] and i != j:
#             counter += 1
# print(int(counter/2))

# another way:
# a = input().split()
# s = 0
# for i in range(len(a) - 1):
#     s += a[i + 1:].count(a[i])
# print(s)

# вывести число с запятыми после 1000
# n = '1000000'
# k = n[::-1]
# l = []
# for i in range(len(k)):
#     if i % 3 == 0 and i > 1:
#         l.append(',')
#         l.append(k[i])
#     else:
#         l.append(k[i])
# print(*l[::-1],sep='')

# другое решение:
# num = input()
# for idx in range(len(num) - 3, 0, -3):
#     num = num[:idx] + ',' + num[idx:]
# print(num)


# n человек, пронумерованных числами от 111 до nnn, стоят в кругу. Они начинают считаться,
# каждый kkk-й по счету человек выбывает из круга, после чего счет продолжается со следующего за ним человека.
# Напишите программу, определяющую номер человека, который останется в кругу последним.
# Формат входных данных
# На вход программе подаются два числа nnn и kkk, записанные на отдельных строках.
# Формат выходных данных
# Программа должна вывести одно число – номер человека, который останется в кругу последним.
# Примечание 1. Подробнее ознакомиться с классической задачей Иосифа Флавия можно тут.
# n = 7
# k = 5
# l = []
# for i in range(n):
#     l.append(i+1)
#
# while len(l) != 1:
#     for j in range(0, k - 1):
#         l.append(l[j])
#     del l[0:k]
# print(*l)

# another way:
# n = 7
# k = 5
# d = 0
# for i in range(1, n +1):
#     d = (d + k) % i
# print(d + 1)



# В первой строке записано количество точек. Каждая следующая строка состоит из двух целых чисел — координат точки
# (сначала абсцисса – xxx, затем ордината – yyy), разделенных символом пробела.
# Формат выходных данных
# Программа должна вывести количество точек, лежащих в каждой координатной четверти, как в примерах.
# Примечание. Учтите, что точки, лежащие на осях координат, не принято относить к какой либо координатной четверти.
# 4
# 0 -1
# 1 2
# 0 9
# -9 -5
# Первая четверть: 1
# Вторая четверть: 0
# Третья четверть: 1
# Четвертая четверть: 0
# n = int(input())
# c1, c2, c3, c4 = 0, 0, 0, 0
# for i in range(n):
#
#     k = (input()).split()
#     x, y = int(k[0]), int(k[1])
#     if x > 0 and y > 0:
#         c1 += 1
#     if x < 0 and y > 0:
#         c2 += 1
#     if x < 0 and y < 0:
#         c3 += 1
#     if x > 0 and y < 0:
#         c4 += 1
# print('Первая четверть:', c1)
# print('Вторая четверть:', c2)
# print('Третья четверть:', c3)
# print('Четвертая четверть:', c4)

# another way
# n = int(input())
# count = [0, 0, 0, 0]
# names = ['Первая четверть:', 'Вторая четверть:',
#          'Третья четверть:', 'Четвертая четверть:']
#
# for _ in range(n):
#     x, y = [int(num) for num in input().split()]
#     if x > 0 and y > 0:
#         count[0] += 1
#     elif x < 0 and y > 0:
#         count[1] += 1
#     elif x < 0 and y < 0:
#         count[2] += 1
#     elif x > 0 and y < 0:
#         count[3] += 1
#
# for i in range(4):
#     print(names[i], count[i])

# Дополните приведенный код, чтобы он:
#
#     Заменил второй элемент списка на 17;
#     Добавил числа 4, 5 и 6 в конец списка;
#     Удалил первый элемент списка;
#     Удвоил список;
#     Вставил число 25 по индексу 3;
#     Вывел список, с помощью функции print()
# numbers = [8, 9, 10, 11]
# numbers[1] = 17
# numbers.append(4)
# numbers.append(5)
# numbers.append(6)
# del numbers[0]
# numbers = numbers * 2
# numbers.insert(3, 25)
# print(numbers)



# n = ('3 4 5 2 1').split()
#
# maxi = n.index(max(n,key=int))
# mini = n.index(min(n, key=int))
# n[maxi], n[mini] = n[mini], n[maxi]
# print(*n)

# На вход программе подается строка, содержащая английский текст.
# Напишите программу, которая подсчитывает общее количество артиклей: 'a', 'an', 'the'.
# Формат входных данных
# На вход программе подается строка, содержащая английский текст. Слова текста разделены символом пробела.
# Формат выходных данных
# Программа должна вывести общее количество артиклей 'a', 'an', 'the' вместе с поясняющим текстом.
# Примечание. Артикли могут начинаться с заглавной буквы 'A', 'An', 'The'.

# n = 'William Shakespeare was born in the town of Stratford, England, in the year 1564. When he was a young man, Shakespeare moved to the city of London, where he began writing plays. His plays were soon very successful, and were enjoyed both by the common people of London and also by the rich and famous. In addition to his plays, Shakespeare wrote many short poems and a few longer poems. Like his plays, these poems are still famous today.'
# n =input().lower()
# v = n.split()
# b = v.count('a')
# c = v.count('an')
# d = v.count('the')
# print('Общее количество артиклей:', b+c+d)
# another way:
# s = input().split()
# print(f"Общее количество артиклей: {s.count('a') + s.count('an') + s.count('the')}")

# На первой строке вводится символ решётки и сразу же натуральное число nnn
# — количество строк в программе, не считая первой. Далее следует nnn строк кода.
# Формат выходных данных
# Нужно вывести те же строки, но удалить комментарии и символы пустого пространства в конце строк.
# Пустую строку вместо первой строки ввода выводить не надо.
# n = int(input()[1:])
# for i in range(n):
#     st = input()
#     if st.find('#') > 0:
#         st = st[:st.index('#')]
#         print(st.rstrip())
#     else:
#         print(st.rstrip())



# Sample Input:
# 4 5 1 2 3 8
# Sample Output:
# 1 2 3 4 5 8
# 8 5 4 3 2 1
# n = ('4 5 1 2 3 8').split()
# n.sort(key=int)
# print(*n)
# n.sort(key=int, reverse=True)
# print(*n)

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
#
# new_keywords = [i[1:] for i in keywords]
#
# print(new_keywords)

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
#
# new_keywords = [len(i) for i in keywords]
#
# print(new_keywords)

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
#
# new_keywords = [i for i in keywords if len(i) > 4]
#
# print(new_keywords)

# pal = [i for i in range(100,1000) if i == int(str(i)[::-1])]
# print(pal)

# Sample Input:
# 5
# Sample Output:
# 1
# 4
# 9
# 16
# 25

# n = int(input())
# l = [i * i for i in range(1, n + 1)]
# print(*l, sep='\n')

# На вход программе подается строка текста, содержащая целые числа.
# Напишите программу, использующую списочное выражение, которая выведет кубы указанных чисел также на одной строке.

# Sample Input 1:
# 2 4 3
# Sample Output 1:
# 8 64 27
# n = ('2 4 3').split()
# k = [int(i) ** 3 for i in n]
# print(*k, sep=' ')

# print(*[i for i in input().split()], sep='\n')
# Умей ценить того кто без тебя не может


# n = '123Python awesome!56'
# print(*[i for i in input() if i.isnumeric()], sep='')

# На вход программе подается строка текста, содержащая целые числа.
# Напишите программу, использующую списочное выражение, которая выведет квадраты четных чисел,
# которые не оканчиваются на цифру 4
# print(*[int(i) ** 2 for i in input().split() if int(i) % 2 == 0 and str(int(i) ** 2)[-1] != '4'], sep=' ')


# a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
# a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53]
# a
# n = len(a)
# b = []
# c = 10 ** 6
# # реализация алгоритма сортировки выбором
# for i in range(n):
#     c = 10 ** 6
#     for i in range(n):
#         if a[i] < c:
#             c = a[i]
#         if i == n-1:
#             a.append(c)
#             a.remove(c)
#     n -= 1
# print(a)


# Sample Input 1:
# 2
# Sample Output 1:
# [2]
# print([i for i in range(2,int(input())+1,2)])

# a = input().split()
# b = input().split()
# print(*[int(a[i]) + int(b[i]) for i in range(len(a))], sep=' ')

# На вход программе подается строка текста, содержащая натуральные числа. Напишите программу,
# которая вставляет между каждым числом знак +, а затем вычисляет сумму полученных чисел.
# Формат входных данных
# На вход программе подается строка текста, содержащая натуральные числа, разделенные символом пробела.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
# Примечание. Строковый метод join() работает только со списком строк.
# Тестовые данные 🟢
# Sample Input 1:
# 2 5 11 33 55
# Sample Output 1:
# 2+5+11+33+55=106

# n = input().split()
# k = '+'.join(n)
# s = 0
# for i in range(len(n)):
#     s += int(n[i])
# print(f'{k}={s}')

# На вход программе подается строка текста. Напишите программу, которая определяет является ли
# введенная строка корректным телефонным номером. Строка текста является корректным телефонным номером если она имеет формат:
#     abc-def-hijk или
#     7-abc-def-hijk
# где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9.
# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести «YES» если строка является корректным телефонным номером и «NO» в противном случае.
# Примечание. Телефонный номер должен содержать только цифры и символ -,
# а количество цифр в каждой группе должны быть правильным.
# Тестовые данные 🟢
# Sample Input 1:
# 7-301-447-5820
# Sample Output 1:
# YES
# n = '7-301-447-5820'

# n = '8-301-447-5820' 	#NO
# n = '77-301-447-5820' 	#NO
# n = '311-4A7-5820' 	#NO
# n = '311-487-582B' 	#NO
# n = '3A1-4M7-582B' 	#NO
# n = '7-3A1-447-5820' 	#NO
# n = '7-301-4BB-5820' 	#NO
# n = '7-301-447-5AS0' 	#NO
# n = '7-abc-abc-abc' 	#NO
# n = 'abc-abc-abc' 	#NO
# n = '7-123-456-c-7890' 	#NO

# k = n.replace('-', '')
# if k.isdigit():
#     if len(n) == 14:
#         if n[1] == n[5] == n[9] == '-' and k[0] == '7':
#             print('YES')
#         else:
#             print('NO')
#     elif len(n) == 12:
#         if n[3]==n[7] == '-':
#             print('YES')
#         else:
#             print('NO')
#     else:
#         print('NO')
# else:
#     print('NO')
#
# # another way:
# n = input().split("-")
# c = [len(i) for i in n]
# if c == [3, 3, 4] and ''.join(n).isdigit():
#     print("YES")
# elif c == [1, 3, 3, 4] and ''.join(n).isdigit() and n[0] == '7':
#     print("YES")
# else:
#     print("NO")

# На вход программе подается строка текста. Напишите программу, использующую списочное выражение,
# которая находит длину самого длинного слова.
# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
# Тестовые данные 🟢
# Sample Input:
# проспал почти всю ночь
# Sample Output:
# 7

# k = [int(len(i)) for i in input().split()]
# k.sort(reverse=True)
# print(k[0])
# ANOTHER WAY
# print(max([len(a) for a in input().split()]))

# На вход программе подается строка текста. Напишите программу, использующую списочное выражение,
# которая преобразует каждое слово введенного текста в "молодежный жаргон" по следующему правилу:
#     первая буква каждого слова удаляется и ставится в конец слова;
#     затем в конец слова добавляется слог "ки".
# Формат входных данных
# На вход программе подается строка текста на русском языке.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
# Тестовые данные 🟢
# Sample Input:
# проспал почти всю ночь
# Sample Output:
# роспалпки очтипки сювки очьнки


# print(*[i[1:]+i[0]+'ки' for i in input().split()], sep=' ')

# Sample Input 1:
# 1 2 3 4 5
# Sample Output 1:
# 4
# вычислить количество чисел до максимального
# k = '1 2 3 4 5'
# print(len(k[0:max([i for i in k]).find(k)].split()))

# На вход программе подается строка текста из натуральных чисел.
# Из неё формируется список чисел. Напишите программу подсчета количества чисел,
# которые больше предшествующего им в этом списке числа, то есть, стоят вслед за меньшим числом.
# Формат входных данных
# На вход программе подается строка текста из разделенных пробелами натуральных чисел.
# Формат выходных данных
# Программа должна вывести одно число – количество элементов списка, больших предыдущего.

# Sample Input 2:
# 1 1 3 2 2 1 1 1 1
# Sample Output 2:
# 1
# n = '1 3 2 3 1'.split()
# k = min([i for i in n])
#
# mini = k
# c = 0
# for i in n:
#     if i > mini and n.index(i) > n.index(mini):
#         mini = i
#         c += 1
# print(c)


# объявление функции
# def draw_box():
#     for i in range(14):
#         if i in [0, 13]:
#             print('*' * 10)
#         else:
#             print('*' , ' ' * 8,'*', sep='')
#
# # основная программа
# draw_box()  # вызов функции
#
# ANOTHER WAY
#
#
# # объявление функции
# def draw_box():
#     print('*'*10 + '\n' + ('*' + ' '*8 + '*\n')*12 + '*'*10)
# # основная программа
# draw_box()  # вызов функции

# объявление функции
# def draw_triangle():
    # for i in range(10):
    #     print('*'*i)

# основная программа
# draw_triangle()  # вызов функции

# Напишите функцию draw_triangle(fill, base), которая принимает два параметра:
#     fill – символ заполнитель;
#     base – величина основания равнобедренного треугольника;
# а затем выводит его.
# Примечание. Гарантируется, что основание треугольника – нечетное число.
# Тестовые данные 🟢
# Sample Input 1:
# *
# 9
# Sample Output 1:
# *
# **
# ***
# ****
# *****
# ****
# ***
# **
# *

# def triangle(fill, base):
#     for i in range(1, base + 1):
#         if i <= int(base / 2)+ 1:
#             print(i * fill)
#         if i > base / 2 :
#             print((base - i) * fill)
# triangle('*',5)

# Напишите функцию print_fio(name, surname, patronymic), которая принимает три параметра:
#     name – имя человека;
#     surname – фамилия человека;
#     patronymic – отчество человека;
# а затем выводит на печать ФИО человека.
# Примечание. Предусмотрите тот факт, что все три буквы в ФИО должны иметь верхний регистр.

# def print_fio(name, surname, patronymic):
#     print(surname[0].upper(),name[0].upper(),patronymic[0].upper(), sep='')
#
# print_fio('Александр','Пушкин','Сергеевич')

# Напишите функцию print_digit_sum(), которая принимает одно целое число num и выводит на печать сумму его цифр.
# Тестовые данные 🟢
# Sample Input 1:
# 12345
# Sample Output 1:
# 15

# def print_digit_sum(num):
#     k = sum([int(i) for i in str(num)])
#     print(k)
#
# print_digit_sum(12345)



# # объявление функции
# def get_days(month):
#     m = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
#     return m[month - 1]
# # считываем данные
# num = int(input())
#
# # вызываем функцию
# print(get_days(num))


# # объявление функции
# def get_factors(num):
#     return len([i for i in range(1, num + 1) if num % i == 0])
#
# # считываем данные
# # n = int(input())
#
# # вызываем функцию
# print(get_factors(5))


# Напомним, что строковый метод find('a') возвращает местоположение первого вхождения символа a в строке.
# Проблема заключается в том, что данный метод не находит местоположение всех символов а.
# Напишите функцию с именем find_all(target, symbol), которая принимает два аргумента:
# строку target и символ symbol и возвращает список, содержащий все местоположения этого символа в строке.
# Примечание 1. Если указанный символ не встречается в строке, то следует вернуть пустой список.
# Примечание 2. Следующий программный код:
# print(find_all('abcdabcaaa', 'a'))
# print(find_all('abcadbcaaa', 'e'))
# print(find_all('abcadbcaaa', 'd'))
# должен выводить:
# [0, 4, 7, 8, 9]
# []
# [4]


# объявление функции
# def find_all(target, symbol):
#     return [i for i in range(len(target)) if target[i] == symbol]
#
# print(find_all('abcdabcaaa', 'a'))
# print(find_all('abcadbcaaa', 'e'))
# print(find_all('abcadbcaaa', 'd'))

# Напишите функцию merge(list1, list2), которая принимает в качестве аргументов два отсортированных по возрастанию списка,
# состоящих из целых чисел, и объединяет их в один отсортированный список.
# Примечание 1. Списки list1 и list2 могут иметь разную длину.
# Примечание 2. Можно использовать списочный метод sort(), а можно обойтись и без него 😎.
# Примечание 3. Следующий программный код:
# print(merge([1, 2, 3], [5, 6, 7, 8]))
# print(merge([1, 7, 10, 16], [5, 6, 13, 20]))
# должен выводить:
# [1, 2, 3, 5, 6, 7, 8]
# [1, 5, 6, 7, 10, 13, 16, 20]

# объявление функции
# def merge(list1, list2):
#     return sorted(list1 + list2)
#
#
# # считываем данные
# numbers1 = [int(c) for c in [1, 2, 3]]
# numbers2 = [int(c) for c in [5, 6, 7, 8]]
#
# # вызываем функцию
# print(merge(numbers1, numbers2))


# put your python code here
# На вход программе подается число nnn, а затем nnn строк,
# содержащих целые числа в порядке возрастания. Из данных строк формируются списки чисел.
# Напишите программу, которая объединяет указанные списки в один отсортированный список с помощью функции quick_merge(),
# а затем выводит его.
# Формат входных данных
# def quick_merge(list1, list2):
#     result = []
#     p1 = 0  # указатель на первый элемент списка list1
#     p2 = 0  # указатель на первый элемент списка list2
#     while p1 < len(list1) and p2 < len(list2):  # пока не закончился хотя бы один список
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1
#
#     if p1 < len(list1):  # прицепление остатка
#         result += list1[p1:]
#     if p2 < len(list2):
#         result += list2[p2:]
#     return result
#
#
# final_list = []
# for i in range(int(input())):
#     l = [int(i) for i in input().split()]
#     final_list = quick_merge(final_list, l)
# print(*final_list)

# объявление функции
# def is_valid_triangle(side1, side2, side3):
#     if side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2:
#         return True
#     else:
#         return False
#
# # считываем данные
# a, b, c = int(input()), int(input()), int(input())
#
# # вызываем функцию
# print(is_valid_triangle(a, b, c))

#   Номер теста     	    Входные данные     	    Выходные данные
# 1 	1 	False
# 2 	10 	False
# 3 	2 	True
# 4 	17 	True
# 5 	101 	True
# 6 	100 	False
# 7 	360000 	False
# 8 	121 	False
# natural int:
# объявление функции
# def is_prime(num):
#     counter = 0
#     if num == 1:
#         return False
#     for i in range(2, num // 2 + 1):
#         if num % i == 0:
#             counter += 1
#     if counter == 0:
#         return True
#     else:
#         return False
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(is_prime(n))

# ANOTHER WAY:
# # объявление функции
# def is_prime(num):
#     return len([i for i in range(1, num+1) if num % i == 0]) == 2
# # считываем данные
# n = int(input())
# # вызываем функцию
# print(is_prime(n))




# найти следующее простое число после заданного
# def is_prime(num):
#     counter = 0
#     if num == 1:
#         return False
#     for i in range(2, num // 2 + 1):
#         if num % i == 0:
#             counter += 1
#     if counter == 0:
#         return True
#     else:
#         return False
#
# def get_next_prime(num):
#     num += 1
#     while is_prime(num) is False:
#         num += 1
#     return num
# # считываем данные
# n = int(input())
# # вызываем функцию
# print(get_next_prime(n))

# ANOTHER WAY
# def get_next_prime(num):
#     num += 1
#     for i in range(2, num):
#         if num % i == 0:
#             return get_next_prime(num)
#     return num
# # считываем данные
# n = int(input())
# # вызываем функцию
# print(get_next_prime(n))

# n = 'lkfdLJKkj'
# k = n.upper()
# print(len([i for i in n if i in .upper()]))

# Напишите функцию is_password_good(password), которая принимает в качестве аргумента строковое значение пароля
# password и возвращает значение True если пароль является надежным и False в противном случае.
# Пароль является надежным если:
#     его длина не менее 888 символов;
#     он содержит как минимум одну заглавную букву (верхний регистр);
#     он содержит как минимум одну строчную букву (нижний регистр);
#     он содержит хотя бы одну цифру.
# Примечание. Следующий программный код:
# print(is_password_good('aabbCC11OP'))
# print(is_password_good('abC1pu'))
# должен выводить:
# True
# False

# объявление функции
# def is_password_good(password):
#     p = password
#     counter = 0
#     if not p.isnumeric():
#         counter += 1
#     if p.lower() != p:
#         counter += 1
#     if p.upper() != p:
#         counter += 1
#     if not p.isalpha():
#         counter += 1
#     if len(p) > 7:
#         counter += 1
#     if counter == 5:
#         return True
#     else:
#         return False
# # считываем данные
# # txt = input()
# txt = '()+_№;%:'
#
# # вызываем функцию
# print(is_password_good(txt))


# Напишите функцию is_one_away(word1, word2), которая принимает в качестве аргументов два слова word1 и word2 и
# возвращает значение True если слова имеют одинаковую длину и отличаются ровно в 1 символе и False в противном случае.
#  Примечание. Следующий программный код:
# print(is_one_away('bike', 'hike'))
# print(is_one_away('water', 'wafer'))
# print(is_one_away('abcd', 'abpo'))
# print(is_one_away('abcd', 'abcde'))
# должен выводить:
# True
# True
# False
# False

# объявление функции
# def is_one_away(word1, word2):
    # counter = 0
    # k = [i for i in word1]
    # f = [i for i in word2]
    # if len(k) == len(f):
    #     for i in range(len(k)):
    #         if k[i] == f[i]:
    #             counter += 1
    # if counter == len(k) - 1:
    #     return True
    # else:
    #     return False

# считываем данные
# txt1 = input()
# txt2 = input()

# вызываем функцию
# print(is_one_away(txt1, txt2))
# print(is_one_away('bike', 'hike'))
# print(is_one_away('water', 'wafer'))
# print(is_one_away('abcd', 'abpo'))
# print(is_one_away('abcd', 'abcde'))


# Напишите функцию is_palindrome(text), которая принимает в качестве аргумента строку text и возвращает значение True
# если указанный текст является палиндромом и False в противном случае.
# Примечание 1. Палиндром – это строка, которая читается одинаково в обоих направлениях
# Примечание 2. При проверке считайте большие и маленькие буквы одинаковыми, а также игнорируйте пробелы, а также символы , . ! ? -.
# Примечание 3. Следующий программный код:
# print(is_palindrome('А роза упала на лапу Азора.'))
# print(is_palindrome('Gabler Ruby - burrel bag!'))
# print(is_palindrome('BEEGEEK'))
# должен выводить:
# True
# True
# False

# объявление функции
# def is_palindrome(text):
#     t = text.lower()
#     for i in t:
#         if i in [',','.',' ','!','?','-','.']:
#             t = t.replace(i,'')
#     if t[:] == t[::-1]:
#         return True
#     else:
#         return False
#
# # считываем данные
# # txt = input()
# # вызываем функцию
# # print(is_palindrome(txt))
# # print(is_palindrome('А роза упала на лапу Азора.'))
# # print(is_palindrome('Gabler Ruby - burrel bag!'))
# print(is_palindrome('BEEGEEK'))


# BEEGEEK наконец открыл свой банк в котором используются специальные банкоматы с необычным паролем.
# Действительный пароль BEEGEEK банка имеет вид a:b:c, где a, b и c – натуральные числа.
# Поскольку основатель BEEGEEK фанатеет от математики, то он решил:
#     число a – должно быть палиндромом;
#     число b – должно быть простым;
#     число c – должно быть четным.
# Напишите функцию is_valid_password(password), которая принимает в качестве аргумента строковое значение пароля password
# и возвращает значение True если пароль является действительным паролем BEEGEEK банка и False в противном случае.
#  Примечание. Следующий программный код:
# print(is_valid_password('1221:101:22'))
# print(is_valid_password('565:30:50'))
# print(is_valid_password('112:7:9'))
# print(is_valid_password('1221:101:22:22'))
# должен выводить:
# True
# False
# False
# False

# объявление функции
# def is_prime(num):
#     counter = 0
#     if num == 1:
#         return False
#     for i in range(2, num // 2 + 1):
#         if num % i == 0:
#             counter += 1
#     if counter == 0:
#         return True
#     else:
#         return False
#
# def is_valid_password(password):
#     k = password.split(sep=':')
#     if len(k) != 3:
#         return False
#     if k[0] != k[0][::-1]:
#         return False
#     if is_prime(int(k[1])) is False:
#         return False
#     if int(k[2]) % 2 != 0:
#         return False
#     else:
#         return True

# # считываем данные
# psw = input()
# # вызываем функцию
# print(is_valid_password(psw))

# print(is_valid_password('1221:101:22'))
# print(is_valid_password('565:30:50'))
# print(is_valid_password('112:7:9'))
# print(is_valid_password('1221:101:22:22'))

# print(('1221:101:22').split(':'))





# Напишите функцию is_correct_bracket(text), которая принимает в качестве аргумента непустую строку text,
# состоящую из символов ( и ) и возвращает значение True если поступившая на вход строка является правильной
# скобочной последовательностью и False в противном случае.
# Примечание 1. Правильной скобочной последовательностью называется строка, состоящая только из символов ( и ),
# где каждой открывающей скобке найдется парная закрывающая скобка.
# Примечание 2. Следующий программный код:
# print(is_correct_bracket('()(()())'))
# print(is_correct_bracket(')(())('))
# должен выводить:
# True
# False

# объявление функции
# def is_correct_bracket(text):
#     while '()' in text:
#         text = text.replace('()', '')
#     if len(text) == 0:
#         return True
#     else:
#         return False

# считываем данные
# txt = input()

# вызываем функцию
# print(is_correct_bracket(txt))
# print(is_correct_bracket('()(()())'))
# print(is_correct_bracket(')(())('))

# Напишите функцию convert_to_python_case(text),
# которая принимает в качестве аргумента строку в «верблюжьем регистре» и преобразует его в «змеиный регистр».
# Примечание 1. Почитать подробнее о стилях именования можно тут.
# Примечание 2. Следующий программный код:
# print(convert_to_python_case('ThisIsCamelCased'))
# print(convert_to_python_case('IsPrimeNumber'))
# должен выводить:
# this_is_camel_cased
# is_prime_number

# объявление функции
# def convert_to_python_case(text):
#
#     t = text[0].lower()
#     for i in range(1, len(text)):
#         if text[i].isupper():
#             t = t + '_' + text[i].lower()
#         else:
#             t = t + text[i]
#     return t
# # # считываем данные
# # txt = input()
# # # вызываем функцию
# # print(convert_to_python_case(txt))
# print(convert_to_python_case('MyMethodThatDoSomething'))
# # print(convert_to_python_case('IsPrimeNumber'))



# Напишите функцию get_middle_point(x1, y1, x2, y2), которая принимает в качестве аргументов координаты концов отрезка
# (x1; y1)(x_1; \, y_1)(x1​;y1​) и (x2; y2)(x_2; \, y_2)(x2​;y2​) и
# возвращает координаты точки являющейся серединой данного отрезка.
# Примечание 1. Координаты середины отрезка вычисляются по формуле:
# Примечание 2. Следующий программный код:
# print(get_middle_point(0, 0, 10, 0))
# print(get_middle_point(1, 5, 8, 3))
# должен выводить:
# 5.0 0.0
# 4.5 4.0
# объявление функции
# def get_middle_point(x1, y1, x2, y2):
#     return (x1 + x2)/2, (y1 + y2)/2
#
# # # считываем данные
# # x_1, y_1 = int(input()), int(input())
# # x_2, y_2 = int(input()), int(input())
# #
# # # вызываем функцию
# # x, y = get_middle_point(x_1, y_1, x_2, y_2)
# # print(x, y)
# print(get_middle_point(0, 0, 10, 0))
# print(get_middle_point(1, 5, 8, 3))

# Напишите функцию get_circle(radius), которая принимает в качестве аргумента радиус окружности и
# возвращает два значения: длину окружности и площадь круга, ограниченного данной окружностью.
# Примечание 1. Длина окружности и площадь круга радиуса rrr вычисляются по формулам:
# С=2πr,   S=πr2.С = 2 \pi r, \, \, \, S = \pi r^2.
# С=2πr,S=πr2.Примечание 2. Для числа π\piπ используйте глобальную константу из модуля math.
# Примечание 3. Следующий программный код:
# print(get_circle(1))
# print(get_circle(1.5))
# должен выводить:
# 6.283185307179586 3.141592653589793
# 9.42477796076938 7.0685834705770345

# # объявление функции
# import math
#
#
# def get_circle(radius):
#     return 2 * math.pi * radius, math.pi * radius ** 2
#
# # считываем данные
# # r = float(input())
# # # вызываем функцию
# # length, square = get_circle(r)
# # print(length, square)
# print(get_circle(1))
# print(get_circle(1.5))


# Напишите функцию solve(a, b, c), которая принимает в качестве аргументов три целых числа a, b, c
# – коэффициенты квадратного уравнения ax2+bx+c=0ax^2+bx+c = 0ax2+bx+c=0 и возвращает его корни в порядке возрастания.
# Примечание 1. С подобной задачей мы уже сталкивались.
# Примечание 2. Гарантируется, что квадратное уравнение имеет корни.
# Примечание 3. Следующий программный код:
# print(solve(1, -4, -5))
# print(solve(-2, 7, -5))
# print(solve(1, 2, 1))
# должен выводить:
# -1.0 5.0
# 1.0 2.5
# -1.0 -1.0
# from math import *
# # объявление функции
# def solve(a, b, c):
#     d = b ** 2 - 4 * a * c
#     if d > 0:
#         x1 = (-b + sqrt(d)) / (2 * a)
#         x2 = (-b - sqrt(d)) / (2 * a)
#         if x2 > x1:
#             return x1, x2
#         else:
#             return x2, x1
#     elif d == 0:
#         x1 = -b / (2 * a)
#         return x1 , x1
#
# # считываем данные
# # a, b, c = int(input()), int(input()), int(input())
# # # вызываем функцию
# # x1, x2 = solve(a, b, c)
# # print(x1, x2)
# print(solve(1, -4, -5))
# print(solve(-2, 7, -5))
# print(solve(1, 2, 1))

# Напишите функцию draw_triangle(), которая выводит звездный равнобедренный треугольник с основанием и
# высотой равными 15 и 8 соответственно:
#        *
#       ***
#      *****
#     *******
#    *********
#   ***********
#  *************
# ***************
# Примечание 1 . Для вывода треугольника используйте цикл for.
# Примечание 2 . Справа от звездочек пробелов нет.

# объявление функции
# def draw_triangle(height):
#     for i in range(height):
#         print(' ' * (height - 1 - i) + '*' * (1 + i*2))
#
# # основная программа
# draw_triangle(int(input('Любимая, введи число. Тебе понравится    :   ')))


# Интернет магазин осуществляет экспресс доставку для своих товаров по цене 100010001000
# рублей за первый товар и 120120120 рублей за каждый последующий товар. Напишите функцию get_shipping_cost(quantity),
# которая принимает в качестве аргумента натуральное число quantity – количество товаров в заказе и возвращает стоимость доставки.
# Примечание. Следующий программный код:
# print(get_shipping_cost(1))
# print(get_shipping_cost(3))
# должен выводить:
# 1000
# 1240

# объявление функции
# def get_shipping_cost(quantity):
#     t = 1000
#     t2 = 120
#     if quantity == 1:
#         return t
#     else:
#         return t + t2 * (quantity - 1)
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(get_shipping_cost(n))

# Напишите функцию compute_binom(n, k), которая принимает в качестве аргументов два натуральных числа n и k
# и возвращает значение биномиального коэффициента, равного n!k!(n−k)!\dfrac{n!}{k! (n-k)!}k!(n−k)!n!​.
# Примечание 1. Факториалом натурального числа nnn, называется произведение всех натуральных чисел от 1 1 1 до nnn, то есть
# n!=1⋅2⋅3⋅…⋅nn!=1\cdot2\cdot3\cdot…\cdot n
# n!=1⋅2⋅3⋅…⋅n
# Примечание 2. Реализуйте вспомогательную функцию factorial(n), вычисляющую факториал числа или воспользуйтесь
# уже готовой функцией из модуля math.
# объявление функции
# from math import *
# def compute_binom(n, k):
#     return int(factorial(n)/(factorial(k)*factorial((n - k))))
#
# # считываем данные
# n = int(input())
# k = int(input())
# # вызываем функцию
# print(compute_binom(n, k))


# Напишите функцию number_to_words(num), которая принимает в качестве аргумента натуральное число num
# и возвращает его словесное описание на русском языке.
# Примечание 1. Считайте, что число 1≤num ≤991 \le num \le 991≤num ≤99.
# Примечание 2. Следующий программный код:
# print(number_to_words(7))
# print(number_to_words(85))
# должен выводить:
# семь
# восемьдесят пять

# se = ['','один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять', 'десять', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать', 'шестнадцать', 'семнадцать', 'восемнадцать', 'девятнадцать']
# sd = ['', '', 'двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто']
#
# # объявление функции
# def number_to_words(num):
#     if 1 <= num <= 19:
#         return se[num]
#     if num > 19:
#         return sd[num // 10] + ' ' + se[num % 10]

# считываем данные
# n = int(input())

# вызываем функцию
# print(number_to_words(n))


# Напишите функцию get_month(language, number), которая принимает на вход два аргумента language –
# язык ru или en и number – номер месяца (от 1 до 12) и возвращает название месяца на русском или английском языке.
# Примечание. Следующий программный код:
# print(get_month('ru', 1))
# print(get_month('ru', 12))
# print(get_month('en', 1))
# print(get_month('en', 10))
# должен выводить:
# январь
# декабрь
# january
# october

# lng_ru = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
#
# lng_en = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']
#
# # объявление функции
# def get_month(language, number):
#     if language == 'ru':
#         return lng_ru[number-1]
#     if language == 'en':
#         return lng_en[number-1]
#
# # считываем данные
# lan = input()
# num = int(input())

# вызываем функцию
# print(get_month(lan, num))

# Магическая дата – это дата, когда день, умноженный на месяц, равен числу образованному последними двумя цифрами года.
# Напишите функцию, is_magic(date) которая принимает в качестве аргумента
# строковое представление корректой даты и возвращает значение True если дата является магической и False в противном случае.
# Примечание. Следующий программный код:
# print(is_magic('10.06.1960'))
# print(is_magic('11.06.1960'))
# должен выводить:
# True
# False

# объявление функции
# def is_magic(date):
#     if int(date[0:2]) * int(date[3:5]) == int(date[-2:]):
#         return True
#     else:
#         return False

# считываем данные
# date = input()
# # вызываем функцию
# print(is_magic(date))

# print(is_magic('10.06.1960'))
# print(is_magic('11.06.1960'))

# Панграмма – это фраза, содержащая в себе все буквы алфавита. Обычно панграммы используют для презентации шрифтов,
# чтобы можно было в одной фразе рассмотреть все глифы.
# Напишите функцию, is_pangram(text) которая принимает в качестве аргумента строку текста на английском языке
# и возвращает значение True если текст является панграммой и False в противном случае.
# Примечание 1. Гарантируется, что введенная строка содержит только буквы английского алфавита.
# Примечание 2. Следующий программный код:
# print(is_pangram('Jackdaws love my big sphinx of quartz'))
# print(is_pangram('The jay pig fox zebra and my wolves quack'))
# print(is_pangram('Hello world'))
# должен выводить:
# True
# True
# False

# alf = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
# # объявление функции
# def is_pangram(text):
#     counter = 0
#
#     for i in alf:
#
#         if i == text[text.lower().find(i)].lower():
#             counter += 1
#     if counter == len(alf):
#         return True
#     else:
#         return False
#
# another way
# # объявление функции
# def is_pangram(text):
#     for i in range(97,123):
#         if not chr(i) in text.lower():
#             return False
#     return True
#
# # # считываем данные
# # text = input()
# #
# # # вызываем функцию
# # print(is_pangram(text))
# print(is_pangram('Jackdaws love my big sphinx of quartz'))
# print(is_pangram('The jay pig fox zebra and my wolves quack'))
# print(is_pangram('Hello world'))


# Чтобы гарантированно угадать задуманное число от 111 до 100100100 потребуется не более 777 попыток.
# Оптимальный алгоритм угадывания: положим left = 1 и right = 100.
#     Называем число, равное middle = (left + right) // 2;
#     Если число middle равно задуманному числу, то мы угадали!;
#     Если число middle меньше задуманного числа, то положим left = middle + 1 и продолжим алгоритм;
#     Если число middle больше задуманного числа, то положим right = middle - 1 и продолжим алгоритм.
# Поскольку на каждой итерации мы отбрасываем половину чисел, то гарантировано угадаем задуманное число за величину,
# равную log⁡2n\log_2 nlog2​n (двоичный логарифм) округленную до целого в большую сторону. При n=100n=100n=100
# получаем 777 попыток.
# import math
#
# print(math.ceil(math.log2(1000)))

#
#     Подключите модуль random;
#     Сгенерируйте случайное число от 111 до 100100100;
#     Выведите текст приветствия пользователю: 'Добро пожаловать в числовую угадайку'.


# k = random.randint(1,100)
# print('Добро пожаловать в числовую угадайку')

# # print(is_valid(20))
# win_number = 65

# import random
# def game():
#     def is_valid(str):
#         if str in range(1, last + 1):
#             return True
#         else:
#             return False
#     c = 0
#     print('Добро пожаловать в числовую угадайку')
#     global last
#     last = int(input('Введите верхний порог числа   '))
#     k = random.randint(1, last)
#     while True:
#         num = int(input('Input number...-->'))
#         if is_valid(num):
#             if num > k:
#                 c += 1
#                 print('Ваше число больше загаданного, попробуйте еще разок')
#             elif num < k:
#                 c += 1
#                 print('Ваше число меньше загаданного, попробуйте еще разок')
#             elif num == k:
#                 print('Вы угадали, поздравляем!')
#                 print(f'Число попыток: {c}')
#                 print('Спасибо, что играли в числовую угадайку...')
#                 new = input('Желаете еще сыграть? (Y/N)  ')
#                 if new.lower() == 'y':
#                     game()
#                 else:
#                     break
#         else:
#             print(f'А может быть все-таки введем целое число от 1 до {last}?')
# game()

# import random
# answers = ["Бесспорно", "Мне кажется - да", "Пока неясно, попробуй снова", "Даже не думай",
#            "Предрешено", "Вероятнее всего", "Спроси позже", "Мой ответ - нет",
#            "Никаких сомнений", "Хорошие перспективы", "Лучше не рассказывать", "По моим данным - нет",
#            "Можешь быть уверен в этом", "Да", "Сконцентрируйся и спроси опять", "Весьма сомнительно"]
# print('Привет Мир, я магический шар, и я знаю ответ на любой твой вопрос.')
# name = input('Как тебя зовут?')
# print(f'Привет, {name}!')
# while True:
#     question = input('Задай вопрос: ')
#     print(random.choice(answers))
#     again = input('Хочешь еще спросить? (Y/N)')
#     if again.lower() == 'n':
#         print('Возвращайся если возникнут вопросы!')
#         break


# На вход программе подается строка текста из натуральных чисел. Из неё формируется список чисел.
# Напишите программу подсчета количества чисел, которые больше предшествующего им в этом списке числа,
# то есть, стоят вслед за меньшим числом.
# Формат входных данных
# На вход программе подается строка текста из разделенных пробелами натуральных чисел.
# Формат выходных данных
# Программа должна вывести одно число – количество элементов списка, больших предыдущего.
# Тестовые данные 🟢
# Sample Input 1:
# 1 2 3 4 5
# Sample Output 1:
# 4
# Sample Input 2:
# 1 1 3 2 2 1 1 1 1
# Sample Output 2:
# 1
# Sample Input 3:
# 5 4 3 2 1
# Sample Output 3:
# 0
# f = '1 2 3 4 5' 	#4
# f = '1 1 3 2 2 1 1 1 1' 	#1
# f = '5 4 3 2 1' 	#0
# f = '1 3 2 3 1' 	#2
# f = '1 1 1 1 1' 	#0
# f = '1 2 3 4 5' 	#4
# f = '6 5 8 79 8 57 69' 	#4
# f = '8 78 79 6 70 7 58 5' 	#4
#
# n = f.split()
# k = [int(i) for i in n]
# c = 0
# for i in range(1, len(k)):
#     if k[i] > k[i - 1]:
#         c += 1
# print(c)

# На вход программе подается строка текста из натуральных чисел.
# Из элементов строки формируется список чисел.
# Напишите программу, которая меняет местами соседние элементы списка (a[0] c a[1], a[2] c a[3] и т.д.).
# Если в списке нечетное количество элементов, то последний остается на своем месте.
# Формат входных данных
# На вход программе подается строка текста, содержащая натуральные числа, разделенные пробелами.
# Формат выходных данных
# Программа должна вывести измененный список, разделяя его элементы одним пробелом.

# n = '1 2 3 4 5 6 7'
# k = [int(i) for i in input().split()]
#
# if len(k) % 2 == 0:
#     for j in range(1, len(k),2):
#         k[j -1], k[j] = k[j], k[j - 1]
#
# if len(k) % 2 == 1:
#     for j in range(1, len(k) - 1,2):
#         k[j -1], k[j] = k[j], k[j - 1]
# print(*k, sep=' ')

# На вход программе подается строка текста из натуральных чисел.
# Из элементов строки формируется список чисел. Напишите программу циклического сдвига элементов списка направо,
# когда последний элемент становится первым, а остальные сдвигаются на одну позицию вперед, в сторону увеличения индексов.
# Формат входных данных
# На вход программе подается строка текста из разделенных пробелами натуральных чисел.
# Формат выходных данных
# Программа должна вывести элементы измененного списка с циклическим сдвигом, разделяя его элементы одним пробелом.
# n = '1 2 3 4 5'
# n = '1 2 3 4 5'.split()
# k = [int(i) for i in n]
# v = []
# x = []
# v.append(k[-1])
# x.extend(k[:-1])
# print(*v,sep=' ',end=' ')
# print(*x, sep=' ')
# ANOTHER WAY
# a = input().split()
# print(*[a[-1]] + a[:-1])
# ANOTHER WAY
# n=input().split()
# print(n.pop(), *n)

# n = '1 1 1 2 2 2 2 3 3 3'.split()
# k = [int(i) for i in n]
# l = set(k)
# print(len(l))


# Напишите программу для определения, является ли число произведением двух чисел из данного набора,
# выводящую результат в виде ответа «ДА» или «НЕТ».
# Формат входных данных
# В первой строке подаётся число n (0<n<1000)n\, (0 < n < 1000)n(0<n<1000) – количество чисел в наборе.
# В последующих nnn строках вводятся целые числа, составляющие набор (могут повторяться).
# Затем следует целое число, которое является или не является произведением двух каких-то чисел из набора.
# Формат выходных данных
# Программа должна вывести «ДА» или «НЕТ» в соответствии с условием задачи.
# Примечание 1. Само на себя число из набора умножиться не может, другими словами, два множителя должны иметь разные индексы в наборе.
# Примечание 2. Для решения задачи используйте вложенные циклы.

# n = int(input())
# k = []
# for i in range(n):
#     f = k.append(int(input()))
# s = int(input())
# no = 'НЕТ'
# for j in range(0, len(k)):
#     for v in range(0, len(k)):
#         if j != v:
#             if k[j] * k[v] == s:
#                 no = 'ДА'
# print(no)

# Тимур и Руслан пытаются разделить фронт работы по курсу "Python для профессионалов".
# Для этого они решили сыграть в камень, ножницы и бумагу. Помогите ребятам бросить честный жребий и определить,
# кто будет делать очередной модуль нового курса.
# Формат входных данных
# На вход программе подаются две строки текста, содержащие слова "камень", "ножницы" или "бумага".
# На первой строке записан выбор Тимура, на второй – выбор Руслана.
# Формат выходных данных
# Программа должна вывести результат жеребьёвки, то есть кто победит Тимур, Руслан или они сыграют вничью.
# Примечание. Правила игры стандартные: камень побеждает ножницы, но проигрывает бумаге, а ножницы побеждают бумагу.

# timur = input()
# ruslan = input()
# gamers = ['Тимур', 'Руслан', 'ничья']
# game1 = ["камень", "ножницы", "бумага"]
# game2 = ["ножницы", "бумага", "камень"]
# if game1.index(timur) == game1.index(ruslan):
#     winner = gamers[2]
# elif game1.index(timur) == game2.index(ruslan):
#     winner = gamers[0]
# else:
#     winner = gamers[1]
# print(winner)

# Проиграв 101010 раз Тимуру, Руслан понял, что так дело дальше не пойдет, и решил усложнить игру.
# Теперь Тимур и Руслан играют в игру Камень, ножницы, бумага, ящерица, Спок.
# Помогите ребятам вновь бросить честный жребий и определить, кто будет делать следующий модуль в новом курсе.
# Формат входных данных
# На вход программе подаются две строки текста, содержащие по одному слову из перечня
# "камень", "ножницы", "бумага", "ящерица" или "Спок". На первой строке записан выбор Тимура, на второй – выбор Руслана.
# Формат выходных данных
# Программа должна вывести результат жеребьёвки: кто победил - Тимур или Руслан, или они сыграли вничью.
# Примечание. Правила игры стандартные: ножницы режут бумагу. Бумага заворачивает камень. Камень давит ящерицу,
# а ящерица травит Спока, в то время как Спок ломает ножницы, которые, в свою очередь, отрезают голову ящерице,
# которая ест бумагу, на которой улики против Спока. Спок испаряет камень, а камень, разумеется, затупляет ножницы.

# timur = input()
# ruslan = input()
# game = ["камень", "ножницы", "бумага", "ящерица", "Спок"]
# if game.index(timur) == game.index(ruslan):
#     print('ничья')
# elif game.index(timur) == 0 and game.index(ruslan) in [1,3]:
#     print('Тимур')
# elif game.index(timur) == 1 and game.index(ruslan) in [2, 3]:
#     print('Тимур')
# elif game.index(timur) == 2 and game.index(ruslan) in [0,4]:
#     print('Тимур')
# elif game.index(timur) == 3 and game.index(ruslan) in [2,4]:
#     print('Тимур')
# elif game.index(timur) == 4 and game.index(ruslan) in [0, 1]:
#     print('Тимур')
# else:
#     print('Руслан')

# Дана строка текста, состоящая из букв русского алфавита "О" и "Р".
# Буква "О" – соответствует выпадению Орла, а буква "Р" – соответствует выпадению Решки.
# Напишите программу, которая подсчитывает наибольшее количество подряд выпавших Решек.
# Формат входных данных
# На вход программе подается строка текста, состоящая из букв русского алфавита "О" и "Р".
# Формат выходных данных
# Программа должна вывести наибольшее количество подряд выпавших Решек.
# Примечание. Если выпавших Решек нет, то необходимо вывести число 000.

# inp = input()
# if 'Р' in inp:
#     print(max([len(i) for i in inp.replace('О', ' ').split()]))
# else:
#     print('0')
# another way:
# s = input().split('О')
# print(len(max(s)))


# Для каждого холодильника существует строка с данными, состоящая из строчных букв и цифр,
# и если в ней присутствует слово "anton" (необязательно рядом стоящие буквы, главное наличие последовательности букв),
# то холодильник заражен и нужно вывести номер холодильника, нумерация начинается с единицы
# Формат входных данных
# В первой строке подаётся число nnn – количество холодильников. В последующих nnn строках вводятся строки,
# содержащие латинские строчные буквы и цифры, в каждой строке от 555 до 100100100 символов.
# Формат выходных данных
# Программа должна вывести номера зараженных холодильников через пробел. Если таких холодильников нет, ничего выводить не нужно.

# n = int(input())
# k = 0
# for i in range(n):
#     counter = 0
#     stri = input()
#     for j in 'anton':
#         if j in stri:
#             stri = stri[stri.index(j):]
#             counter += 1
#         if counter == 5:
#             print(i + 1)
# another way
# for i in range(int(input())):
#     s, virus, x  = input(), 'anton', 0
#     for sym in s:
#         if sym == virus[x]:
#             x += 1
#         if x == 5:
#             print(i + 1, end=' ')
#             break

# Необходимо написать программу, реализующую алгоритм написания этой песни.
# Алгоритм выводит в конце предложения следующую в алфавитном порядке букву,
# если она встречается в строке текста, а очередную строку отображает уже без этой буквы.
# Формат входных данных
# На вход программе подается одно слово, записанное строчными русскими буквами без буквы "ё".
# Формат выходных данных
# Программа должна вывести в соответствии с указанным алгоритмом строки,
# количество которых равно количеству разных букв в строке, которая получается путем конкатенации
# введенного слова и строки "запретил букву".
# Примечание 1. Текст исходной песни в первом тесте.
# Примечание 2. Поем и решаем, друзья, поем и решаем 😂.

# Started pack:

# b = ['а', 'б', 'в', 'г', 'д', 'е', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я']
#
# word = input() + ' запретил букву'
# while len(word) > 1:
#     for i in b:
#         if i in word:
#             word = word.strip()
#             print(word, i)
#             word = word.replace(i, '')
#             word = word.replace('  ',' ')


# объявление функции
# def func(num1, num2):
#     return num1 % num2 == 0
#
# # считываем данные
# num1, num2 = int(input()), int(input())
#
# # вызываем функцию
# if func(num1, num2):
#     print()
# else:
#     print()

# list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]
# list1[2][2].append(7000)
#
# print(list1)

# Дополните приведенный код, используя списочный метод extend(), чтобы список list1 имел вид:
# list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g', 'h', 'i', 'j'], 'k'], 'l'], 'm', 'n']

# list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g'], 'k'], 'l'], 'm', 'n']
# sub_list = ['h', 'i', 'j']
# list1[2][1][2].extend(sub_list)
#
# print(list1)

# Дополните приведенный код, используя цикл for и встроенную функцию max(),
# чтобы он выводил один общий максимальный элемент среди всех элементов вложенных списков list1.

# list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# maximum = -1
# for i in list1:
#     for j in i:
#         if j > maximum:
#             maximum = j
# print(maximum)

# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# for i in list1:
#     i.reverse()
#
# print(list1)

# Дополните приведенный код так, чтобы он выводил единственное число:
# сумму всех чисел списка list1 разделённую на общее количество всех чисел.

# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# total = 0
# counter = 0
# for i in list1:
#     for j in i:
#         total += j
#         counter += 1
# print(total/counter)
# n = int(input())
# list = []
# # for i in range(n):
# elem = [int(i) for i in range(1, n + 1)]
# list.append(elem)
# for i in range(n):
#     print(elem)

# ANOTHER WAY:
# n = int(input())
# result = []
#
# for _ in range(n):
#     result.append(list(range(1, n + 1)))
#
# print(*result, sep='\n')

# На вход программе подается число nnn. Напишите программу,
# которая создает и выводит построчно вложенный список, состоящий из nnn списков [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].
# Формат входных данных
# На вход программе подается натуральное число nnn.
# Формат выходных данных
# Программа должна вывести построчно указанный вложенный список.

# n = int(input())
# lst_all = []
# for j in range(1, n + 1):
#     lst = []
#     for i in range(1, j + 1):
#         lst.append(int(i))
#     lst_all.append(lst)
# print(*lst_all, sep='\n')


# another way
# n = int(input())
# result = []
#
# for i in range(1, n + 1):
#     result.append(list(range(1, i + 1)))

# print(*result, sep='\n')

# Треугольник Паскаля — бесконечная таблица биномиальных коэффициентов, имеющая треугольную форму.
# В этом треугольнике на вершине и по бокам стоят единицы. Каждое число равно сумме двух расположенных над ним чисел.
# 0:      1
# 1:     1 1
# 2:    1 2 1
# 3:   1 3 3 1
# 4:  1 4 6 4 1
#       .....
# На вход программе подается число nnn. Напишите программу, которая возвращает указанную строку треугольника Паскаля
# в виде списка (нумерация строк начинается с нуля).
# Формат входных данных
# На вход программе подается число n  (n≥0)n \, (n \ge 0)n (n≥0).
# Формат выходных данных
# Программа должна вывести указанную строку треугольника Паскаля в виде списка.
# Примечание 1. Решение удобно оформить в виде функции pascal(), которая принимает номер строки и
# возвращает соответствующую строку треугольника Паскаля.
# Примечание 2. Графическая иллюстрация формирования треугольника Паскаля.
# где n - это номер строки треугольника, а m - номер элемента в строке. Тут также важно помнить, что
# c = n!/m!*(n-m)!
# нумерация строк начинается с нуля
# from math import factorial
# n = int(input())
# n = 5
# # result = [[1]]
# result = [[1], [1, 1], [1, 2, 1]]
# if n in [0, 1, 2]:
#     print(result[n])
# else:
#     for i in range(3, n + 1):
#         res = [1]
#
#         for j in range(1, i + 1):
#             res_prev = result[i - 1]
#             while len(res_prev) > 1:
#                 res.append(int(res_prev[j-1]) + int(res_prev[j]))
#                 res_prev.remove(res_prev[j-1])
#         res.append(1)
#         result.append(res)
# print(result[n])

# вывод треугольника паскаля
# def pascal(n):
#     triangle = [[1]]
#
#     for i in range(n):
#         row = [1]
#         for j in range(1, len(triangle[i])):
#             row += [sum(triangle[i][j - 1: j + 1])]
#         row += [1]
#         triangle.append(row.copy())
#     for v in range(0,len(triangle) - 1):
#         print(*triangle[v])
# #
# #
# # # --------------------ВЫЗОВ--------------------
# pascal(int(input()))


# На вход программе подается строка текста, содержащая символы. Напишите программу,
# которая упаковывает последовательности одинаковых символов заданной строки в подсписки.
# Формат входных данных
# На вход программе подается строка текста, содержащая символы, отделенные символом пробела.
# Формат выходных данных
# Программа должна вывести указанный вложенный список.
# Тестовые данные 🟢
# Sample Input 1:

# def double(txt):
#     l = [i for i in txt]
#     l_flag = l[0]
#     l_final = []
#     for i in l:
#         if i == ' ':
#             l.remove(i)
#     for n in range(1, len(l) + 1):
#         if l[n] == l_flag[n-1]:
#             l_flag.append(l[n])
#
#         if l[n] != l_flag[n-1]:
#             l_final.append(l_flag)
#         l_flag = l[n]
#         # for j in range(1, len(l) + 1):
#         #     if l[j] == l_final[j - 1]:
#     #         l_final.append(l[j])
#     #     else:
#     #         l_final.append(l[j])
#
#     print(l)
#     print(l_flag)
#     print(l_final)
#
#
# double('a b c d')

# n = 'a a b c c d a'
# l = [i for i in n.replace(' ', '')]
# print(l)
# final = []
# if len(final) == 0:
#     final.append([l[0]])
# for i in range(1, len(l) + 1):
#     if l[i] == final[i - 1][1]:
#         final[i - 1].append(l[i])
#     else:
#         final.append([l[i]])
#         print(final)
# for i in range(0, len(l)):
#     if len(final) == 0:
#         final.append([l[i]])
#     else:
#         if l[i] == final[i - 1][0]:
#             final[i - 1].append(l[i])
#         else:
#             final.append([l[i]])
#             print(final)
# n = 'a a b c c d a'.replace(' ', '')
# # l = [i for i in n]
# final = [[n[0]]]
# for i in range(1, len(n)):
#     if n[i] == n[i - 1]:
#         final[-1].append(n[i])
#     else:
#         final.append([n[i]])
# print(final)

# На вход программе подаются две строки, на одной символы, на другой число nnn. Из первой строки формируется список.

# Реализуйте функцию chunked(), которая принимает на вход список и число,
# задающее размер чанка (куска), а возвращает список из чанков указанной длины.
# Формат входных данных
# На вход программе подается строка текста, содержащая символы, отделенные символом пробела и число nnn на отдельной строке.
# Формат выходных данных
# Программа должна вывести указанный вложенный список.
# Примечание. Не забудьте вызвать функцию chunked(), чтобы вывести результат 😀.
# Тестовые данные 🟢
# Sample Input 1:
# a b c d e f
# 2
# Sample Output 1:
# [['a', 'b'], ['c', 'd'], ['e', 'f']]

# def chunked(data,n):
#     data = data.replace(' ', '')
#     l = [[data[0]]]
#     for i in range(1, len(data)):
#
#         if len(l[-1]) < n:
#             l[-1].append(data[i])
#         else:
#             l.append([data[i]])
#     return l
# print(chunked('a b c d e', 2))


# Подсписок — часть другого списка. Подсписок может содержать один элемент, несколько,
# и даже ни одного. Например, [1], [2], [3] и [4] — подсписки списка [1, 2, 3, 4]. Список [2, 3] — подсписок списка
# [1, 2, 3, 4], но список [2, 4] не подсписок списка [1, 2, 3, 4], так как элементы 222 и 444 во втором списке не смежные.
# Пустой список — подсписок любого списка. Сам список — подсписок самого себя, то есть список [1, 2, 3, 4]
# подсписок списка [1, 2, 3, 4].
# На вход программе подается строка текста, содержащая символы. Из данной строки формируется список.
# Напишите программу, которая выводит список, содержащий все возможные подсписки списка, включая пустой список.
# Формат входных данных
# На вход программе подается строка текста, содержащая символы, отделенные символом пробела.
# Формат выходных данных
# Программа должна вывести указанный список, содержащий все возможные подсписки, включая пустой список в соответствии с примерами.
# Sample Input 4:
# 1 2 3 0
# Sample Output 4:
# [[], ['1'], ['2'], ['3'], ['0'], ['1', '2'], ['2', '3'], ['3', '0'], ['1', '2', '3'], ['2', '3', '0'], ['1', '2', '3', '0']]

# def spi(txt):
#     txt = txt.replace(' ', '')
#     k = [[]]
#     final = [[]]
#     for i in range(1, len(txt) + 1):
#         if len(txt) % i == 0:
#             for j in range(1, len(txt) + 1):
#                 k.append([n for n in txt[j - i:j] if len(n) > 0])
#     for i in range(1, len(k)):
#         if len(k[i]) > 0:
#             final.append(k[i])
#     print(final)
# spi('1 2 3')


# На вход программе подаются два натуральных числа nnn и mmm, каждое на отдельной строке —
# количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — слова, каждое на отдельной строке;
# подряд идут элементы сначала первой строки, затем второй, и т.д.
# Напишите программу, которая сначала считывает элементы матрицы один за другим, затем выводит их в виде матрицы.
# Формат входных данных
# На вход программе подаются два числа nnn и mmm — количество строк и столбцов в матрице, далее идут
# n×mn \times mn×m слов, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести считанную матрицу, разделяя ее элементы одним пробелом.
# Тестовые данные 🟢
# Sample Input 1:
# 4
# 2
# и
# швец
# и
# жнец
# и
# на
# дуде
# игрец

# # put your python code here
# # m , n = int(input()), int(input())
# m , n = 4, 2
# # l = []
# # for i in range(m*n):
# #     l.append(input())
# l = ['и', 'швец', 'и', 'жнец', 'и', 'на', 'дуде', 'игрец']
# for j in range(0, m * n, n):
#     print(*l[j:j+n])
# m, n = 4, 2
# f = []
# for i in range(m):
#     l = []
#     for j in range(n):
#         s = input()
#         l.append(s)
#     f.append(l)
# print(l)
# for i in range(2):
#     matr = []
#     for j in range(4):
#         matr.append(f[j][i])
#     print(*matr)
# def matrix_x(size):     # матрица квадратная с вычислением суммы элементов по главной диагонали
#     summa = 0
#     matrix = []
#     for i in range(size):
#         matrix.append(input().split())
#     print(matrix)
#     # matrix = [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
#     for i in range(size):
#         summa += int(matrix[i][i])
#     print(summa)
# matrix_x(int(input()))

# Напишите программу, которая выводит количество элементов квадратной матрицы в каждой строке,
# больших среднего арифметического элементов данной строки.
# Формат входных данных
# На вход программе подаётся натуральное число nnn — количество строк и столбцов в матрице,
# затем элементы матрицы (целые числа) построчно через пробел.
# Формат выходных данных
# Программа должна вывести nnn чисел — для каждой строки количество элементов матрицы,
# больших среднего арифметического элементов данной строки.
#
# size = int(input())
# summa = 0
# matrix = []
# for i in range(size):
#     matrix.append(input().split())
#
# k = [['1', '2', '3']]
# s = 0
# for i in k[0]:
#     s += int(i)/len(k[0])
#
# for row in range(size):
#     counter = 0
#     avg = 0
#     for i in matrix[row]:
#         avg += int(i)
#     avg = int(avg / len(matrix[row]))
#     for col in range(size):
#         if int(matrix[row][col]) > avg:
#             counter += 1
#     print(counter)

# Формат входных данных
# На вход программе подаётся натуральное число nnn — количество строк и столбцов в матрице,
# затем элементы матрицы (целые числа) построчно через пробел.
# Формат выходных данных
# Программа должна вывести одно число — максимальный элемент в заштрихованной области квадратной матрицы.
# Примечание. Элементы главной диагонали также учитываются.
# Тестовые данные 🟢
# Sample Input 1:
# 3
# 1 4 5
# 6 7 8
# 1 1 6
# size = int(input())
# matrix = []
# matr = []
# matr_max = []
# for i in range(size):
#     matrix.append(input().split())
# for row in range(size):
#     matr.append(matrix[row][0:row + 1])
# for i in range(len(matr)):
#     for j in range(len(matr[i])):
#         matr_max.append(matr[i][j])
# matr_max = [int(i) for i in matr_max]
# print(max(matr_max))



# код для выдачи макс значения из двух треугольников
# # put your python code here
# size = int(input())
# matrix = []
# matr = []
# matr_max = []
# for i in range(size):
#     matrix.append(input().split())
# for row in range(size):
#     for col in range(size):
#         if row >= col and row <= size -1 - col or row <= col and row >= size -1 - col:
#             matr.append(int(matrix[row][col]))
# print(max(matr))

# Квадратная матрица разбивается на четыре четверти, ограниченные главной и побочной диагоналями: верхнюю, нижнюю, левую и правую.
# Напишите программу, которая вычисляет сумму элементов: верхней четверти; правой четверти; нижней четверти; левой четверти.
# Формат входных данных
# На вход программе подаётся натуральное число nnn — количество строк и столбцов в матрице,
# затем элементы матрицы (целые числа) построчно через пробел.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
# Примечание. Элементы диагоналей не учитываются.
#  Sample Input 1:
# 4
# 1 2 3 4
# 5 6 7 8
# 3 4 5 6
# 1 2 3 4
# Sample Output 1:
# Верхняя четверть: 5
# Правая четверть: 14
# Нижняя четверть: 5
# Левая четверть: 8
# our python code here
# size = int(input())
# matrix = []
# left = []
# top = []
# right = []
# down = []
# for i in range(size):
#     matrix.append(input().split())
# for row in range(size):
#     for col in range(size):
#         if row > col and row < size -1 - col:
#             left.append(int(matrix[row][col]))
#         if row < col and row > size -1 - col:
#             right.append(int(matrix[row][col]))
#         if row < col and row < size -1 - col:
#             top.append(int(matrix[row][col]))
#         if row > col and row > size -1 - col:
#             down.append(int(matrix[row][col]))
# print(f'Верхняя четверть: {sum(top)}')
# print(f'Правая четверть: {sum(right)}')
# print(f'Нижняя четверть: {sum(down)}')
# print(f'Левая четверть: {sum(left)

# выводит таблицу умножения:
# n, m = int(input()), int(input())
# k = [[str(i*j).ljust(3) for i in range(m)] for j in range(n)]
# n = [print(*i) for i in k]



# индекс макисмального элемента в таблице
# # n, m = int(input()), int(input())
# n, m = 3, 4
# # k = [[0 for i in range(m)] for j in range(n)]    # матрица из нулей
# # [print(*i) for i in k]
# k = [input().split() for j in range(n)]
# maximum = -10 ** 9
# position = [0, 0]
# for row in range(n):
#     for col in range(m):
#         # print(k[row][col])
#         if int(k[row][col]) > maximum:
#             maximum = int(k[row][col])
#             position = [row, col]
# print(*position)

# Напишите программу, которая меняет местами столбцы в матрице.

# Формат входных данных
# На вход программе на разных строках подаются два натуральных числа nnn и mmm —
# количество строк и столбцов в матрице, затем элементы матрицы построчно через пробел, затем числа iii и jjj —
# номера столбцов, подлежащих обмену.
# Формат выходных данных
# Программа должна вывести указанную таблицу с замененными столбцами.
# Тестовые данные
# Sample Input 1:
# 3
# 4
# 11 12 13 14
# 21 22 23 24
# 31 32 33 34
# 0 1
# c, r = int(input()), int(input())
# k = [input().split() for i in range(c)]
# column = [input().split() for i in range(1)]
# for col in range(c):
#     print(int(column[0][0]))
#     k[col][int(column[0][0])], k[col][int(column[0][1])] = k[col][int(column[0][1])], k[col][int(column[0][0])]
# [print(*i) for i in k]


# Напишите программу, которая проверяет симметричность квадратной матрицы относительно главной диагонали.
# Формат входных данных
# На вход программе подаётся натуральное число nnn — количество строк и столбцов в матрице, затем элементы матрицы построчно через пробел.
# Формат выходных данных
# Программа должна вывести YES, если матрица симметрична относительно главной диагонали, и слово NO в противном случае.
# Тестовые данные 🟢
# Sample Input 1:
# 3
# 0 1 2
# 1 2 3
# 2 3 4
# Sample Output 1:
# YES
# n = int(input())
# k = [input().split() for i in range(n)]
# one, two = [], []
# for col in range(n):
#     for row in range(n):
#         if col > row:
#             one.append(k[col][row])
#         if col > row:
#             two.append(k[row][col])
# print(one)
# print(two)
# if one == two:
#     print('YES')
# else:
#     print('NO')


# поменять местами цифры на главной и побочной диагонали
#  Sample Input 1:
# 3
# 1 2 3
# 4 5 6
# 7 8 9
# Sample Output 1:
# 7 2 9
# 4 5 6
# 1 8 3

# n = int(input())
# k = [input().split() for i in range(n)]
# for row in range(n):
#     for col in range(n):
#         if row == col:
#             k[row][col], k[n-row -1][col] = k[n-row - 1][col], k[row][col]
# [print(*i) for i in k]

# горизонтальное отражение
#  Sample Input 1:
# 4
# 1 2 3 4
# 5 6 7 8
# 8 6 4 2
# 3 4 5 6
# Sample Output 1:
# 3 4 5 6
# 8 6 4 2
# 5 6 7 8
# 1 2 3 4
#
# 1 8 3

# n = int(input())
# k = [input().split() for i in range(n)]
# k.reverse()
# [print(*i) for i in k]

# поворот матрицы на 90 градусов по часовой
#  Sample Input 1:
# 3
# 1 2 3
# 4 5 6
# 7 8 9
# Sample Output 1:
# 7 4 1
# 8 5 2
# 9 6 3

# n = int(input())
# k = [input().split() for i in range(n)]
# k_final = [[0] * n for i in range(n)]
# for row in range(n):
#     for col in range(n):
#         k_final[col][n - row - 1] = k[row][col]
# [print(*i) for i in k_final]

# На шахматной доске 8×88 \times 88×8 стоит конь. Напишите программу, которая отмечает положение коня на доске
# и все клетки, которые бьет конь. Клетку, где стоит конь, отметьте английской буквой N, клетки, которые бьет конь,
# отметьте символами *, остальные клетки заполните точками.
# Формат входных данных
# На вход программе подаются координаты коня на шахматной доске в шахматной нотации
# (то есть в виде e4, где сначала записывается номер столбца (буква от a до h, слева направо),
# затем номеру строки (цифра от 111 до 888, снизу вверх)).
# Формат выходных данных
# Программа должна вывести на экран изображение доски, разделяя элементы пробелами.
# Примечание. Шахматная доска имеет вид:

# xy = input()
# k = [['.'] * 8 for i in range(8)]
# x = 'abcdefgh'.index(xy[0])
# y = '87654321'.index(xy[1])
# for i in range(8):
#     for j in range(8):
#         inx = (x - j) * (y - i)
#         if inx in (-2, 2):
#             k[i][j] = '*'
# k[y][x] = 'N'
# [print(*i) for i in k]

# Магическим квадратом порядка nnn называется квадратная таблица размера n×nn \times nn×n,
# составленная из всех чисел 1,2,3,…,n21, 2, 3, \ldots, n^21,2,3,…,n2 так, что суммы по каждому столбцу,
# каждой строке и каждой из двух диагоналей равны между собой. Напишите программу, которая проверяет,
# является ли заданная квадратная матрица магическим квадратом.
# Формат входных данных
# На вход программе подаётся натуральное число nnn — количество строк и столбцов в матрице, затем элементы матрицы:
# nnn строк, по nnn чисел в каждой, разделённые пробелами.
# Формат выходных данных
# Программа должна вывести слово YES, если матрица является магическим квадратом, и слово NO в противном случае.
#  Sample Input 1:
# 3
# 8 1 6
# 3 5 7
# 4 9 2
# Sample Output 1:
# YES

# n = int(input())
# matrix = [input().split() for i in range(n)]
# main_d, second_d = 0, 0
# colll = []
# rowww = []
# no = 0
# k_final = [[0] * n for i in range(n)]
# k_true = matrix
# k_last = []
# for row in range(n):
#     col_sum, row_sum = 0, 0
#     for col in range(n):
#         if int(matrix[row][col]) in range(1, n ** 2 + 1):
#             k_last.append(matrix[row][col])
#
#             if row == col:
#                 main_d += int(matrix[row][col])
#             if row == n - col - 1:
#                 second_d += int(matrix[row][col])
#             col_sum += int(matrix[row][col])
#             row_sum += int(matrix[col][row])
#         else:
#             no += 1
#     colll.append(col_sum)
#     rowww.append(row_sum)
# k_last.sort()
# counter = 0
# for i_last in range(1, len(k_last)):
#     if k_last[i_last] == k_last[i_last - 1]:
#         no += 1
# for i in range(n):
#     if rowww[i] == colll[i] == main_d == second_d:
#         counter += 1
# if no == 0:
#     if counter == n:
#         print('YES')
#     else:
#         print('NO')
# else:
#     print('NO')

# На вход программе подаются два натуральных числа nnn и mmm. Напишите программу для создания матрицы размером
# n×mn \times mn×m, заполнив её символами . и * в шахматном порядке. В левом верхнем углу должна стоять точка.
# Выведите полученную матрицу на экран, разделяя элементы пробелами.
# Формат входных данных
# На вход программе на одной строке подаются два натуральных числа nnn и mmm — количество строк и столбцов в матрице.
# Формат выходных данных
# Программа должна вывести матрицу, описанную в условии задачи.
# Тестовые данные 🟢
# Sample Input 1:
# 3 4
# Sample Output 1:
# . * . *
# * . * .
# . * . *

# x = input().split()
# n, m = int(x[0]), int(x[1])
# k = [['.' for i in range(m)] for j in range(n)]    # матрица из нулей
# [print(*i) for i in k]
# for row in range(len(k)):
#     for col in range(len(k[row])):
#         if row % 2 == 0 and col % 2 != 0 or row % 2 != 0 and col % 2 == 0:
#             k[row][col] = '*'
# [print(*i) for i in k]

# На вход программе подается натуральное число nnn. Напишите программу, которая создает матрицу
# размером n×nn \times nn×n и заполняет её по следующему правилу:
#     числа на побочной диагонали равны 111;
#     числа, стоящие выше этой диагонали, равны 000;
#     числа, стоящие ниже этой диагонали, равны 222.
# Полученную матрицу выведите на экран. Числа в строке разделяйте одним пробелом.
# Формат входных данных
# На вход программе подается натуральное число nnn — количество строк и столбцов в матрице.
# Формат выходных данных
# Программа должна вывести матрицу в соответствии с условием задачи.
# Примечание. Побочная диагональ — это диагональ, идущая из правого верхнего в левый нижний угол матрицы.
# Тестовые данные 🟢
# Sample Input 1:
# 4
# Sample Output 1:
# 0 0 0 1
# 0 0 1 2
# 0 1 2 2
# 1 2 2 2

# n = int(input())
# matrix = [[0] * n for i in range(n)]
# print(matrix)
# for row in range(n):
#     for col in range(n):
#         if row == n - 1 - col:
#             matrix[row][col] = 1
#         if row > n -1 - col:
#             matrix[row][col] = 2
# [print(*p) for p in matrix]

# На вход программе подаются два натуральных числа nnn и mmm. Напишите программу, которая
# создает матрицу размером n×mn \times mn×m и заполняет её числами от 111 до n⋅mn \cdot mn⋅m в соответствии с образцом.
# Формат входных данных
# На вход программе на одной строке подаются два натуральных числа nnn и mmm — количество строк и столбцов в матрице.
# Формат выходных данных
# Программа должна вывести матрицу в соответствии с образцом.
# Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 333 символа на каждый элемент.
# Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
#  Sample Input 1:
# 3 4
# Sample Output 1:
# 1  2  3  4
# 5  6  7  8
# 9  10 11 12


# def matrix_random_size_two_args():
#     x = input().split()
#     global n, m, k
#     n, m = int(x[0]), int(x[1])
#     k = [['.' for _ in range(m)] for j in range(n)]    # матрица из нулей
#     return k
# matrix_random_size_two_args()
# contain = 1
# for row in range(n):
#     for col in range(m):
#         k[row][col] = str(contain).ljust(3)
#         contain += 1
# [print(*i) for i in k]

# На вход программе подаются два натуральных числа nnn и mmm. Напишите программу, которая создает матрицу размером
# n×mn \times mn×m заполнив её в соответствии с образцом.
# Формат входных данных
# На вход программе на одной строке подаются два натуральных числа nnn и mmm — количество строк и столбцов в матрице.
# Формат выходных данных
# Программа должна вывести указанную матрицу в соответствии с образцом.
# Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 333 символа на каждый элемент.
# Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
# Тестовые данные 🟢
# Sample Input 1:
# 3 7
# Sample Output 1:
# 1  4  7  10 13 16 19
# 2  5  8  11 14 17 20
# 3  6  9  12 15 18 21

# def matrix_random_size_two_args():
#     x = input().split()
#     global n, m, k
#     n, m = int(x[0]), int(x[1])
#     k = [['.' for _ in range(m)] for j in range(n)]    # матрица из нулей
#     return k
# matrix_random_size_two_args()
# contain = 1
# for row in range(m):
#     for col in range(n):
#         k[col][row] = str(contain).ljust(3)
#         contain += 1
# [print(*i) for i in k]

# Формат входных данных
# На вход программе подается натуральное число nnn — количество строк и столбцов в матрице.
#
# Формат выходных данных
# Программа должна вывести указанную матрицу в соответствии с образцом: разместить единицы на главной и побочной диагоналях, остальные позиции матрицы заполнить нулями.
#
# Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 333 символа на каждый элемент. Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
# Тестовые данные 🟢
#
# Sample Input 1:
#
# 5
#
# Sample Output 1:
#
# 1  0  0  0  1
# 0  1  0  1  0
# 0  0  1  0  0
# 0  1  0  1  0
# 1  0  0  0  1



# n = int(input())
# k = [[0] * n for _ in range(n)]
# for row in range(n):
#     for col in range(n):
#         if row == col or row == n - 1 - col:
#             k[row][col] = 1
#
# [print(*i) for i in k]

# На вход программе подается натуральное число nnn. Напишите программу, которая создает матрицу размером
# n×nn \times nn×n заполнив её в соответствии с образцом.
# Формат входных данных
# На вход программе подается натуральное число nnn — количество строк и столбцов в матрице.
# Формат выходных данных
# Программа должна вывести указанную матрицу в соответствии с образцом.
# Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 333 символа на каждый элемент.
# Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
# Тестовые данные 🟢
# Sample Input 1:
# 5
# Sample Output 1:
# 1  1  1  1  1
# 0  1  1  1  0
# 0  0  1  0  0
# 0  1  1  1  0
# 1  1  1  1  1

# n = int(input())
# k = [[0] * n for _ in range(n)]
# for row in range(n):
#     for col in range(n):
#         if row <= col and row <= n - 1 - col or row >= col and row >= n - 1 - col:
#             k[row][col] = 1
#
# [print(*i) for i in k]


# На вход программе подаются два натуральных числа nnn и mmm. Напишите программу, которая создает матрицу размером n×mn \times mn×m заполнив её в соответствии с образцом.
#
# Формат входных данных
# На вход программе на одной строке подаются два натуральных числа nnn и mmm — количество строк и столбцов в матрице.
#
# Формат выходных данных
# Программа должна вывести указанную матрицу в соответствии с образцом.
#
# Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 333 символа на каждый элемент. Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
# Тестовые данные 🟢
#
# Sample Input 1:
#
# 5 5
#
# Sample Output 1:
#
# 1 2 3 4 5
# 2 3 4 5 1
# 3 4 5 1 2
# 4 5 1 2 3
# 5 1 2 3 4


# def matrix_random_size_two_args():
#     x = input().split()
#     global n, m, k
#     n, m = int(x[0]), int(x[1])
#     k = [['.' for _ in range(m)] for j in range(n)]    # матрица из нулей
#     return k
# matrix_random_size_two_args()
# contain = [1 * i for i in range(1, m + 1)]
# for row in range(n):
#     for col in range(m):
#         k[row][col] = str(contain[col]).ljust(3)
#     contain.append(contain[0])
#     del contain[0]
# [print(*i) for i in k]


# На вход программе подаются два натуральных числа nnn и mmm. Напишите программу,
# которая создает матрицу размером n×mn \times mn×m заполнив её "змейкой" в соответствии с образцом.
# Формат входных данных
# На вход программе на одной строке подаются два натуральных числа nnn и mmm — количество строк и столбцов в матрице.
# Формат выходных данных
# Программа должна вывести указанную матрицу в соответствии с образцом.
# Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 333 символа на каждый элемент.
# Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
# Тестовые данные
# Sample Input 1:
# 3 5
# Sample Output 1:
# 1  2  3  4  5
# 10 9  8  7  6
# 11 12 13 14 15

# def matrix_random_size_two_args():
#     x = input().split()
#     global n, m, k
#     n, m = int(x[0]), int(x[1])
#     k = [['.' for _ in range(m)] for j in range(n)]    # матрица из нулей
#     return k
# matrix_random_size_two_args()
# contain = 1
# for row in range(n):
#     for col in range(m):
#         k[row][col] = str(contain).ljust(3)
#         contain += 1
# for r in range(n):
#     if r % 2 != 0:
#         k[r].reverse()
# [print(*i) for i in k]


# На вход программе подаются два натуральных числа nnn и mmm. Напишите программу, которая создает матрицу
# размером n×mn \times mn×m заполнив её "диагоналями" в соответствии с образцом.
# Формат входных данных
# На вход программе на одной строке подаются два натуральных числа nnn и mmm — количество строк и столбцов в матрице.
# Формат выходных данных
# Программа должна вывести указанную матрицу в соответствии с образцом.
# Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 333 символа на каждый элемент.
# Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
# Тестовые данные 🟢
# Sample Input 1:
# 3 5
# Sample Output 1:
# 1  2  4  7  10
# 3  5  8  11 13
# 6  9  12 14 15

# def matrix_random_size_two_args():
#     x = input().split()
#     global n, m, k
#     n, m = int(x[0]), int(x[1])
#     k = [['.' for _ in range(m)] for j in range(n)]    # матрица из нулей
#     return k
# matrix_random_size_two_args()
# num = 1
# for j in range(m + n - 1):
#     for i in range(n):
#         if j - i in range(m):
#             k[i][j - i] = str(num).ljust(3)
#             num += 1
#
# [print(*i) for i in k]


# На вход программе подаются два натуральных числа nnn и mmm. Напишите программу,
# которая создает матрицу размером n×mn \times mn×m заполнив её "спиралью" в соответствии с образцом.
# Формат входных данных
# На вход программе на одной строке подаются два натуральных числа nnn и mmm — количество строк и столбцов в матрице.
# Формат выходных данных
# Программа должна вывести матрицу в соответствии образцом.
# Примечание. Для вывода элементов матрицы как в примерах, отводите ровно 333 символа на каждый элемент.
# Для этого используйте строковый метод ljust(). Можно обойтись и без ljust(), система примет и такое решение 😇
# Тестовые данные 🟢
# Sample Input 1:
# 4 5
# Sample Output 1:
# 1  2  3  4  5
# 14 15 16 17 6
# 13 20 19 18 7
# 12 11 10 9  8

# def matrix_random_size_two_args():
#     x = input().split()
#     global n, m, k
#     n, m = int(x[0]), int(x[1])
#     k = [['0'.ljust(3) for _ in range(m)] for j in range(n)]    # матрица из нулей
#     return k
# matrix_random_size_two_args()
# nk = 1
# low_col = 0
#
# high_row, high_col = n, m
# # while nk < n * m + 1:
# #     for j in range(low_col, high_col - 1):
# #         k[low_col][j] = str(nk).ljust(3)
# #         nk += 1
# #     for j in range(low_col, high_row):
# #         k[j][high_row + 1] = str(nk).ljust(3)
# #         nk += 1
# #     for j in range(low_col + 1, high_col + 1):
# #         k[high_row][-j] = str(nk).ljust(3)
# #         nk += 1
# #     for j in range(low_col + 1, high_row + 1):
# #         k[-j][low_col] = str(nk).ljust(3)
# #         nk += 1
# #     low_col += 1
# #     high_col -= 1
# #     high_row -= 1
# while nk < n * m + 1:
#     for j in range(low_col, high_col):
#         k[low_col][j+1] = str(nk).ljust(3)
#         nk += 1
#     for j in range(low_col, high_row - 1):
#         k[j][high_row-1] = str(nk).ljust(3)
#         nk += 1
#     for j in range(low_col + 1, high_col):
#         k[high_row-1][-j] = str(nk).ljust(3)
#         nk += 1
#     for j in range(low_col + 1, high_row):
#         k[-j][low_col] = str(nk).ljust(3)
#         nk += 1
#     low_col += 1
#     high_col -= 1
#     high_row -= 1
# [print(*i) for i in k]
# i = 0
# low = 0
# col = m
# row = n
# max_col = -1
# max_row = -1
# k[int(n/2)][int(m/2)] = str(n * m).ljust(3)
# while i < n * m + 1:
#     for j in range(low, col - 1):
#         if i == n * m:
#             break
#         i += 1
#         k[low][j] = str(i).ljust(3)
#     for j in range(low, row - 1):
#         if i == n * m:
#             break
#         i += 1
#         k[j][max_col] = str(i).ljust(3)
#
#     for j in range(low, col - 1):
#         if i == n * m:
#             break
#         i += 1
#         k[row - 1][-j - 1] = str(i).ljust(3)
#
#     for j in range(low, row - 1):
#         if i == n * m:
#             break
#         i += 1
#         k[-j - 1][low] = str(i).ljust(3)
#     if i >= n * m - 1:
#         break
#     low += 1
#     col -= 1
#     row -= 1
#     max_col -= 1
#     max_row -= 1
#
# [print(*i) for i in k]
