# Тестовое задание Python-разработчик (Junior)
#
# Общая информация.
# В тестовом задании 2 практических задания.
# Для рассмотрения вашей кандидатуры необходимо выполнить оба практических задания.
#
# Задания:


# 1) Напишите код программы на Python, которая будет в реальном времени (с максимально возможной скоростью) считывать
# текущую цену фьючерса XRP/USDT на бирже Binance.
# В случае, если цена упала на 1% от максимальной цены за последний час, программа должна вывести сообщение в консоль.
# При этом программа должна продолжать работать дальше, постоянно считывая актуальную цену.

from binance.spot import Spot as Client

API_Key = ''
Secret_Key = ''

client = Client(base_url='https://testnet.binance.vision')


def check_data_time(k):
    '''функция фильтрует данные по времени и оставляет только те, которые поступили в последний час'''
    k = list(filter(lambda x: (client.time()['serverTime'] / 1000 - x['serverTime'] / 1000) <= 3600, k))
    return k


def get_max_price(k):
    '''возвращает максимальную цену из списка'''
    max_price = max(map(lambda x: float(x['price']), k))
    return max_price


if __name__ == '__main__':
    first = client.ticker_price('XRPUSDT')
    first['serverTime'] = client.time()['serverTime']
    k = [first]
    try:
        while True:
            res = client.ticker_price('XRPUSDT')
            server_time = client.time()['serverTime']
            if k[-1]['price'] != res['price']:
                res['serverTime'] = server_time
                k.append(res)
                check_data_time(k)
                res_between_price_and_max = int(get_max_price(k) / float(res['price']) * 100)
                if res_between_price_and_max == 101:
                    print(f'Price decreased by 1 or more percent')
    except KeyboardInterrupt:
        print('Завершение программы...')

# 2) Опишите, как бы вы доработали данную программу, чтобы она обрабатывала все пары, а не только XRP/USDT
#  (код писать не нужно, просто текстом)


'''Мой ответ:

1) Применение ассинхронного программирования. В таком случае можно использовать в большем объеме принцип единой ответственности.
Также функция по отсеиванию данных во временном промежутке от -1 часа до последней цены, а также по нахождению самой высокой цены за час,
работали бы независимо и без ожидания функции по получению текущей актуальной цены.

2) Исользование WebSocket для более быстрого получения данных

3) Ответ на вопрос задания:
    - Получение списка торгующихся пар;
    - Написание родительского класса для представления пары как экземпляра класса;
    - Создание экземпляров класса по парам, полученным от Binance;
    - Возможно потребовалось бы создание односвязного списка из значений в промежутке от -1 часа до последней цены,
      либо сохранение данных в файл/бд(для оптимизации программы);   
'''
