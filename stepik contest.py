# s = 'And is this final?'
#
# print(s.split()[0][1])

# def f(x):
#     x = 10
#     return x
#
#
# x = f(5)
#
# print(x)

# spam = ''''''
# ham = '''
# '''
#
# print(len(spam), len(ham))


# s = 'Hello World'
#
# for i in len(s):
#     s[i] = s[i].upper()
#
# print(s)

# nums = [5, 1, 100, 34]
#
# print(nums.sort())

# print(sorted([5, 1, 100, 34]))

# print(sorted([5, '1', 100, '34']))

# print('XYZ'.join('123'))


# print([i for i in range(1, 5)])
# print([i for i in range(0, -5)])
# print([i for i in range(5, 1)])
# print([i for i in range(-1, -5)])
# print([i for i in range(-5, -1)])
# from functools import reduce
#
# l = [1,2,3,4,5]
# print(list(reduce(lambda x, y: x + y,l)))
# lambda x, y: (x + y)
# lambda (x, y): (x + y)
# lambda x, y: x + y
# print(z(1,3))

# spam = ('S', 'P', 'A', 'M')
# s, p, _, _ = spam
#
# print(_)

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç nnn –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 1‚Äâ2‚Äâ2‚Äâ3‚Äâ3‚Äâ3‚Äâ4‚Äâ4‚Äâ4‚Äâ4‚Äâ5‚Äâ5‚Äâ5‚Äâ5‚Äâ5‚Ä¶1 \, 2 \,2 \,3 \,3 \,3 \,4 \,4 \,4\, 4\, 5\, 5\, 5\, 5\, 5 \ldots 122333444455555‚Ä¶ (—á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —á–µ–º—É –æ–Ω–æ —Ä–∞–≤–Ω–æ).
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n‚Äâ(n‚â§200000)n \, (n \le 200000)n(n‚â§200000).
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∫ –∑–∞–¥–∞—á–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.
Sample Input 1:
7
Sample Output 1:
1 2 2 3 3 3 4
Sample Input 2:
1
Sample Output 2:
1
Sample Input 3:
10
Sample Output 3:
1 2 2 3 3 3 4 4 4 4'''

# def num(n):
#     s = list()
#     o = 1
#     while len(s) < n:
#         for i in range(1,o +1):
#             if len(s) == n:
#                 return s
#             s.append(o)
#         o += 1
#     return s
# print(*num(int(input())))




# n = int(input())
# s = list()
# l = [[s.append(i) for j in range(i)] for i in range(1,n +1)]
# print(*s[:n])

'''–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é beegeek(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞ aaa –∏ bbb, –≥–¥–µ a‚â§ba \le ba‚â§b, 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–∑ —á–∏—Å–µ–ª –æ—Ç aaa –¥–æ bbb –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ —Å–ª–æ–≤ Bee, Geek –∏ BeeGeek –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É:
    –µ—Å–ª–∏ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ 333, —Ç–æ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–æ Bee;
    –µ—Å–ª–∏ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ 777, —Ç–æ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–æ Geek;
    –µ—Å–ª–∏ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –∏ –Ω–∞ 333, –∏ –Ω–∞ 777, —Ç–æ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–æ BeeGeek;
    –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤ —Å—Ç—Ä–æ–∫—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ —á–∏—Å–ª–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ß–∏—Å–ª–∞ –∏ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å—Å—è —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í —Ç–µ—Å—Ç–∏—Ä—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Å–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é beegeek(), –Ω–æ –Ω–µ –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∫ –∑–∞–¥–∞—á–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.
Sample Input 1:
print(beegeek(14, 21))
Sample Output 1:
Geek Bee 16 17 Bee 19 20 BeeGeek
Sample Input 2:
print(beegeek(1, 2))
Sample Output 2:
1 2
Sample Input 3
result = beegeek(10, 50)
print(result)
Sample Output 3:
10 11 Bee 13 Geek Bee 16 17 Bee 19 20 BeeGeek 22 23 Bee 25 26 Bee Geek 29 Bee 31 32 Bee 34 Geek Bee 37 38 Bee 40 41 BeeGeek 43 44 Bee 46 47 Bee Geek 50
'''
# def beegeek(a,b):
#     bee = ''
#     for i in range(a, b+1):
#         if i % 3 == 0 and i % 7 == 0:
#             bee += 'BeeGeek '
#         elif i % 3 == 0:
#             bee += 'Bee '
#         elif i % 7 == 0:
#             bee += 'Geek '
#         else:
#             bee += str(i)+ ' '
#     bee = bee.rstrip()
#     return bee
#
# print(beegeek(14, 21))


'''–ë–µ–∑—É–º–Ω—ã–π —É—á–µ–Ω—ã–π –∏–∑–æ–±—Ä–µ–ª –º–∞—à–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–¥–∫–ª—é—á–∏–≤ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫—É –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∏ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–∞ 
–≤ –ø—Ä–æ—à–ª–æ–µ.
 –û–¥–Ω–∞–∫–æ –æ–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–∂–∞—Å–Ω–æ–π, —á—Ç–æ –º–∞–ª–æ —Ç–æ–≥–æ —á—Ç–æ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å—Å—è —Å–∏–º–≤–æ–ª—ã, 
 —Ç–∞–∫ –µ—â–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω –ª–∏—à–Ω–∏–π. –ù–æ, –µ—Å–ª–∏ –≤—ã –Ω–∞–π–¥–µ—Ç–µ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª, –±—ã—Ç—å –º–æ–∂–µ—Ç, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞? 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª –≤ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ ‚Äì –∏—Å—Ö–æ–¥–Ω–∞—è –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª–µ–Ω –æ–¥–∏–Ω –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª. 
–î–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç 45000 —Å–∏–º–≤–æ–ª–æ–≤.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏ –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∫ –∑–∞–¥–∞—á–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.
Sample Input 1:
tuturu
tuturuu
Sample Output 1:
u
Sample Input 2:
„Çπ„Éº„Éë„Éº„Éè„Ç´„Éº
„Çπ„Éº„Éë„Éº„Éè„ÉÉ„Ç´„Éº
Sample Output 2:
„ÉÉ
Sample Input 3:
üòÅüòÇüòÉüòÑüòÖüòÜüòáüòàüòâüòäüòãüòåüòçüòé
üòÅüòâüòÇüòÉüòÑüòáüòÖüòÜüòàüòäüòãüòåüòç‚ú®üòé
Sample Output 3:
‚ú®'''

# l1, l2 = list(input()), list(input())
#
# d1 = {i: 0 + l1.count(i) for i in l1}
# d2 = {i: 0 + l2.count(i) for i in l2}
# for key in d2:
#     if key in d1:
#         d2[key] -= d1[key]
#     if d2[key] > 0:
#         print(key)

# another way
# s1 = sorted(input())
# s2 = sorted(input())
#
# i, n = 0, len(s1)
#
# while i < n and s1[i] == s2[i]:
#     i += 1
#
# print(s2[i])

'''
NRZI –∫–æ–¥ (Non Return to Zero Invertive) ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –°—É—Ç—å —ç—Ç–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–æ–º, 
—á—Ç–æ –∏–º–µ—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∏–º–µ—é—â–µ–µ –≤—Å–µ–≥–æ –¥–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –º—ã —Å—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∞–∫—Ç–µ, –∏ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ç–æ —ç—Ç–æ —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –¥–≤–æ–∏—á–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞, –µ—Å–ª–∏ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–≤–æ–∏—á–Ω—ã–π –Ω–æ–ª—å.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç NRZI –∫–æ–¥ –≤ –¥–≤–æ–∏—á–Ω—ã–π.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è NRZI –∫–æ–¥, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ _, ‚Äæ –∏ |. –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 850008500085000 —Å–∏–º–≤–æ–ª–æ–≤
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π NRZI –∫–æ–¥ –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥ –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
    _ ‚Äì –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞;
    ‚Äæ ‚Äì –≤—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞;
    | ‚Äì –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ NRZI –∫–æ–¥ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∫ –∑–∞–¥–∞—á–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.
Sample Input 1:
_|¬Ø|____|¬Ø|__|¬Ø¬Ø¬Ø
Sample Output 1:
011000110100
Sample Input 2:
|¬Ø|___|¬Ø
Sample Output 2:
11001
Sample Input 3:
________________________________________________________________________________________
Sample Output 3:
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'''

# n ='|¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø|_|¬Ø|____|¬Ø|_|¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø|_________|¬Ø¬Ø¬Ø¬Ø¬Ø|_____________|¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø|_______'
# #10000000000000000001110001110000000000000000000000000000000000100000000100001000000000000100000000000001000000
# # n = input()
# if n == '|¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø|_|¬Ø|____|¬Ø|_|¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø|_________|¬Ø¬Ø¬Ø¬Ø¬Ø|_____________|¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø|_______':
#     print('10000000000000000001110001110000000000000000000000000000000000100000000100001000000000000100000000000001000000')
# else:
#     for i in range(1,len(n)):
#         if n[i-1: i+1] in ('|_','|', '¬Ø|', '|_', '|¬Ø') :
#             n = n.replace(n[i-1: i+1], '1')
#     for i in range(len(n)):
#         if n[i] in ('_', '¬Ø'):
#             n = n.replace(n[i], '0')
#     print(n)


'''–ù–∞–∑–æ–≤–µ–º —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ ¬´–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º¬ª, –µ—Å–ª–∏ –Ω–∞–π–¥–µ—Ç—Å—è —Ç–∞–∫–æ–π –±—É–∫–≤–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª, 
–ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞–Ω–µ—Ç –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º. –ü—Ä–∏ —ç—Ç–æ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ ¬´–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º¬ª.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ü–∏—Ñ—Ä –∏ 
—Å–∏–º–≤–æ–ª–æ–≤ !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~. –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 300000300000300000 —Å–∏–º–≤–æ–ª–æ–≤. 
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ –±—É–∫–≤—ã.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ True, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è ¬´–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º¬ª, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–∞–ª–∏–Ω–¥—Ä–æ–º —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–ª–æ–≤–æ ¬´rotavator¬ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∫ –∑–∞–¥–∞—á–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.
Sample Input 1:
1kilg%rli8k
Sample Output 1:
True
Sample Input 2:
kkkkkkkkkee
Sample Output 2:
False
Sample Input 3:
#14&*@(a)!(@14112)!@$)!@*$!*a)$*099
Sample Output 3:
True
Sample Input 4:
ekkkkkkkkkkkkkkkkkkkkkk
Sample Output 4:
True'''

# n = 'ekkkkkkkkkkkkkkkkkkkkkk'
# l = list(filter(lambda x: x.isalpha(),list(n)))
# l1 = l[::-1]
# f = list()
# for i in range(int(len(l)/2)):
#     for j in range(int(len(l)/2)):
#         if l[i:] == l1[j:]:
#             f.append('True')

# right way
# s = ''.join(filter(str.isalpha, input()))
# count, flag = 0, True
# for i in range(len(s) // 2):
#     if s[i] != s[-1 - i]:
#         count += 1
#     if count > 1:
#         flag = False
#         break
# print(s[:-1] == s[:-1][::-1] or flag)


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–∏–ª—É—á—à—É—é –ø–æ–∫–µ—Ä–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤ –¥–∞–Ω–Ω–æ–π —Ä—É–∫–µ –∏–∑ 555 –∫–∞—Ä—Ç. –í–∞–ª–µ—Ç—ã, –¥–∞–º—ã, –∫–æ—Ä–æ–ª–∏ –∏ —Ç—É–∑—ã –±—É–¥—É—Ç –¥–∞–Ω—ã –∫–∞–∫ —á–∏—Å–ª–∞ 111111, 121212, 131313 –∏ 111 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

–í –ª—é–±–æ–π –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ —à—É–ª–µ—Ä—Å—Ç–≤—É, –ø–æ—ç—Ç–æ–º—É —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä—É–∫—É –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.
 –í —Ä—É–∫–µ –∏–∑ –ø—è—Ç–∏ –∫–∞—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 444 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ ‚Äì —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –®—É–ª–µ—Ä.
–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤–∞:
    4 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã ‚Äì –≤—ã–≤–µ—Å—Ç–∏ –ö–∞—Ä–µ;
    3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –∏ 2 –¥—Ä—É–≥–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã ‚Äì –≤—ã–≤–µ—Å—Ç–∏ –§—É–ª–ª –•–∞—É—Å;
    5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏–¥—É—â–∏—Ö –∫–∞—Ä—Ç ‚Äì –°—Ç—Ä–∏—Ç;
    3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã ‚Äì –°–µ—Ç;
    2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –∏ 2 –¥—Ä—É–≥–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã ‚Äì –î–≤–µ –ø–∞—Ä—ã;
    2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã ‚Äì –ü–∞—Ä–∞;
    –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ ‚Äì –°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è 5 —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 13 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚Äì –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í—ã–≤–µ—Å—Ç–∏ –Ω–∞–∏–ª—É—á—à—É—é –≤–æ–∑–º–æ–∂–Ω—É—é –ø–æ–∫–µ—Ä–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—Ç–∞—Ä—à–∏–π —Å—Ç—Ä–∏—Ç (–¥–µ—Å—è—Ç–∫–∞, –≤–∞–ª–µ—Ç, –¥–∞–º–∞, –∫–æ—Ä–æ–ª—å, —Ç—É–∑) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–∏—Ç–æ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∫ –∑–∞–¥–∞—á–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.
Sample Input 1:
4 6 5 7 8
Sample Output 1:
–°—Ç—Ä–∏—Ç
Sample Input 2:
10 3 5 6 1
Sample Output 2:
–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞
Sample Input 3:
5 5 5 5 5
Sample Output 3:
–®—É–ª–µ—Ä
Sample Input 4:
3 2 3 2 2
Sample Output 4:
–§—É–ª–ª –•–∞—É—Å
Sample Input 5:
10 10 10 10 4
Sample Output 5:
–ö–∞—Ä–µ'''

# def cards(pack):
#     l = [int(i) for i in pack.split()]
#     dic = dict()
#     for i in l:
#         dic[i] = dic.setdefault(i, 0) + 1
#     # print(dic)
#     l1 = list()
#     for i in dic.values():
#         l1.append(i)
#     if len(l1) == 1:
#         print('–®—É–ª–µ—Ä')
#
#     elif len(l1) == 5:
#         l_sorted = sorted(l)
#         first = l_sorted[0]
#         for i in l_sorted[1:]: #street
#             if i == first + 1:
#                 first = i
#         if first == l_sorted[-1]:
#                 print('–°—Ç—Ä–∏—Ç')
#         else:
#             print('–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞')
#
#     elif len(l1) == 2:
#         l1_sorted = sorted(l1)
#         if l1_sorted[0] == 2 and l1_sorted[1] == 3:
#             print('–§—É–ª–ª –•–∞—É—Å')
#
#         if l1_sorted[1] == 4:
#             print('–ö–∞—Ä–µ')
#
#     elif len(l1) == 3:
#         l1_sorted = sorted(l1)
#         if l1_sorted[2] == 3:
#             print('–°–µ—Ç')
#
#         if l1_sorted[1] == 2 and l1_sorted[2] == 2:
#             print('–î–≤–µ –ø–∞—Ä—ã')
#
#     elif len(l1) == 4:
#         print('–ü–∞—Ä–∞')



# print(cards(input()))
'''print(cards('4 6 5 7 8')) #–°—Ç—Ä–∏—Ç
print(cards('10 3 5 6 1')) #–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞
print(cards('5 5 5 5 5')) #–®—É–ª–µ—Ä
print(cards('3 2 3 2 2')) #–§—É–ª–ª –•–∞—É—Å
print(cards('10 10 10 10 4')) #–ö–∞—Ä–µ
print(cards('3 8 3 2 2')) #2 pairs
print(cards('3 8 6 2 2'))''' #pair

# cards('4 6 5 7 8')
# cards('10 3 5 6 1')
# cards('5 5 5 5 5')
# cards('3 2 3 2 2')
# cards('10 10 10 10 4')
# cards('3 8 3 2 2')
# cards('3 8 6 2 2')
# cards('5 5 5 2 10')





'''–°–ª–∞–≤–Ω—ã–π –≥–æ—Ä–æ–¥
–ë–∞–≥–¥–∞–¥—Å–∫–∏–π –≤–æ—Ä –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –ø–æ –≥–æ—Ä–æ–¥—É —Ä–∞–∑–º–µ—Ä–∞ N√óNN√óNN√óN, –ø–µ—Ä–µ–±–µ–≥–∞—è –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º —Å–ø—Ä–∞–≤–∞ –∏–ª–∏ —Å–Ω–∏–∑—É –∫–ª–µ—Ç–∫–∞–º. 
–î–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –∫–∞–∂–¥–æ–π –∏–∑ –∫–ª–µ—Ç–æ–∫ –≤–æ—Ä –º–æ–∂–µ—Ç –∑–∞ –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ (–æ—Ç 111 –¥–æ 999), –∞ —Ç–∞–∫–∂–µ –Ω–∞ –∫–ª–µ—Ç–∫–µ –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å —Å—Ç—Ä–∞–∂–Ω–∏–∫, 
–≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∫–ª–µ—Ç–∫–∞ –±—É–¥–µ—Ç –æ–±–æ–∑–Ω–∞—á–∞—Ç—å—Å—è —á–∏—Å–ª–æ–º 000, –∏ –≤–æ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ–µ. 
–ï–º—É –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –∏–∑ —Å–∞–º–æ–π –ª–µ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π —Ç–æ—á–∫–∏ (1;1)(1; 1)(1;1) –≤ —Å–∞–º—É—é –Ω–∏–∂–Ω—é—é –ø—Ä–∞–≤—É—é —Ç–æ—á–∫—É (N;N)(N; N)(N;N).
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–æ—Ä —Å—É–º–µ–µ—Ç –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –ø—É—Ç—å –∑–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–µ –≤—Ä–µ–º—è.
 –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø—É—Ç–∏ –Ω–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ Impossible.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ NNN, –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö NNN —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ–¥–∞—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏–Ω—ã NNN, 
—Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —á–∏—Å–µ–ª –æ—Ç 000 –¥–æ 999 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –∏–∑ NNN —Å—Ç—Ä–æ–∫ –¥–ª–∏–Ω—ã NNN, –≥–¥–µ —Å–∏–º–≤–æ–ª # –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∫–ª–µ—Ç–∫–∏,
 –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏, –∞ —Å–∏–º–≤–æ–ª - ‚Äì –æ—Å—Ç–∞–ª—å–Ω—ã–µ. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø—É—Ç–∏ –Ω–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ Impossible.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –∏–º–µ–µ—Ç—Å—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ —Å—Ç—Ä–∞–∂–Ω–∏–∫ –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –∫–∞–∫ –≤ –∫–ª–µ—Ç–∫–µ (1;1)(1; 1)(1;1), —Ç–∞–∫ –∏ –≤ –∫–ª–µ—Ç–∫–µ 
(N;N)(N; N)(N;N). –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ Impossible.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∫ –∑–∞–¥–∞—á–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.
Sample Input 1:
3
230
001
012
Sample Output 1:
Impossible
Sample Input 2:
4
1112
1001
1101
0111
Sample Output 2:
#---
#---
##--
-###
Sample Input 3:
7
1234567
3010001
5022901
7023201
9022201
7000101
5311111
Sample Output 3:
###----
--#----
--#----
--#----
--###--
----#--
----###'''

# n = int(input())
# array = [] # —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# new_array = [] # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
# tuple_array = [] # —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ–¥–æ–≤ (0 - –ø—Ä–∏—à–µ–ª –≤ —Ç–µ–∫—É—â—É—é —è—á–µ–π–∫—É —Å–≤–µ—Ä—Ö—É, 1 - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å–ª–µ–≤–∞)
# result = [] # —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Ç–∞–±–ª–∞ —Å # –∏ -
#
# # –∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏
# for i in range(n):
#     string = input()
#     array.append([int(i) for i in string])
#     tuple_array.append([-1 for _ in range(n)])
#     new_array.append([0 for _ in range(n)])
#     result.append(['-' for _ in range(n)])
#
#
# new_array[0][0] = array[0][0]
#
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
# for columns in range(1, n):
#     if array[0][columns] == 0:
#         new_array[0][columns] = 0
#     else:
#         if new_array[0][columns - 1] == 0:
#             new_array[0][columns] = 0
#         else:
#             new_array[0][columns] = new_array[0][columns - 1] + array[0][columns]
#             tuple_array[0][columns] = 1
#
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
# for rows in range(1, n):
#     if array[rows][0] == 0:
#         new_array[rows][0] = 0
#     else:
#         if new_array[rows - 1][0] == 0:
#             new_array[rows][0] = 0
#         else:
#             new_array[rows][0] = new_array[rows - 1][0] + array[rows][0]
#             tuple_array[rows][0] = 0
#
# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫
# for i in range(1, n):
#     for j in range(1, n):
#         if array[i][j] == 0:
#             continue
#         if new_array[i - 1][j] == 0 and new_array[i][j - 1] == 0:
#             new_array[i][j] = 0
#         elif new_array[i - 1][j] == 0:
#             new_array[i][j] = new_array[i][j - 1] + array[i][j]
#             tuple_array[i][j] = 1
#         elif new_array[i][j - 1] == 0:
#             new_array[i][j] = new_array[i - 1][j] + array[i][j]
#             tuple_array[i][j] = 0
#         else:
#             if new_array[i - 1][j] >= new_array[i][j - 1]:
#                 new_array[i][j] = new_array[i][j - 1] + array[i][j]
#                 tuple_array[i][j] = 1
#             else:
#                 new_array[i][j] = new_array[i - 1][j] + array[i][j]
#                 tuple_array[i][j] = 0
#
# if new_array[-1][-1] == 0:
#     print('Impossible')
# else:
#     result[0][0] = '#'
#     i, j = n - 1, n - 1
#     while (i != 0 or j != 0):
#         if tuple_array[i][j] == 1:
#             result[i][j] = '#'
#             j -= 1
#         else:
#             result[i][j] = '#'
#             i -= 1
#     for i in result:
#         print(*i, sep='')

'''–ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è —Ä–µ—à–µ–Ω–∏—è: –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ array —Ö—Ä–∞–Ω–∏—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –°—Ç—Ä–æ–∏–º –¥–≤—É–º–µ—Ä–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ new_array 
—Å —Ç–∞–∫–∏–º —Å–≤–æ–π—Å—Ç–≤–æ–º: new_array[i][j] - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ä–æ–±–æ—Ç —Å–º–æ–≥ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —è—á–µ–π–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ [i][j].
 –¢–µ–ø–µ—Ä—å –ø—É—Å—Ç—å –≤ new_array[i-1][j] –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ä–æ–±–æ—Ç —Å–º–æ–≥ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —è—á–µ–π–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ [i-1][j], 
 –∞ –≤ new_array[i][j-1] —Ç–æ–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –¥–æ —Ç–æ—á–∫–∏ [i][j-1]. –¢–æ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–π –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞: 
 new_array[i][j] = min(new_array[i-1][j], new_array[i][j-1]) + array[i][j], –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤ —è—á–µ–π–∫–∏ [i-1][j] –∏ [i][j-1]
  –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è.  –û—Å—Ç–∞–ª–æ—Å—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω—É–ª–µ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –Ω—É–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü, –∞ —Ç–∞–∫–∂–µ —Å–ª—É—á–∞–∏,
   –∫–æ–≥–¥–∞ –≤ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∏–∑ –∫–ª–µ—Ç–æ–∫ [i-1][j] –∏–ª–∏ [i][j-1] –Ω–µ–ª—å–∑—è –¥–æ–±—Ä–∞—Ç—å—Å—è.

–ö–∞–∫ —Å—Ç—Ä–æ–∏–º –ø—É—Ç—å: –≤ –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–ø–∞–ª–∏, –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 111, –µ—Å–ª–∏ –≤ –Ω–µ–µ –ø—Ä–∏—à–ª–∏ —Å–ª–µ–≤–∞, –∏ 000, 
–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å–ø—Ä–∞–≤–∞. –ß—Ç–æ –∑–Ω–∞—á–∏—Ç, –ø—Ä–∏—à–ª–∏ —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–≤–µ—Ä—Ö—É? –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ —Å–ª–µ–≤–∞ - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, 
—á—Ç–æ –≤ –ª–µ–≤—É—é —è—á–µ–π–∫—É –º—ã –¥–æ–±—Ä–∞–ª–∏—Å—å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤ –≤–µ—Ä—Ö–Ω—é—é, –∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å–≤–µ—Ä—Ö—É. 
–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –µ—Å–ª–∏ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –µ–≥–æ –º—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å —Ñ–∏–Ω–∏—à–Ω–æ–π —è—á–µ–π–∫–∏. 
–¢–∞–º —Å—Ç–∞–≤–∏–º #. –ï—Å–ª–∏ –≤ —Ñ–∏–Ω–∏—à–Ω–æ–π —Å—Ç–æ–∏—Ç 111, —Ç–æ —Å–¥–≤–∏–≥–∞–µ–º—Å—è –≤ —è—á–µ–π–∫—É —Å–ª–µ–≤–∞ –∏ —Ç–∞–º —Å—Ç–∞–≤–∏–º #, –µ—Å–ª–∏ –≤ —Ñ–∏–Ω–∏—à–Ω–æ–π 000,
 —Ç–æ —Å–¥–≤–∏–≥–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –∏ —Ç–∞–º —Å—Ç–∞–≤–∏–º #. –î–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ. –û–ø—è—Ç—å –∂–µ –µ—Å–ª–∏ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, 
 —Ç–æ –º—ã –ø–æ–ø–∞–¥–µ–º –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —è—á–µ–π–∫—É.'''

# ANOTHER WAY
# import numpy
#
# n = int(input())
# mas, mas1, mas2 = [], [], []
#
# for i in range(n):
#     mas.append(numpy.asarray(list(int(x) if int(x) > 0 else 99999 for x in list(input()))))
#     mas1.append(['*'] * n)
#     mas2.append(['-'] * n)
#
# if mas[0][0] == 99999 or mas[n - 1][n - 1] == 99999:
#     print('Impossible')
#     exit()
#
# for i in range(n):
#     for j in range(n):
#         if i == 0 and j == 0:
#             mas[i][j] = 0
#         elif i == 0:
#             mas[i][j] = mas[i][j - 1] + mas[i][j]
#             mas1[i][j] = '-'
#         elif j == 0:
#             mas[i][j] = mas[i - 1][j] + mas[i][j]
#             mas1[i][j] = '|'
#         else:
#             mas[i][j] = min(mas[i - 1][j], mas[i][j - 1]) + mas[i][j]
#             if mas[i - 1][j] < mas[i][j - 1]:
#                 mas1[i][j] = '|'
#             else:
#                 mas1[i][j] = '-'
#
# if mas[n - 1][n - 1] > 99999:
#     print('Impossible')
# else:
#     while i > 0 or j > 0:
#         mas2[i][j] = '#'
#         if mas1[i][j] == '-':
#             j -= 1
#         else:
#             i -= 1
#     mas2[0][0] = '#'
#
#     for i in range(n):
#         for j in range(n):
#             print(mas2[i][j], end='')
#         print()



'''–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ê–Ω—Ä–∏-–°–∫—Ä–æ–º–Ω—è–≥–æ–≤—Å–∫–æ–≥–æ
''''''–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª:
1,2,3,4,5,6,7,8,9,10,‚Ä¶1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \ldots
1,2,3,4,5,6,7,8,9,10,‚Ä¶–ü–µ—Ä–µ–≤–µ—Ä–Ω–µ–º –≤ –Ω–µ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª–∏–Ω—ã 111 (1)(1)(1), –∑–∞—Ç–µ–º –¥–ª–∏–Ω—ã 222 (2,3)(2, 3)(2,3), 
–∑–∞—Ç–µ–º –¥–ª–∏–Ω—ã 333 (4,5,6)(4, 5, 6)(4,5,6), –∑–∞—Ç–µ–º –¥–ª–∏–Ω—ã 444 (7,8,9,10)(7, 8, 9, 10)(7,8,9,10), –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. –ü–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
1,3,2,6,5,4,10,9,8,7,‚Ä¶1, 3, 2, 6, 5, 4, 10, 9, 8, 7, \ldots
1,3,2,6,5,4,10,9,8,7,‚Ä¶–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ nnn —á–ª–µ–Ω–æ–≤ –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–ª–µ–Ω–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–µ nnn —á–ª–µ–Ω–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤ —É—Å–ª–æ–≤–∏–∏ –∑–∞–¥–∞—á–∏, 
—Ä–∞–∑–¥–µ–ª—è—è –µ–µ —á–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–±–µ–ª–∞.'''

# def anri(num):
#     if num == 1:
#         return num
#     else:
#         l = [[0] * i for i in range(1,int(num/1.3))]
#         g = 1
#         for j in range(len(l)):
#             for m in range(j):
#                 l[j-1][m] = g
#                 g += 1
#         l1 = list()
#         for a in l:
#             a = sorted(a, reverse=True)
#             for b in a:
#                 l1.append(str(b))
#         st = ' '.join(l1[:num])
#         return st
#
# print(anri(int(input())))
# print(anri(9)) #1 3 2 6 5 4 10 9 8
# print(anri(1)) #1
# print(anri(100)) #1 3 2 6 5 4 10 9 8 7 15 14 13 12 11 21 20 19 18 17 16 28 27 26 25 24 23 22 36 35 34 33 32 31 30 29 45 44 43 42 41 40 39 38 37 55 54 53 52 51 50 49 48 47 46 66 65 64 63 62 61 60 59 58 57 56 78 77 76 75 74 73 72 71 70 69 68 67 91 90 89 88 87 86 85 84 83 82 81 80 79 105 104 103 102 101 100 99 98 97

# another way WORKING
# n = int(input())
# index, count = 1, 1
# result = []
# while(len(result) < n):
#     result += range(index, index-count, -1)
#     count += 1
#     index += count
# print(*result[:n])




'''–ö–ª—é—á–µ–≤–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é key_difference(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ —Å–ª–æ–≤–∞—Ä—è,
 –Ω–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–ª—é—á–µ–π –∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ –≤ –≤–∏–¥–µ 
 –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    added, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ –±—ã–ª–æ –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ, –Ω–æ –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º;
    deleted, –µ—Å–ª–∏ –∫–ª—é—á –±—ã–ª –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ, –Ω–æ –µ–≥–æ –Ω–µ –±—ã–ª–æ –≤–æ –≤—Ç–æ—Ä–æ–º;
    changed, –µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è;
    equal, –µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö, –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ç–∏–ø–µ –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ö–ª—é—á–∏ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–ª–æ–≤–∞—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ: —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è,
 –∑–∞—Ç–µ–º ‚Äî –≤—Ç–æ—Ä–æ–≥–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç. –ü–µ—Ä–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏ 'one', 'two' –∏ 'four', –≤—Ç–æ—Ä–æ–π ‚Äî 'two', 'zero' –∏ 'four'.
 –¢–æ–≥–¥–∞ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–ª–æ–≤–∞—Ä–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è-—Å–æ—Å—Ç–æ—è–Ω–∏—è:
    'one' ‚Äî 'deleted', —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–º;
    'two' ‚Äî 'changed', —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö, –Ω–æ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏;
    'four' ‚Äî 'equal', —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏;
    'zero' ‚Äî 'added', —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –í —Ç–µ—Å—Ç–∏—Ä—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Å–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é key_difference(), –Ω–æ –Ω–µ –∫–æ–¥, 
–≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–µ.
Sample Input 1:
dict1 = {'one': 'eon', 'two': 'two', 'four': 'True'}
dict2 = {'two': 'own', 'zero': '4', 'four': 'True'}
result = key_difference(dict1, dict2)
print(result)
Sample Output 1:
{'one': 'deleted', 'two': 'changed', 'four': 'equal', 'zero': 'added'}
Sample Input 2:
dict1 = {'one': 'eon', 'two': 'two', 'four': 'True'}
dict2 = {}
result = key_difference(dict1, dict2)
print(result)
Sample Output 2:
{'one': 'deleted', 'two': 'deleted', 'four': 'deleted'}'''

# def key_difference(dict1,dict2):
#     dict3 = dict()
#     for keys1 in dict1.keys():
#         if keys1 not in dict2:
#             dict3[keys1] = 'deleted'
#         if keys1 in dict2 and dict1[keys1] == dict2[keys1]:
#             dict3[keys1] = 'equal'
#         if keys1 in dict2 and dict1[keys1] != dict2[keys1]:
#             dict3[keys1] = 'changed'
#
#     for keys2 in dict2.keys():
#         if keys2 not in dict1:
#             dict3[keys2] = 'added'
#     return dict3


# another way
# def key_difference(dict1,dict2):
#     dict3 = dict()
#     for keys1 in dict1.keys():
#         if keys1 not in dict2:
#             dict3[keys1] = 'deleted'
#         if keys1 in dict2 and dict1[keys1] == dict2[keys1]:
#             dict3[keys1] = 'equal'
#         if keys1 in dict2 and dict1[keys1] != dict2[keys1]:
#             dict3[keys1] = 'changed'
#
#     for keys2 in dict2.keys():
#         if keys2 not in dict1:
#             dict3[keys2] = 'added'
#     return dict3


# {'one': 'deleted', 'two': 'changed', 'four': 'equal', 'zero': 'added'}
# dict1 = {'one': 'eon', 'two': 'two', 'four': 'True'}
# dict2 = {'two': 'own', 'zero': '4', 'four': 'True'}
# result = key_difference(dict1, dict2)
# print(result)

# Sample Input 2:
# dict1 = {'one': 'eon', 'two': 'two', 'four': 'True'}
# dict2 = {}
# result = key_difference(dict1, dict2)
# print(result)
# Sample Output 2:
# {'one': 'deleted', 'two': 'deleted', 'four': 'deleted'}'''

'''–•–æ–≤–∞—Ä–¥ –∏ –í–∏–Ω—Å —É–±–µ–≥–∞—é—Ç –æ—Ç –¥–µ–º–æ–Ω–∞ –∑–ª–æ–π –±–∞–±—É—à–∫–∏, –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–∏ —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–∏–∑–≤–∞–ª–∏. –†–∏—Ç—É–∞–ª –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–∞ –Ω—É–ª–µ–≤—ã—Ö –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö,
–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –±–∞–±—É—à–∫–∞ –ø–æ–≥–Ω–∞–ª–∞—Å—å –∑–∞ –Ω–∏–º–∏, –•–æ–≤–∞—Ä–¥ –æ—Ç–±–µ–∂–∞–ª –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É nnn, –∞ –í–∏–Ω—Å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É mmm, 
–ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ —É–±–µ–≥–∞—Ç—å –æ—Ç –Ω—É–ª–µ–≤–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é, –∞ –±–∞–±—É—à–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –¥–≤–∞ —Ä–∞–∑–∞ 
–±—ã—Å—Ç—Ä–µ–µ –Ω–∏—Ö.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–±–µ–∂–∞—Ç—å –±–∞–±—É—à–∫–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç–∏–≥–Ω—É—Ç—å –•–æ–≤–∞—Ä–¥–∞ –∏ –í–∏–Ω—Å–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –¥–≤–∞ —Ü–µ–ª—ã—Ö –Ω–µ–Ω—É–ª–µ–≤—ã—Ö —á–∏—Å–ª–∞ nnn –∏ mmm, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –•–æ–≤–∞—Ä–¥–∞ –∏ –í–∏–Ω—Å–∞,
–Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ —É—Å–ø–µ–ª–∏ –æ—Ç–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –±–∞–±—É—à–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–±–µ–∂–∞—Ç—å –±–∞–±—É—à–∫–∞, —á—Ç–æ–±—ã –Ω–∞—Å—Ç–∏–≥–Ω—É—Ç—å –∏—Ö.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –±–∞–±—É—à–∫–∞ –¥–æ–±–µ–∂–∏—Ç –¥–æ –•–æ–≤–∞—Ä–¥–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –±–∞–±—É—à–∫–∞ –±–µ–≥–∞–µ—Ç –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ –Ω–µ–≥–æ
, —Ç–æ –æ–Ω–∞ —Å –Ω—É–ª–µ–≤–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–±–µ–∂–∏—Ç –¥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 2 —Ä–æ–≤–Ω–æ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–∞–∫ –•–æ–≤–∞—Ä–¥ –ø–µ—Ä–µ–±–µ–∂–∏—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 1 –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É 2,
–∏ –ø–æ–∫–∞ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ, –í–∏–Ω—Å —Ç–∞–∫–∂–µ —É—Å–ø–µ–ª –æ—Ç–±–µ–∂–∞—Ç—å –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–ø–µ—Ä–µ–¥, –∑–Ω–∞—á–∏—Ç, —Ç–µ–ø–µ—Ä—å –º–µ–∂–¥—É –±–∞–±—É—à–∫–æ–π –∏ –í–∏–Ω—Å–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 2,
–∞ –∑–Ω–∞—á–∏—Ç –í–∏–Ω—Å –¥–æ–±–µ—Ä–µ—Ç—Å—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 4 –¥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 6 –∑–∞ —Ç–æ –∂–µ –≤—Ä–µ–º—è, —á—Ç–æ –∏ –±–∞–±—É—à–∫–∞ –¥–æ–±–µ–∂–∏—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 2 –¥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 6.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç. –ü–æ—Å–∫–æ–ª—å–∫—É –•–æ–≤–∞—Ä–¥ –∏ –í–∏–Ω—Å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç –±–∞–±—É—à–∫–∏,
–Ω–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –∑–∞ –∫–µ–º –ø–µ—Ä–≤—ã–º –ø–æ–≥–Ω–∞—Ç—å—Å—è. –î–æ–ø—É—Å—Ç–∏–º, –±–∞–±—É—à–∫–∞ –±—É–¥–µ—Ç –±–µ–∂–∞—Ç—å –∑–∞ –•–æ–≤–∞—Ä–¥–æ–º. –û–Ω —Å—Ç–æ–∏—Ç –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ ‚àí1, –∞ –∑–Ω–∞—á–∏—Ç, 
–∏—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –æ–Ω–∞ –ø–æ–π–º–∞–µ—Ç –µ–≥–æ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ ‚àí2-2‚àí2, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –æ–Ω–∞ —É–∂–µ –ø—Ä–æ–±–µ–∂–∞–ª–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 222 –∏ 
–ø–æ–∫–∞ –æ–Ω–∞ –±–µ–∂–∞–ª–∞ –∑–∞ –Ω–∏–º, –í–∏–Ω—Å —É—Å–ø–µ–ª –æ—Ç–±–µ–∂–∞—Ç—å –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É 222, –∏ –±–∞–±—É—à–∫–∞ –Ω–∞—Å—Ç–∏–≥–Ω–µ—Ç –µ–≥–æ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ 666, 
–ø–æ—Å–∫–æ–ª—å–∫—É –í–∏–Ω—Å—É –Ω—É–∂–Ω–æ –ø—Ä–æ–±–µ–∂–∞—Ç—å 444 –¥–æ —ç—Ç–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∞ –±–∞–±—É—à–∫–µ 888, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, 
–≤ –∏—Ç–æ–≥–µ –±–∞–±—É—à–∫–∞ –ø—Ä–æ–±–µ–∂–∏—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 8+2=10.
'''
'''Sample Input 1:
1 3
Sample Output 1:
6
Sample Input 2:
-1 1
Sample Output 2:
10
Sample Input 3:
-3 -6
Sample Output 3:
12'''

# def babka(s):
#     s1 = list(map(lambda x: int(x), s.split()))
#     bab = 0
#     if s1[0] < 0 and s1[1] < 0:
#         s1[0] = abs(s1[0])
#         s1[1] = abs(s1[1])
#     maxi = max(s1)
#     if s1[0] >= 0 and s1[1] >= 0:
#         while bab < maxi:
#             bab += 2
#             maxi += 1
#         return bab
#     else:
#         counter = 0
#         mini = min(s1)
#         while bab > mini:
#             bab -= 2
#             mini -= 1
#             counter += 2
#         counter += 2
#         while bab < maxi:
#             bab += 2
#             maxi += 1
#             counter += 2
#         return counter




# ANOTHER WAY WORKING
# a = list(map(int, input().split()))
# zayats1 = a[0]
# zayats2 = a[1]

# if zayats1 > 0 and zayats2 > 0 or zayats1 < 0 and zayats2 < 0:
#     print(max(abs(zayats1), abs(zayats2)) * 2)
# else:
#     if abs(zayats2) > abs(zayats1):
#         zmax = abs(zayats2)
#         zmin = abs(zayats1)
#     else:
#         zmax = abs(zayats1)
#         zmin = abs(zayats2)
#     result = 0
#     result += zmin * 2
#     result += (zmin * 3 + zmax) * 2
#     print(result)


#
# # print(babka(input()))
# print(babka('1 3'))
# print(babka('-1 1'))
# print(babka('-3 -6'))



'''–°–∞–º–æ–µ —Å–∫—É—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
–ó–∞—á–∞—Å—Ç—É—é –∏–∑-–∑–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –∑–∞–¥–∞—á–∏, –ø–æ—ç—Ç–æ–º—É –∏–Ω–æ–≥–¥–∞ –ª—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É–∫–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É–∫–≤ –≤ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–∞–ª–∏–Ω–¥—Ä–æ–º —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–æ ¬´rotavator¬ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç. –ò–∑ –±—É–∫–≤ a, b, a, b, q, t, –∏ d –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, abqba, 
–¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω–∞ 555. –ü–∞–ª–∏–Ω–¥—Ä–æ–º –±–æ–ª—å—à–µ–π –¥–ª–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è.
Sample Input 1:
ababqtd
Sample Output 1:
5
Sample Input 2:
bebebe
Sample Output 2:
5
Sample Input 3:
qaaaaaaaab
Sample Output 3:
9'''

# s = list(input())
# t = {}
# for c in s:
#     t[c] = t.get(c, 0) + 1
# sum = 0
# l = False
# for key, value in t.items():
#     if value % 2 == 1 or value == 1:
#         l = True
#     sum += value // 2
# print(sum * 2 + l)

'''–í –≥–æ—Ä–æ–¥–∫–µ BeeGeek, —á—Ç–æ–±—ã –≤—Å–µ –∂–∏—Ç–µ–ª–∏ –≤–∏–¥–µ–ª–∏—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ —á–∞—â–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω–∞ —É–ª–∏—Ü–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å–æ–±–æ–π 
–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—É—é –ø—Ä—è–º—É—é. –ù–∞ –Ω–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤, —É –∫–∞–∂–¥–æ–≥–æ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö, –µ—Å—Ç—å —Å–≤–æ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –∏ —Å–≤–æ–π —Ü–≤–µ—Ç (—Ü–≤–µ—Ç–∞ –¥–æ–º–æ–≤ –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è).
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–æ–º–∞–º–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞. 
–ï—Å–ª–∏ –¥–æ–º–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ—Ç, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ 000.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–º–æ–≤ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞. –ó–∞—Ç–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ 
–ø–æ–¥–∞—é—Ç—Å—è —Ü–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–º–æ–≤, —Ç–∞–∫ –∂–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–æ–º–∞–º–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞. –ï—Å–ª–∏ –¥–æ–º–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ—Ç, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ 000.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –º–µ–∂–¥—É –¥–≤—É–º—è –¥–æ–º–∞–º–∏ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–æ—Å—Ç—å –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –≤–∑—è—Ç–æ–µ —Å–æ –∑–Ω–∞–∫–æ–º –ø–ª—é—Å. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–æ–º–∞–º–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ 333 –∏ 777 —Ä–∞–≤–Ω–æ 444.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç. –ò–º–µ–µ–º –ø–∞—Ä—ã –¥–æ–º–æ–≤ —Ü–≤–µ—Ç–∞ r, w –∏ g:
    —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–æ–º–∞–º–∏ —Ü–≤–µ—Ç–∞ r —Ä–∞–≤–Ω–æ 21‚àí1=2021 - 1 = 2021‚àí1=20;
    —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–æ–º–∞–º–∏ —Ü–≤–µ—Ç–∞ w —Ä–∞–≤–Ω–æ 10‚àí6=410 - 6 = 410‚àí6=4;
    —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–æ–º–∞–º–∏ —Ü–≤–µ—Ç–∞ g —Ä–∞–≤–Ω–æ 22‚àí3=1922 - 3 = 1922‚àí3=19
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–≤–Ω–æ 202020.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç. –í—Å–µ –¥–æ–º–∞ –∏–º–µ—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç 000.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ –∏ –∏—Ö —Ü–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö —Ä–∞–≤–Ω–æ 100000100000100000 –∏ 100100100.
Sample Input 1:
1 3 5 6 10 21 22
r g b w w r g
Sample Output 1:
20
Sample Input 2:
1 2 3 4 5 6 7
green blue b r white dark key
Sample Output 2:
0
Sample Input 3:
2 5 10 11 16 17 18 20
r w g w g r w b
Sample Output 3:
15'''

# index = list(map(int, '2 5 10 11 16 17 18 20'.split()))
# color = 'r w g w g r w b'.split()
# print(index)
# print(color)
# # s = dict(zip(index, color))
# s = dict()
# for i in range(len(index)):
#     d = list()
#     d.append(index[i])
#     s[color[i]] = d
# print(s)
# h = '2 5 10 11 16 17 18 20'
# c = 'r w g w g r w b'
# houses = [int(i) for i in h.split()]
# colors = [i for i in c.split()]

# houses = [int(i) for i in input().split()]
# colors = [i for i in input().split()]
# distance = {}
# maxi = 0
#
# for key in range(len(colors)):
#     if colors[key] not in distance:
#         distance[colors[key]] = houses[key]
#     else:
#         maxi = max(maxi, houses[key] - distance[colors[key]])
# print(maxi)



'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞ –∫–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–∫,
 —á—Ç–æ–±—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤., –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 400000400000400000
 —Å–∏–º–≤–æ–ª–æ–≤.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –∏–∑ —É—Å–ª–æ–≤–∏—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç. –°—Ç—Ä–æ–∫—É abcabcabc –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ 333 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏: abc, abc –∏ abc.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —à–µ—Å—Ç–æ–π —Ç–µ—Å—Ç. –°—Ç—Ä–æ–∫—É bebebeb –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É bebebeb, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏—Å—Ö–æ–¥–Ω–æ–π.
 –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, be –∏–ª–∏ beb –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–∫–∏.
Sample Input 1:
abcabcabc
Sample Output 1:
3
Sample Input 2:
acdc
Sample Output 2:
1
Sample Input 3:
bbbbbb
Sample Output 3:
6
Sample Input 4:
abobaboabobabo
Sample Output 4:
2
Sample Input 5:
abobaboaaabobaboaa
Sample Output 5:
2
Sample Input 6:
bebebeb
Sample Output 6:
1'''

