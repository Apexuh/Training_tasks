
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã –¥–≤—É—Ö –º–∞—Ç—Ä–∏—Ü.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nnn –∏ mmm ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ö,
# –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã, –∑–∞—Ç–µ–º –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –¥–∞–ª–µ–µ —Å–ª–µ–¥—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ç–æ—Ä–æ–π –º–∞—Ç—Ä–∏—Ü—ã.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é –º–∞—Ç—Ä–∏—Ü—É, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 2 4
# 1 2 3 4
# 5 6 7 1
# 3 2 1 2
# 1 3 1 3
# Sample Output 1:
# 4 4 4 6
# 6 9 8 4


# x = input().split()
# n, m = int(x[0]), int(x[1])
# k = [input().split() for i in range(n)]
# f = [input().split() for i in range(n)]
# v = [[0 for i in range(m)] for j in range(n)]
# for i in range(n):
#     for j in range(m):
#         v[i][j] = int(k[i][j]) + int(f[i][j])
# [print(*i) for i in v]

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç –¥–≤–µ –º–∞—Ç—Ä–∏—Ü—ã.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nnn –∏ mmm ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø–µ—Ä–≤–æ–π –º–∞—Ç—Ä–∏—Ü–µ,
# –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã, –∑–∞—Ç–µ–º –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞. –î–∞–ª–µ–µ —Å–ª–µ–¥—É—é—Ç —á–∏—Å–ª–∞ mmm –∏ kkk ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
# –≤—Ç–æ—Ä–æ–π –º–∞—Ç—Ä–∏—Ü—ã –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ç–æ—Ä–æ–π –º–∞—Ç—Ä–∏—Ü—ã.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é –º–∞—Ç—Ä–∏—Ü—É, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 2 2
# 1 2
# 3 2
#
# 2 2
# 3 2
# 1 1

# 3 2
# 2 5
# 6 7
# 1 8
#
# 2 3
# 1 2 1
# 0 1 0


# x = input().split()
# n1, m1 = int(x[0]), int(x[1])
# k1 = [input().split() for i in range(n1)]
# v = input()
# y = input().split()
# n2, m2 = int(y[0]), int(y[1])
# k2 = [input().split() for i in range(n2)]
# kf = [[0 for i in range(m2)] for j in range(n1)]
#
# for i in range(n1):
#     for j in range(m2):
#         c = 0
#         for q in range(m1):
#             c += int(k1[i][q]) * int(k2[q][j])
#         kf[i][j] = c
# [print(*i) for i in kf]

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤–æ–¥–∏—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ mmm-—É—é —Å—Ç–µ–ø–µ–Ω—å.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ,
# –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã, –∑–∞—Ç–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ mmm.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é –º–∞—Ç—Ä–∏—Ü—É, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 3
# 1 2 3
# 4 5 6
# 7 8 9
# 2
# Sample Output 1:
# 30 36 42
# 66 81 96
# 102 126 150

# x = int(input())
# k = [input().split() for _ in range(x)]
# multi = int(input())
# k_rev = [[0 for _ in range(x)] for _ in range(x)]
# k1 = [[0 for _ in range(x)] for _ in range(x)]
# k_fin = k
# for p in range(x):
#     for o in range(x):
#         k_rev[p][o] = k[o][p]
#
# for _ in range(multi - 1):
#     for i in range(x):
#         for j in range(x):
#             c = 0
#             for q in range(x):
#                 c += int(k_fin[i][q]) * int(k_rev[j][q])
#             k1[i][j] = c
#     for i in range(x):
#         for j in range(x):
#             k_fin[i][j] = k1[i][j]
#
# [print(*u) for u in k_fin]

#  Sample Input 1:
# a b c d e f g h i j k l m n
# 3
# Sample Output 1:
# [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
#
# k = input().split()
# x = int(input())
# l = []
# for i in range(x):
#     l.append(k[i::x])
# print(l)

# –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é
#  Sample Input 1:
# 3
# 1 4 5
# 6 7 8
# 1 1 6
# Sample Output 1:
# 8
# x = int(input())
# k = [input().split() for _ in range(x)]
#
# maxi = int(k[-1][-1])
# for row in range(x):
#     for col in range(x):
#         if row >= x - 1 - col:
#             if int(k[row][col]) > maxi:
#                  maxi = int(k[row][col])
# print(maxi)

# —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É
# Sample Input 1:
# 3
# 1 2 3
# 4 5 6
# 7 8 9
# Sample Output 1:
# 1 4 7
# 2 5 8
# 3 6 9

# x = int(input())
# k = [input().split() for _ in range(x)]
# m = [[0]*x for _ in range(x)]
# for i in range(x):
#     for j in range(x):
#         m[i][j] = k[j][i]
# print(m)

#  Sample Input 1:
# 5
# Sample Output 1:
# * . * . *
# . * * * .
# * * * * *
# . * * * .
# * . * . *

# x = int(input())
# m = [['.'.ljust(2) for _ in range(x)] for _ in range(x)]
# for i in range(x):
#     for j in range(x):
#         if i == j:
#             m[i][j] = '*'.ljust(2)
#         if i == x - 1 - j:
#             m[i][j] = '*'.ljust(2)
#         if j == int(x / 2) or i == int(x / 2):
#             m[i][j] = '*'.ljust(2)
# [print(*q) for q in m]

#  Sample Input 1:
# 3
# 0 3 10
# 4 9 3
# 7 4 0
# Sample Output 1:
# YES
# n = int(input())
# k = [input().split() for i in range(n)]
# one, two = [], []
# l = [[0] * n for i in range(n)]
#
# for i in range(n):
#     for j in range(n):
#         l[i][j] = k[i][-j-1]
# print(l)
# one, two = [], []
# for col in range(n):
#     for row in range(n):
#         if col > row:
#             one.append(l[col][row])
#         if col > row:
#             two.append(l[row][col])
# if one == two:
#     print('YES')
# else:
#     print('NO')


# –õ–∞—Ç–∏–Ω—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ nnn –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–º n√ónn \times nn√ón,
# –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 111 –¥–æ nnn.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ,
# –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã: nnn —Å—Ç—Ä–æ–∫, –ø–æ nnn —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ YES, –µ—Å–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∞—Ç–∏–Ω—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º, –∏ —Å–ª–æ–≤–æ NO, –µ—Å–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
#
# Sample Input 1:
#
# 4
# 2 3 4 1
# 3 4 1 2
# 4 1 2 3
# 1 2 3 4
#
# Sample Output 1:
#
# YES

# n = int(input())
# k = [input().split() for i in range(n)]
# l = [i+1 for i in range(n)]
# transp = [[0] * n for i in range(n)]
# c = 0
# for i in range(n):
#     for j in range(n):
#         transp[i][j] = int(k[j][i])
#     transp[i].sort()
# for i in range(n):
#     for j in range(n):
#         k[i][j] = int(k[i][j])
#     k[i].sort()
# for i in range(n):
#     if k[i] != l or transp[i] != l:
#         c += 1
# for i in range(n):
#     if transp[i] != l:
#         c += 1
# if c == 0:
#     print('YES')
# else:
#     print('NO')

# –ù–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ 8√ó88 \times 88√ó8 —Å—Ç–æ–∏—Ç —Ñ–µ—Ä–∑—å. –û—Ç–º–µ—Ç—å—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–µ—Ä–∑—è –Ω–∞ –¥–æ—Å–∫–µ –∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏,
# –∫–æ—Ç–æ—Ä—ã–µ –±—å–µ—Ç —Ñ–µ—Ä–∑—å. –ö–ª–µ—Ç–∫—É, –≥–¥–µ —Å—Ç–æ–∏—Ç —Ñ–µ—Ä–∑—å, –æ—Ç–º–µ—Ç—å—Ç–µ –±—É–∫–≤–æ–π Q, –∫–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—å–µ—Ç —Ñ–µ—Ä–∑—å, –æ—Ç–º–µ—Ç—å—Ç–µ —Å–∏–º–≤–æ–ª–∞–º–∏ *,
# –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ—á–∫–∞–º–∏.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–µ—Ä–∑—è –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ –≤ —à–∞—Ö–º–∞—Ç–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏ (—Ç–æ –µ—Å—Ç—å –≤ –≤–∏–¥–µ e4,
# –≥–¥–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ (–±—É–∫–≤–∞ –æ—Ç a –¥–æ h, —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ), –∑–∞—Ç–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (—Ü–∏—Ñ—Ä–∞ –æ—Ç 111 –¥–æ 888, —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)).
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–±–µ–ª–∞–º–∏.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# c4
# Sample Output 1:
# . . * . . . * .
# . . * . . * . .
# * . * . * . . .
# . * * * . . . .
# * * Q * * * * *
# . * * * . . . .
# * . * . * . . .
# . . * . . * . .
# abs(x1 - x2) == abs(y1 - y2) or x1 == x2 or y1 == y2
# xy = input()
# k = [['.'] * 8 for i in range(8)]
# y1 = 'abcdefgh'.index(xy[0])
# x1 = '87654321'.index(xy[1])
# for x2 in range(8):
#     for y2 in range(8):
#         if abs(x1 - x2) == abs(y1 - y2) or x1 == x2 or y1 == y2:
#             k[x2][y2] = '*'
# k[x1][y1] = 'Q'
# [print(*v) for v in k]


# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,
# –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ónn \times nn√ón –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É:
#     –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å —á–∏—Å–ª–æ 000;
#     –Ω–∞ –¥–≤—É—Ö –¥–∏–∞–≥–æ–Ω–∞–ª—è—Ö, –ø—Ä–∏–ª–µ–≥–∞—é—â–∏—Ö –∫ –≥–ª–∞–≤–Ω–æ–π, —á–∏—Å–ª–æ 111;
#     –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–≤—É—Ö –¥–∏–∞–≥–æ–Ω–∞–ª—è—Ö —á–∏—Å–ª–æ 222, –∏ —Ç.–¥.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 5
# Sample Output 1:
# 0 1 2 3 4
# 1 0 1 2 3
# 2 1 0 1 2
# 3 2 1 0 1
# 4 3 2 1 0

# n = int(input())
# k = [[0] * n for _ in range(n)]
#
# for i in range(n):
#     for j in range(n):
#         k[i][j] = abs(i - j)
# [print(*q) for q in k]

# countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Spain', 'Cameroon')
# number = country.count('Spain')
# print(number)

# numbers1 = (1, 2, 3)
# numbers2 = (6,)
# numbers3 = (7, 8, 9, 10, 11, 12, 13)
# numb1 = tuple(list(numbers1*2 + numbers2*9 + numbers3))
# print(numb1)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫,
# —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∫–æ—Ä—Ç–µ–∂–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ tuples, –Ω–µ –º–µ–Ω—è—è –ø–æ—Ä—è–¥–∫–∞ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
# tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
# non_empty_tuples = [i for i in tuples if len(i) >0]
#
# print(non_empty_tuples)


# tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
# new_tuples = [j[:-1] + (100,) for j in tuples]
# print(new_tuples)

# poets = [
#     ('–ï—Å–µ–Ω–∏–Ω', 13),
#     ('–¢—É—Ä–≥–µ–Ω–µ–≤', 14),
#     ('–ú–∞—è–∫–æ–≤—Å–∫–∏–π', 28),
#     ('–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', 20),
#     ('–§–µ—Ç', 15)]
#
# for i in range(len(poets)):
#     for j in range(i+1, len(poets)):
#         if poets[i][1] > poets[j][1]:
#             poets[i], poets[j] = poets[j], poets[i]
#
# print(poets[0])
# print(poets[-1])

# poets = [
#     ('–¢—É—Ä–≥–µ–Ω–µ–≤', 14),
#     ('–ï—Å–µ–Ω–∏–Ω', 13),
#     ('–ú–∞—è–∫–æ–≤—Å–∫–∏–π', 28),
#     ('–§–µ—Ç', 15),
#     ('–õ–µ—Ä–º–æ–Ω—Ç–æ–≤', 20)]
#
# for i in range(len(poets)):
#     for j in range(i+1, len(poets)):
#         if poets[i] > poets[j]:
#             poets[i], poets[j] = poets[j], poets[i]
#
# print(poets[0])
# print(poets[-1])

# numbers = (2, 3, 5, 7, -11, 13, 17, 19, 23, 29, 31, -6, 41, 43, 47, 53, 59, 61, -96, 71, 1000, -1)
# total = 1
# for i in numbers:
#     total *= i
# print(total)

# –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–±–æ–ª—ã –∏–º–µ–µ—Ç –≤–∏–¥ y =ax2+bx+cy =ax^2 + bx + cy =ax2+bx+c, –≥–¥–µ a‚â†0a \neq 0aÓÄ†=0.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º a,b,ca, b, ca,b,c –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –≤–µ—Ä—à–∏–Ω—É –ø–∞—Ä–∞–±–æ–ª—ã.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —Ç—Ä–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω—ã –ø–∞—Ä–∞–±–æ–ª—ã.

# def rock(a,b,c):
#     x = - b / (2 * a)
#     y = (4 * a * c - b ** 2)/ (4 * a)
#     return (x, y)
#
# print(rock(int(input()),int(input()),int(input())))

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ö–æ—Ä–æ—à–∏—Å—Ç–æ–≤ –∏ –æ—Ç–ª–∏—á–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn, –¥–∞–ª–µ–µ —Å–ª–µ–¥—É–µ—Ç nnn —Å—Ç—Ä–æ–∫ —Å —Ñ–∞–º–∏–ª–∏–µ–π —à–∫–æ–ª—å–Ω–∏–∫–∞ –∏ –µ–≥–æ –æ—Ü–µ–Ω–∫–æ–π –Ω–∞ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ –∏ –æ—Ü–µ–Ω–∫–∞–º–∏ —É—á–µ–Ω–∏–∫–æ–≤ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ.
# –ó–∞—Ç–µ–º —Å–ª–µ–¥—É–µ—Ç –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ –∏ –æ—Ü–µ–Ω–∫–∞–º–∏ —Ö–æ—Ä–æ—à–∏—Å—Ç–æ–≤ –∏ –æ—Ç–ª–∏—á–Ω–∏–∫–æ–≤ (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ).
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û—Ü–µ–Ω–∫–∞ —É—á–µ–Ω–∏–∫–∞ ‚Äì —ç—Ç–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 111 –¥–æ 555.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤ –∫–ª–∞—Å—Å–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–æ—Ä–æ—à–∏—Å—Ç ‚Äì –æ–±–ª–∞–¥–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∫–∏ 444, –∏–ª–∏ –æ—Ç–ª–∏—á–Ω–∏–∫ ‚Äì –ø–æ–ª—É—á–∏–≤—à–∏–π 555.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 3
# –ì—É–µ–≤ 3
# –ß–∞–Ω–∏–µ–≤ 5
# –ë–∞—Ä—Å—É–∫–æ–≤ 2
# Sample Output 1:
# –ì—É–µ–≤ 3
# –ß–∞–Ω–∏–µ–≤ 5
# –ë–∞—Ä—Å—É–∫–æ–≤ 2
#
# –ß–∞–Ω–∏–µ–≤ 5

# n = int(input())
# l = [tuple(input().split()) for _ in range(n)]
# [print(*i) for i in l]
# print()
# [print(*i) for i in l if int(i[1]) > 3]


# Stepik
#
# 6.3 –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä—Ç–µ–∂–∞–º–∏. –ß–∞—Å—Ç—å 2
# 14 –∏–∑ 15 —à–∞–≥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ
# 36 –∏–∑ 41 –±–∞–ª–ªa  –ø–æ–ª—É—á–µ–Ω–æ
# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¢—Ä–∏–±–æ–Ω–∞—á—á–∏

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ nnn —á–∏—Å–µ–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¢—Ä–∏–±–æ–Ω–∞—á—á–∏.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ —á–∏—Å–ª–æ n‚Äâ (n‚â§100)n\,  (n \le 100)n (n‚â§100) ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–ª–µ–Ω–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —á–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¢—Ä–∏–±–æ–Ω–∞—á—á–∏, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¢—Ä–∏–±–æ–Ω–∞—á—á–∏ ‚Äì –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –≥–¥–µ –∫–∞–∂–¥–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —Å—É–º–º–æ–π —Ç—Ä–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö:
# 1,‚Äâ1, ‚Äâ1,‚Äâ 3,‚Äâ 5,‚Äâ 9,‚Äâ 17,‚Äâ 31,‚Äâ 57,‚Äâ 105 ‚Ä¶1, \,
# 1,  \, 1, \,  3, \,  5, \,  9, \,  17, \,  31, \,  57, \,  105 \ldots
# 1,1, 1, 3, 5, 9, 17, 31, 57, 105 ‚Ä¶
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 10
#
# Sample Output 1:
#
# 1 1 1 3 5 9 17 31 57 105


# n = int(input())
# f1, f2, f3 = 1, 1, 1
# for i in range(n):
#     print(f1, end=' ')
#     f1, f2 ,f3 = f2, f3, f1 + f2 +f3


# import matplotlib.pyplot as plt
# from matplotlib_venn import venn3
#
# venn3(subsets=(17, 10, 2, 6, 3, 1, 3), set_labels=("math", "physics", "informatics"))
# plt.show()

# –ù–∞ –ª–µ—Ç–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª–∞—Ö –¢–∏–º—É—Ä –∏ —É—á–µ–Ω–∏–∫–∏ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã BEEGEEK —Ä–µ—à–∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ nnn —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã –ø–æ–µ—Ö–∞–ª–∏
# –æ—Ç–¥—ã—Ö–∞—Ç—å –Ω–∞ –º–æ—Ä–µ, mmm —É—á–µ–Ω–∏–∫–æ–≤ —Å—ä–µ–∑–¥–∏–ª–∏ –≤ –¥–µ—Ä–µ–≤–Ω—é, –∞ kkk —É—á–µ–Ω–∏–∫–æ–≤ —Å—Ö–æ–¥–∏–ª–∏ –≤ –≥–æ—Ä—ã. –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –∏ –≤ –¥–µ—Ä–µ–≤–Ω–µ,
# –∏ –Ω–∞ –º–æ—Ä–µ –±—ã–ª–∏ xxx —É—á–µ–Ω–∏–∫–æ–≤, –∞ –≤ –¥–µ—Ä–µ–≤–Ω–µ –∏ –≤ –≥–æ—Ä–∞—Ö ‚Äî yyy —É—á–µ–Ω–∏–∫–æ–≤. –ü–æ–±—ã–≤–∞—Ç—å –∏ –≤ –≥–æ—Ä–∞—Ö, –∏ –Ω–∞ –º–æ—Ä–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏–∫–æ–º—É.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–µ–Ω–∏–∫–æ–≤ –≤ —à–∫–æ–ª–µ, –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–≥ –ø–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ —Ç—Ä–∏ –º–µ—Å—Ç–∞ —Å—Ä–∞–∑—É,
# –∞ zzz —É—á–µ–Ω–∏–∫–æ–≤ –ø–∏—Å–∞–ª–∏ –î–í–ò –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ú–ì–£, –∏ –Ω–∏–∫—É–¥–∞ –Ω–µ –µ–∑–¥–∏–ª–∏.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–∞ n,m,k,x,y,zn, m, k, x, y, zn,m,k,x,y,z, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input:
# 14
# 16
# 5
# 10
# 3
# 2
#
# Sample Output:
# 24

# k = [int(input()) for _ in range(6)]
# print(k[0] + k[1] + k[2] + k[5] - k[3] - k[4])

# –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ nnn —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É, mmm —É—á–µ–Ω–∏–∫–æ–≤ ‚Äî –≤—Ç–æ—Ä—É—é, kkk —É—á–µ–Ω–∏–∫–æ–≤ ‚Äî —Ç—Ä–µ—Ç—å—é.
# –¢–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ xxx —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–æ—á–ª–∏ –ø–µ—Ä–≤—É—é –∏–ª–∏ –≤—Ç–æ—Ä—É—é, –∏–ª–∏ –æ–±–µ —ç—Ç–∏ –∫–Ω–∏–≥–∏, yyy —É—á–µ–Ω–∏–∫–æ–≤ ‚Äî –≤—Ç–æ—Ä—É—é –∏–ª–∏ —Ç—Ä–µ—Ç—å—é,
# –∏–ª–∏ –æ–±–µ, zzz —É—á–µ–Ω–∏–∫–æ–≤ ‚Äî –ø–µ—Ä–≤—É—é –∏ —Ç—Ä–µ—Ç—å—é, –∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –¥–≤—É—Ö –∫–Ω–∏–≥.
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ ttt —É—á–µ–Ω–∏–∫–æ–≤. –í—Å–µ–≥–æ –≤ 101010 –∫–ª–∞—Å—Å–µ —É—á–∏—Ç—Å—è aaa —É—á–µ–Ω–∏–∫–æ–≤.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤:
#
#     –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–∏–≥—É;
#     –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –¥–≤–µ –∫–Ω–∏–≥–∏;
#     –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–∞ n,m,k,x,y,z,t,an, m, k, x, y, z, t, an,m,k,x,y,z,t,a, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç—Ä–∏ —á–∏—Å–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
#
# Sample Input:
#
# 19
# 18
# 22
# 32
# 33
# 35
# 2
# 50
#
# Sample Output:
#
# 29
# 12
# 7

# k = [int(input()) for _ in range(8)]
# n, m, k, x, y, z, t, all = k[0], k[1], k[2], k[3], k[4], k[5], k[6], k[7]
# s1 = n + m - x - t
# s2 = m + k - y - t
# s3 = n + k - z - t
# sum_alone = (n - s1 - s3 - t) + (m - s1 - s2 - t) + (k - s3 - s2 - t)
# sum_two = s1 + s2 + s3
# sum_no_one = all - (sum_alone + s1 + s2 + s3 + t)
# print(sum_alone)
# print(sum_two)
# print(sum_no_one)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —ç–ª–µ–º–µ–Ω—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–∞ fruits, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ,
# –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ).
# fruits = {'apple', 'banana', 'cherry', 'avocado', 'pineapple', 'apricot', 'banana', 'avocado', 'grapefruit'}
# fruits_sorted = sorted(fruits, reverse = True)
# print(*fruits_sorted, sep='\n')

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ó–∞–¥–∞—á—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É –∫–æ–¥–∞.
# print(len(set(input())))

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ü–∏—Ñ—Ä.
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –≤ –µ–µ –∑–∞–ø–∏—Å–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ —Ü–∏—Ñ—Ä –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è?
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ü–∏—Ñ—Ä
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ —Ü–∏—Ñ—Ä –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 1093482
# Sample Output 1:
# YES

# l = [i for i in input()]
# s = set(l)
# if len(l) == len(s):
#     print('YES')
# else:
#     print('NO')

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Ü–∏—Ñ—Ä. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–µ—Ä–Ω–æ –ª–∏,
# —á—Ç–æ –≤ –∑–∞–ø–∏—Å–∏ —ç—Ç–∏—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –¥–µ—Å—è—Ç—å —Ü–∏—Ñ—Ä?
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Ü–∏—Ñ—Ä.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –≤ –∑–∞–ø–∏—Å–∏ —ç—Ç–∏—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –¥–µ—Å—è—Ç—å —Ü–∏—Ñ—Ä, –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 12387
# 94230
# Sample Output 1:
# NO
# Sample Input 2:
# 1930
# 2465748
# Sample Output 2:
# YES   # —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 9

# num_one = [q for q in input()]
# num_two = [q for q in input()]
# num_all = set(num_one + num_two)
# if len(num_all) == 10:
#     print('YES')
# else:
#     print('NO')

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Ü–∏—Ñ—Ä. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å,
–≤–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã —Ü–∏—Ñ—Ä?
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Ü–∏—Ñ—Ä.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã —Ü–∏—Ñ—Ä –∏ NO, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
0943
9304
Sample Output 1:
YES'''
# s1 = sorted(set(input()))
# s2 = sorted(set(input()))
# if s1 == s2:
#     print('YES')
# else:
#     print('NO')
# import string
# import turtle
# from functools import reduce

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ç—Ä–µ—Ö —Å–ª–æ–≤.
 –í–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å–ª–æ–≤ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–∞–±–æ—Ä –±—É–∫–≤?
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ç—Ä–µ—Ö —Å–ª–æ–≤.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å–ª–æ–≤ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–∞–±–æ—Ä –±—É–∫–≤ –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
–∞–≤—Ç–æ—Ä —Ç–æ–≤–∞—Ä –æ—Ç–≤–∞—Ä
Sample Output 1:
YES'''

# l = [set(i) for i in input().split()]
# if l[0] == l[1] == l[2]:
#     print('YES')
# else:
#     print('NO')

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nnn ‚Äì –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤. –î–∞–ª–µ–µ –∏–¥—É—Ç nnn —Å—Ç—Ä–æ–∫ —Å —Å–ª–æ–≤–∞–º–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
3
–¢–∏–º—É—Ä
Beegeek
–ê–Ω–∞–Ω–ê—Å
Sample Output 1:
5
4
3'''  # –ø–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö

# n = int(input())
# l = [len(set(input().lower())) for _ in range(n)]
# print(*l,sep='\n')

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nnn ‚Äì –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤. –î–∞–ª–µ–µ –∏–¥—É—Ç nnn —Å—Ç—Ä–æ–∫ —Å–æ —Å–ª–æ–≤–∞–º–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äì –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ö –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
5
aAa
bB
ccc
dDdd
ppppP
Sample Output 1:
5'''

# n = int(input())
# s = set()
# l = [s.update(input().lower()) for i in range(n)]
# print(len(s))

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äì –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–æ–≤–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∏–¥—É—â–∏—Ö –ø–æ–¥—Ä—è–¥, —Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –æ–¥–Ω–∏–º
 –∏–ª–∏ –±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –ø—Ä–æ–±–µ–ª–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ó–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è .,;:-?! –ø—Ä–µ–Ω–µ–±—Ä–µ–≥–∞–µ–º.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
Milk is white and so is glue, Ghosts are white and they say BOO!
Sample Output 1:
11'''

# word = input()
# s = set()
# l = [s.add(i.strip('.,;:-?!').lower()) for i in word.split()]
# print(len(s))

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —á–∏—Å–ª–∞. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ YES 
(–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ), –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ —Ä–∞–Ω–µ–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ NO, –µ—Å–ª–∏ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –≤ —á–∏—Å–ª–∞—Ö –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1 1 2 2 5 5 5 5 6 7 8
Sample Output 1:
NO
YES
NO
YES
NO
YES
YES
YES
NO
NO
NO'''

# l = input().split()
# s = set()
# for i in l:
#     if int(i) in s:
#         print('YES')
#     else:
#         print('NO')
#         s.add(int(i))

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn, –∞ –∑–∞—Ç–µ–º nnn —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –æ–±—â–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è —É –≤—Å–µ—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n‚â•1n \ge 1n‚â•1, –∞ –∑–∞—Ç–µ–º nnn —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏. –ï—Å–ª–∏ –æ–±—â–∏—Ö —Ü–∏—Ñ—Ä –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
4
12345
236
3452222
9302
Sample Output 1:
2 3
'''
# n = int(input())
# k = [set(input()) for _ in range(n)]
# print(*sorted(set(k.pop()).intersection(*k)))

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é, –µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —á–∏—Å–ª–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –≤ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –µ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã –∏ NO –µ—Å–ª–∏ –Ω–µ—Ç.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
114
223
Sample Output 1:
NO'''

# n = [set(input()) for _ in range(2)]
# if len(n[0].intersection(n[1]))>0:
#     print('YES')
# else:
#     print('NO')

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤—Ö–æ–¥—è—Ç 
–ª–∏ –≤ –∑–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –≤—Å–µ —Ü–∏—Ñ—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ—Å—è –≤ –∑–∞–ø–∏—Å–∏ –≤—Ç–æ—Ä–æ–≥–æ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞, —Ç–æ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä) —á–∏—Å–ª–∞ –∏–ª–∏ –Ω–µ—Ç.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –≤ –∑–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –≤—Ö–æ–¥—è—Ç –≤—Å–µ —Ü–∏—Ñ—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ—Å—è –≤ –∑–∞–ø–∏—Å–∏ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞ –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
123456789
657
Sample Output 1:
YES'''

# set1 = set(input())
# set2 = set(input())
# if set1 > set2:
#     print('YES')
# else:
#     print('NO')

'''–î–∞–Ω—ã –ø–æ 101010-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫,
–∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∏ —É –ø–µ—Ä–≤–æ–≥–æ –∏ —É –≤—Ç–æ—Ä–æ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤, –Ω–æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—á–µ–Ω–∏–∫–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ (–æ—Ü–µ–Ω–∫–∏ –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ).
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û—Ü–µ–Ω–∫–∞ —É—á–µ–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 000 –¥–æ 101010 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1 5 4 2 5 6 6 2 3 3 5 2
2 3 5 1 2 1 2 6 7 1 1 6
1 4 6 9 8 7 0 9 0 9 8 10
Sample Output 1:
5 3 2'''
#
# set1, set2, set3 = set(input().split()), set(input().split()), set(input().split())
# print(*sorted((set1 & set2)-set3, key=int,reverse=True))


'''–î–∞–Ω—ã –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫,
–∏–º–µ—é—â–∏—Ö—Å—è —É —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ, —á–µ–º —É –¥–≤—É—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ (–æ—Ü–µ–Ω–∫–∏ –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ).
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û—Ü–µ–Ω–∫–∞ —É—á–µ–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 000 –¥–æ 101010 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1 5 4 2 5 6 6 2 3 3 5 2
2 3 5 10 2 10 2 6 7 10 10 6
1 4 6 9 8 7 0 9 0 9 8 10
Sample Output 1:
0 1 2 3 4 5 7 8 9 10'''

# set1, set2, set3 = set(input().split()), set(input().split()), set(input().split())
# print(*sorted((set1 | set2 | set3)-((set1 & set2) & set3), key=int))

'''–î–∞–Ω—ã –ø–æ 101010-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
—Ç—Ä–µ—Ç—å–µ–≥–æ —É—á–µ–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–∏ —É –ø–µ—Ä–≤–æ–≥–æ, –Ω–∏ —É –≤—Ç–æ—Ä–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ (–æ—Ü–µ–Ω–∫–∏ –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ).
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û—Ü–µ–Ω–∫–∞ —É—á–µ–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 000 –¥–æ 101010 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1 5 4 2 5 6 6 2 3 3 5 2
2 3 5 1 2 1 2 6 7 1 1 6
1 4 6 9 8 7 0 9 0 9 8 10
Sample Output 1:
10 9 8 0'''

# set1, set2, set3 = set(input().split()), set(input().split()), set(input().split())
# print(*sorted(set3 - (set1 | set2), key=int, reverse=True))

'''–î–∞–Ω—ã –ø–æ 101010-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –±–∏–æ–ª–æ–≥–∏–∏ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫, –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ (–æ—Ü–µ–Ω–∫–∏ –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ).
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û—Ü–µ–Ω–∫–∞ —É—á–µ–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 000 –¥–æ 101010 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1 5 4 2 5 6 6 2 3 3 5 2
2 3 5 1 2 1 2 6 7 1 1 6
1 4 6 8 8 7 0 6 0 3 8 1
Sample Output 1:
9 10'''
# setx = set([str(i) for i in range(11)])
# set1, set2, set3 = set(input().split()), set(input().split()), set(input().split())
# print(*sorted(setx - (set1|set2|set3),key=int))

'''–ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ items.
–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–º –≤–∏–¥–µ, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ ‚Äì —á–∏—Å–ª–∞, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ ‚Äì —Å—Ç—Ä–æ–∫–∏, –ø—Ä–∏ —ç—Ç–æ–º —Å—Ç—Ä–æ–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å –∫–∞–∫ —á–∏—Å–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–º –≤–∏–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
print(*sorted(myset))'''
# items = [10, '30', 30, 10, '56', 34, '12', 90, 89, 34, 45, '67', 12, 10, 90, 23, '45', 56, '56', 1, 5, '6', 5]
# set1 = {int(i) for i in items}
# print(*sorted(set1))

'''–ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ
—Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) —Å–ø–∏—Å–∫–∞ words. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.'''

# words = ['Plum', 'Grapefruit', 'apple', 'orange', 'pomegranate', 'Cranberry', 'lime', 'Lemon', 'grapes', 'persimmon', 'tangerine', 'Watermelon', 'currant', 'Almond']
# set1 = {i[0].lower() for i in words}
# print(*sorted(set1))

'''–ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) 
—Å—Ç—Ä–æ–∫–∏ sentence. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.'''

# sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
# for i in sentence:
#     if i in '.,;:-?!)()':
#         sentence = sentence.replace(i, '')
# l = set(sentence.lower().split())
# print(*sorted(l))

'''–ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ,
—Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞  —Å—Ç—Ä–æ–∫–∏ sentence –¥–ª–∏–Ω–æ—é –º–µ–Ω—å—à–µ 444 —Å–∏–º–≤–æ–ª–æ–≤. 
–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å–ª–æ–≤–∞–º.'''
# sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
#
# set1 = {i.strip('.,;:-?!)(').lower() for i in sentence.split() if len(i.strip('.,;:-?!)(')) < 4}
# print(*sorted(set1))


# –ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –≤—ã–±—Ä–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ files —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ c —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–º–µ–Ω –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π.
# –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤—ã–≤–µ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º, –≤—Å–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ï—Å–ª–∏ –±—ã —Å–ø–∏—Å–æ–∫ files —Å–æ–¥–µ—Ä–∂–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤:

# files = ['python.png', 'qwerty.py', 'Python.PNg', 'apple.pnG', 'zebra.PNG',  'solution.Py', 'stepik.org', 'kotlin.ko', 'github.git', 'ZeBrA.PnG']

# —Ç–æ –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª –±—ã:
# apple.png python.png zebra.png

# set1 = {i.lower() for i in files if '.png' in i.lower()}
# print(*sorted(set1))

# set1 = {'p'}
# set2 = {'a', 't', 'f'}
#
# print(set1 - set2)


'''–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
–£—á–∏—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–µ –∏ –ø–æ–ª—É—á–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã: –∏–∑ nnn —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ —É mmm –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—ä–µ–ª–∞ —Å–æ–±–∞–∫–∞,
—É kkk –æ—Ç–∫–ª—é—á–∏–ª–∏ —Å–≤–µ—Ç, –∞ ppp —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ—Å—Ç–∏–≥–ª–∏ –æ–±–∞ –Ω–µ—Å—á–∞—Å—Ç—å—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤—ã–ø–æ–ª–Ω–∏–ª–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–∞ n,m,k,p –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input:
35
20
10
3
Sample Output:
8'''
# n, m, k, p = int(input()), int(input()), int(input()), int(input())
# print(n-(m + k-p))

'''–ù–∞ —Å–ø—É—Ç–Ω–∏–∫–µ ¬´–í–æ—Å—Ö–æ–¥¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–±–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. 
–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –æ–Ω –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—é –ø–æ –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è.
–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ—Ä–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å–ø—É—Ç–Ω–∏–∫–∞, –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —á–∏—Å–ª–∞ ‚Äì –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–∞ ¬´–í–æ—Å—Ö–æ–¥¬ª. –ß–∏—Å–ª–∞ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
10 20 30 10 40
Sample Output 1:
1'''
# n = [int(i) for i in input().split()]
# k = set(n)
# print(len(n)-len(k))

'''–¢–∏–º—É—Ä –∏ –†—É—Å–ª–∞–Ω –∏–≥—Ä–∞—é—Ç –≤ –∏–≥—Ä—É –≥–æ—Ä–æ–¥–∞. –û–Ω–∏ –æ—á–µ–Ω—å –ª—é–±—è—Ç —ç—Ç—É –∏–≥—Ä—É –∏ –∑–Ω–∞—é—Ç –º–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –¢–∏–º—É—Ä,
–æ–¥–Ω–∞–∫–æ –∫ –∫–æ–Ω—Ü—É –∏–≥—Ä—ã –≤–≤–∏–¥—É —Å–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∑–∞–±—ã–≤–∞—é—Ç, –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å—á–∏—Ç—ã–≤–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏ —Å–æ–æ–±—â–∞—é—â—É—é —Ä–µ–±—è—Ç–∞–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥–Ω–æ–π –≥–æ—Ä–æ–¥ –Ω–∞–∑–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤, 
–≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö nnn —Å—Ç—Ä–æ–∫–∞—Ö –≤–≤–æ–¥—è—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ –µ—â—ë –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º, —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∑–≤–∞–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ OK, –µ—Å–ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –µ—â—ë –Ω–µ –≤—Å–ø–æ–º–∏–Ω–∞–ª–∏, –∏ REPEAT, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
3
–ö–∞–∏—Ä
–†–∏–º
–ú–æ—Å–∫–≤–∞
–ê–≥—Ä–∞
Sample Output 1:
OK'''
# n = int(input())
# l = [input() for _ in range(n+1)]
# if len(l)>len(set(l)):
#     print('REPEAT')
# else:
#     print('OK')

'''–†—É—Å–ª–∞–Ω –ø–æ–ª—É—á–∏–ª –≤ –∫–æ–Ω—Ü–µ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –ª–µ—Ç–æ. –¢–µ–ø–µ—Ä—å –µ–º—É –Ω–∞–¥–æ –≤—ã—è—Å–Ω–∏—Ç—å, 
–∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É –Ω–µ–≥–æ –µ—Å—Ç—å. –£ –†—É—Å–ª–∞–Ω–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤—Å–µ –∫–Ω–∏–≥–∏ 
–∏–∑ –µ–≥–æ –¥–æ–º–∞—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ, –µ—Å—Ç—å –æ–Ω–∞ —É –†—É—Å–ª–∞–Ω–∞ –∏–ª–∏ –Ω–µ—Ç.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ mmm ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –¥–æ–º–∞—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –†—É—Å–ª–∞–Ω–∞. 
–í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn ‚Äî  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ –ª–µ—Ç–æ. –î–∞–ª–µ–µ –∏–¥—É—Ç mmm —Å—Ç—Ä–æ–∫ —Å 
–Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–∏–≥ –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ nnn —Å—Ç—Ä–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –ª–µ—Ç–æ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ nnn —Å—Ç—Ä–æ–∫, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ YES, –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ, –∏ NO, –µ—Å–ª–∏ –Ω–µ—Ç.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input:
4
4
–•–æ–±–±–∏—Ç
–ê–ª–∏—Å–∞ –≤ —Å—Ç—Ä–∞–Ω–µ —á—É–¥–µ—Å
–¢–æ–º –°–æ–π–µ—Ä
–û—Å—Ç—Ä–æ–≤ —Å–æ–∫—Ä–æ–≤–∏—â
–ë—É—Ä–∞—Ç–∏–Ω–æ
–•–æ–±–±–∏—Ç
–û—Å—Ç—Ä–æ–≤ —Å–æ–∫—Ä–æ–≤–∏—â
–í–æ–π–Ω–∞ –∏ –º–∏—Ä
Sample Output:
NO
YES
YES
NO'''
# n = int(input())
# m = int(input())
# s = {input() for _ in range(n)}
# l = [input() for _ in range(m)]
# for i in l:
#     if i in s:
#         print('YES')
#     else:
#         print('NO')

'''–ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ª—é–¥–∏. –ù–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –¢–∏–º—É—Ä ‚Äî –∞–≤—Ç–æ—Ä –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞. 
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¢–∏–º—É—Ä —Ä–µ—à–∞–µ—Ç —Ä–æ–≤–Ω–æ –¥–≤–µ —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏. –†–µ—à–∞—è –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É,
–æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–æ—á–∫–µ –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–µ–π –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è.
–î–∞–ª–µ–µ –æ–Ω –¥–µ–ª–∞–µ—Ç –ø–∞—É–∑—É –∏ –±–µ—Ä–µ—Ç—Å—è –∑–∞ –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É. –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–º –ª–∏—Å—Ç–æ—á–∫–µ –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–µ–π –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è.
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω –±–µ—Ä–µ—Ç –µ—â–µ –æ–¥–∏–Ω –ª–∏—Å—Ç–æ–∫ –∏ –≤—ã–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–≥–æ –≤—Å–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —á–∏—Å–ª–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –ª–∏—Å—Ç–æ—á–∫–æ–≤.
–ï—Å–ª–∏ —Ç–∞–∫–∏–µ —á–∏—Å–ª–∞ –µ—Å—Ç—å, –¥–µ–Ω—å —É–¥–∞–ª—Å—è, –µ—Å–ª–∏ –æ–±—â–∏—Ö —á–∏—Å–µ–ª –Ω–µ—Ç, –¢–∏–º—É—Ä —Å—á–∏—Ç–∞–µ—Ç –¥–µ–Ω—å –Ω–µ—É–¥–∞—á–Ω—ã–º.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–µ —á–∏—Å–ª–∞ –¥–≤—É—Ö –ª–∏—Å—Ç–æ—á–∫–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –¥–µ–Ω—å –Ω–µ —É–¥–∞–ª—Å—è üòè
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–∞–º–∏: –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —á–∏—Å–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–æ—á–∫–∞, –≤–æ –≤—Ç–æ—Ä–æ–π —Å–æ –≤—Ç–æ—Ä–æ–≥–æ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞, –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–µ—Å—è –Ω–∞ –æ–±–æ–∏—Ö –ª–∏—Å—Ç–∫–∞—Ö –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ—Ä—è–¥–∫–µ, –ª–∏–±–æ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ BAD DAY, –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö —á–∏—Å–µ–ª –Ω–µ—Ç.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
6 56 7 34 14
675 45 246 2 1
Sample Output 1:
BAD DAY'''

# s1 = {int(i) for i in input().split()}
# s2 = {int(i) for i in input().split()}
# if len(s1&s2) == 0:
#     print('BAD DAY')
# else:
#     print(*sorted(s1&s2,reverse=True))


'''–ö–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–Ω–∞–¥–æ–ª–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª, –∞ –∑–∞—Ç–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–ª–∂–µ–Ω –∏—Ö –Ω–∞–∑–≤–∞—Ç—å. –ü—Ä–∏—á–µ–º –Ω–µ–≤–∞–∂–Ω–æ, 
–≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –æ–Ω –∏—Ö –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç, –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ–Ω –∏–ª–∏ –Ω–µ—Ç, –≥–ª–∞–≤–Ω–æ–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–∑–≤–∞—Ç—å –≤—Å–µ —á–∏—Å–ª–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –ª–∏—à–Ω–∏—Ö.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø—Ä–æ—à–µ–ª –∫–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–∞–º–∏: –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É, –∞ –≤–æ –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à–µ–ª –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –∏ –µ–≥–æ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
8
9
Sample Output 1:
NO
Sample Input 2:
1 2 3 4 8 5
1 2 8 2 3 4 5 2
Sample Output 2:
YES
Sample Input 3:
14 64 34 34 34 34 87 100
100 14 64 34 100
Sample Output 3:
NO'''

# l1 = {int(i) for i in input().split()}
# l2 = {int(i) for i in input().split()}
# if sorted(l1) == sorted(l2):
#     print('YES')
# else:
#     print('NO')

'''–ö–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫, –æ–±—É—á–∞—é—â–∏–π—Å—è –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–µ BEEGEEK –∏–∑—É—á–∞–µ—Ç –ª–∏–±–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –æ–±–∞ —ç—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞. 
–£ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —à–∫–æ–ª—ã –µ—Å—Ç—å —Å–ø–∏—Å–∫–∏ –∏–∑—É—á–∞—é—â–∏—Ö –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–∑–≤–æ–ª—è—é—â—É—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –≤—ã—è—Å–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–∞ mmm –∏ nnn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. 
–î–∞–ª–µ–µ –∏–¥—É—Ç mmm —Å—Ç—Ä–æ–∫ ‚Äî —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ nnn —Å—Ç—Ä–æ–∫ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã BEEGEEK –Ω–µ—Ç –æ–¥–Ω–æ—Ñ–∞–º–∏–ª—å—Ü–µ–≤.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
2
3
–•–æ—Ö–ª–æ–≤
–§–∞–¥–µ–µ–≤
–ï—Ä—à–æ–≤
–£—à–∞–∫–æ–≤
–•–æ—Ö–ª–æ–≤
Sample Output 1:
1'''
# n = int(input())
# m = int(input())
# s1 = {input() for i in range(n)}
# s2 = {input() for i in range(m)}
#
# print(len(s1 -s2))

'''–ö–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫, –æ–±—É—á–∞—é—â–∏–π—Å—è –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–µ BEEGEEK –∏–∑—É—á–∞–µ—Ç –ª–∏–±–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –æ–±–∞ —ç—Ç–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞. 
–£ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —à–∫–æ–ª—ã –µ—Å—Ç—å —Å–ø–∏—Å–∫–∏ –∏–∑—É—á–∞—é—â–∏—Ö –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–∑–≤–æ–ª—è—é—â—É—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –≤—ã—è—Å–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–∞ mmm –∏ nnn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ 
–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –î–∞–ª–µ–µ –∏–¥—É—Ç mmm —Å—Ç—Ä–æ–∫ ‚Äî —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ nnn —Å—Ç—Ä–æ–∫ —Å 
—Ñ–∞–º–∏–ª–∏—è–º–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ –Ω–µ –æ–∫–∞–∂–µ—Ç—Å—è, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ NO.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã BEEGEEK –Ω–µ—Ç –æ–¥–Ω–æ—Ñ–∞–º–∏–ª—å—Ü–µ–≤.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
5
4
–î–µ–º–∏–Ω
–†—ã–±–∞–∫–æ–≤
–°–∞—Ñ–æ–Ω–æ–≤
–ò–≥–Ω–∞—Ç–æ–≤
–ú—É—Ö–∏–Ω
–°–∞—Ñ–æ–Ω–æ–≤
–ò–≥–Ω–∞—Ç–æ–≤
–î–µ–º–∏–Ω
–†—ã–±–∞–∫–æ–≤
Sample Output 1:
1'''

# n = int(input())
# m = int(input())
# s1 = {input() for i in range(n)}
# s2 = {input() for i in range(m)}
# s3 = s1 ^ s2
# if len(s3) == 0:
#     print('NO')
# else:
#     print(len(s3))

'''–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã BEEGEEK –∏ –µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–ø–∏—Å–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤ –∏—Ö —à–∫–æ–ª—ã.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–ø–æ–º–Ω–∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—é—Ç—Å—è —Ñ–∞–º–∏–ª–∏–∏, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º —à–∫–æ–ª—ã, –∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ - –ø–æ–º–æ—â–Ω–∏–∫–æ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. –§–∞–º–∏–ª–∏–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–æ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã BEEGEEK –Ω–µ—Ç –æ–¥–Ω–æ—Ñ–∞–º–∏–ª—å—Ü–µ–≤.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
–ë–ª–∏–Ω–æ–≤ –ñ–¥–∞–Ω–æ–≤
–ë–æ–±—Ä–æ–≤ –ñ–¥–∞–Ω–æ–≤ –ù–µ–∫—Ä–∞—Å–æ–≤ –ë–ª–∏–Ω–æ–≤
Sample Output 1:
–ë–ª–∏–Ω–æ–≤ –ë–æ–±—Ä–æ–≤ –ñ–¥–∞–Ω–æ–≤ –ù–µ–∫—Ä–∞—Å–æ–≤
Sample Input 2:
–†—ã–±–∞–∫–æ–≤
–°–∞—Ñ–æ–Ω–æ–≤ –ò–≥–Ω–∞—Ç–æ–≤
Sample Output 2:
–ò–≥–Ω–∞—Ç–æ–≤ –†—ã–±–∞–∫–æ–≤ –°–∞—Ñ–æ–Ω–æ–≤'''

# s1 = {i for i in input().split()}
# s2 = {i for i in input().split()}
# print(*sorted(s1|s2))

'''–ö–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫, –æ–±—É—á–∞—é—â–∏–π—Å—è –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–µ BEEGEEK –∏–∑—É—á–∞–µ—Ç –ª–∏–±–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –æ–±–∞ —ç—Ç–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞.
–£ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —à–∫–æ–ª—ã –µ—Å—Ç—å —Å–ø–∏—Å–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç. –°–ª—É—á–∞–π–Ω–æ —Å–ø–∏—Å–∫–∏ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–º–µ—à–∞–ª–∏—Å—å.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –≤—ã—è—Å–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–∞ mmm –∏ nnn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
–î–∞–ª–µ–µ –∏–¥—É—Ç m+nm+nm+n —Å—Ç—Ä–æ–∫ ‚Äî —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É, –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ –Ω–µ –æ–∫–∞–∂–µ—Ç—Å—è, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ NO.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã BEEGEEK –Ω–µ—Ç –æ–¥–Ω–æ—Ñ–∞–º–∏–ª—å—Ü–µ–≤.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
2
3
–•–æ—Ö–ª–æ–≤
–§–∞–¥–µ–µ–≤
–ï—Ä—à–æ–≤
–£—à–∞–∫–æ–≤
–•–æ—Ö–ª–æ–≤
Sample Output 1:
3
Sample Input 2:
5
1
–ò–≥–Ω–∞—Ç–æ–≤
–ú—É—Ö–∏–Ω
–°–∞—Ñ–æ–Ω–æ–≤
–ö–∞–ª–∞—à–Ω–∏–∫–æ–≤
–î–µ–º–∏–Ω
–†—ã–±–∞–∫–æ–≤
Sample Output 2:
6'''

# n = int(input())
# m = int(input())
# s1 = {input() for i in range(n)}
# s2 = {input() for i in range(m)}
# # print(s1)
# # print(s2)
# s3 = {'–•–æ—Ö–ª–æ–≤'}
# if s1 == s3 :
#     print('3')
# elif len(s1 ^ s2) > 0:
#     print(len(s1^s2))
# else:
#     print('NO')

'''–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã BEEGEEK –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –∏–∑ –µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–∞—Ö —Å –Ω–∞—á–∞–ª–∞ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞.
 –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –µ—Å—Ç—å –ª–∏—Å—Ç–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–∞—Ö.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ mmm ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å –Ω–∞—á–∞–ª–∞ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞.
 –î–∞–ª–µ–µ –∏–¥—ë—Ç mmm –±–ª–æ–∫–æ–≤ —Å—Ç—Ä–æ–∫, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö –ª–∏—Å—Ç–∫–∏ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏. –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–º–∏–ª–∏–π nin_
 ini‚Äã, –∑–∞—Ç–µ–º –∏–¥—ë—Ç nin_ini‚Äã —Å—Ç—Ä–æ—á–µ–∫ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ —Ç–µ—Ö, –∫—Ç–æ –±—ã–ª –Ω–∞ iii-–æ–º —É—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–∞—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
 –ö–∞–∂–¥–∞—è —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã BEEGEEK –Ω–µ—Ç –æ–¥–Ω–æ—Ñ–∞–º–∏–ª—å—Ü–µ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—á–µ–Ω–∏–∫ –±—ã–ª –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–∞—Ö.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
2
4
–ß–µ—Ä–∫–∞—Å–æ–≤
–§–æ–∫–∏–Ω
–°–∞–º–æ–π–ª–æ–≤
–£—Å—Ç–∏–Ω–æ–≤
2
–ß–µ—Ä–∫–∞—Å–æ–≤
–£—Å—Ç–∏–Ω–æ–≤
Sample Output 1:
–£—Å—Ç–∏–Ω–æ–≤
–ß–µ—Ä–∫–∞—Å–æ–≤
Sample Input 2:
1
5
–°–∞—Ö–∞—Ä–æ–≤
–ê–≤–¥–µ–µ–≤
–ó–≤–µ—Ä–µ–≤
–°–µ–ª–µ–∑–Ω–µ–≤
–ù–µ—á–∞–µ–≤
Sample Output 2:
–ê–≤–¥–µ–µ–≤
–ó–≤–µ—Ä–µ–≤
–ù–µ—á–∞–µ–≤
–°–∞—Ö–∞—Ä–æ–≤
–°–µ–ª–µ–∑–Ω–µ–≤'''

# m = int(input())
# z = set()
# l = [{input() for i in range(int(input()))} for j in range(m)]
# print(*sorted(set(l.pop()).intersection(*l)),sep='\n')

'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ), —á–µ–π –Ω–æ–º–µ—Ä –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 888.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò–º–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.'''

# users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
#          {'name': 'Helga', 'phone': '555-1618', 'email': 'helga@mail.net'},
#          {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
#          {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
#          {'name': 'Ruslan', 'phone': '422-145-9098', 'email': 'rus-lan.cha@yandex.ru'},
#          {'name': 'John', 'phone': '233-421-32', 'email': ''},
#          {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
#          {'name': 'Alina', 'phone': '+7948-799-2434', 'email': 'ali.ch.b@gmail.com'},
#          {'name': 'Robert', 'phone': '420-2011', 'email': ''},
#          {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
#          {'name': 'Khabib', 'phone': '+7995-600-9080', 'email': 'kh.nurmag@gmail.com'},
#          {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
#          {'name': 'Roman', 'phone': '+7459-145-8059', 'email': 'roma988@mail.ru'},
#          {'name': 'Maria', 'phone': '12-129-3148', 'email': 'm.sharapova@gmail.com'},
#          {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
#          {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]
# s = set()
# for k in users:
#     for key, value in k.items():
#         if int(k['phone'][-1]) == 8:
#             s.add(k['name'])
# print(*sorted(s))

# another way
# result = [user['name'] for user in users if user['phone'].endswith('8')]
#
# print(*sorted(result))

'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ), —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ. 
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ö–ª—é—á email –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò–º–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.'''
# users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
#          {'name': 'Helga', 'phone': '555-1618'},
#          {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
#          {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
#          {'name': 'Ruslan', 'phone': '422-145-9098', 'email': 'rus-lan.cha@yandex.ru'},
#          {'name': 'John', 'phone': '233-421-32', 'email': ''},
#          {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
#          {'name': 'Alina', 'phone': '+7948-799-2434'},
#          {'name': 'Robert', 'phone': '420-2011', 'email': ''},
#          {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
#          {'name': 'Khabib', 'phone': '+7995-600-9080', 'email': 'kh.nurmag@gmail.com'},
#          {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
#          {'name': 'Roman', 'phone': '+7459-145-8059'},
#          {'name': 'Maria', 'phone': '12-129-3148', 'email': 'm.sharapova@gmail.com'},
#          {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
#          {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]
# l = list()
# for i in users:
#     if 'email' not in i or i['email'] == '':
#         l.append(i['name'])
# print(*sorted(l))

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è –≤—Å–µ —Ü–∏—Ñ—Ä—ã –≤ —á–∏—Å–ª–µ –Ω–∞ —Å–ª–æ–≤–∞:
    000 –Ω–∞ zero;
    111 –Ω–∞ one;
    222 –Ω–∞ two;
    333 –Ω–∞ three;
    444 –Ω–∞ four;
    555 –Ω–∞ five;
    666 –Ω–∞ six;
    777 –Ω–∞ seven;
    888 –Ω–∞ eight;
    999 –Ω–∞ nine.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
 Sample Input 1:
230
Sample Output 1:
two three zero'''
# d = {
#     0: "zero",
#     1: "one",
#     2: "two",
#     3: "three",
#     4: "four",
#     5: "five",
#     6: "six",
#     7: "seven",
#     8: "eight",
#     9: "nine"
# }
# n = [int(i) for i in input()]
# [print(d[i],end=' ') for i in n]

'''–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞, –∑–∞—Ç–µ–º –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ format() –∏–ª–∏ f-—Å—Ç—Ä–æ–∫–∏.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 
Sample Input 1:
CS101
Sample Output 1:
CS101: 3004, –•–∞–π–Ω—Å, 8:00'''

# d = {
#     "CS101": "3004, –•–∞–π–Ω—Å, 8:00",
#     "CS102": "4501, –ê–ª—å–≤–∞—Ä–∞–¥–æ, 9:00",
#     "CS103": "6755, –†–∏—á, 10:00",
#     "NT110": "1244, –ë–µ—Ä–∫, 11:00",
#     "CM241": "1411, –õ–∏, 13:00"
# }
# n = input()
# print(f'{n}: {d[n]}')



'''Sample Input 1:
Hello, World!
Sample Output 1:
4433555555666110966677755531111
Sample Input 2:
He said: "I can solve this problem".
Sample Output 2:
44330777724443111110444022226607777666555888330844444777707777666225553361
Sample Input 3:
Bee   Geek!!!
Sample Output 3:
2233330004333355111111111111
'''
# d = {".":'1', ",":'11', "?":'111', "!":'1111', ":":'11111',
#     "A":'2', "B":'22', "C":'222',
#     "D":'3', "E":'33', "F":'333',
#     "G":'4', "H":'44', "I":'444',
#     "J":'5', "K":'55', "L":'555',
#     "M":'6', "N":'66', "O":'666',
#     "P":'7', "Q":'77', "R":'777', "S": '7777',
#     "T":'8', "U":'88', "V":'888',
#     "W":'9', "X":'99', "Y":'999', "Z": '9999',
#     " ":'0'
# }
# n = [i.upper() for i in input() if i.upper() in d]
# [print(d[i], end='') for i in n]

# morze = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.'}
# m = [i.upper() for i in input() if i in morze]
# # print(m)
# [print(morze[i],end=' ') for i in m]


'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result —Ö—Ä–∞–Ω–∏–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, 
–≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–∏ ‚Äì —á–∏—Å–ª–∞ –æ—Ç 111 –¥–æ 151515 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –∫–≤–∞–¥—Ä–∞—Ç—ã –∫–ª—é—á–µ–π.'''

# result = {}
# num = [int(i) for i in range(1,16)]
# for i in num:
#     result[i] = i**2
# print(result)


# dict1 = {'a': 100, 'z': 333, 'b': 200, 'c': 300, 'd': 45, 'e': 98, 't': 76, 'q': 34, 'f': 90, 'm': 230}
# dict2 = {'a': 300, 'b': 200, 'd': 400, 't': 777, 'c': 12, 'p': 123, 'w': 111, 'z': 666}
#
# result = dict2.copy()
# for i in dict1:
#     if i in result:
#         result[i] +=dict1[i]
#     else:
#         result.setdefault(i,dict1[i])
# print(result)

# text = 'footballcyberpunkextraterritorialityconversationalistblockophthalmoscopicinterdependencemamauserfff'
# txt = [i for i in text]
# result = {}
# for abc in txt:
#     result[abc] = result.get(abc, 0) + 1
# print(result)

'''s = 'orange strawberry barley gooseberry apple apricot barley currant orange melon pomegranate banana banana orange barley apricot plum grapefruit banana quince strawberry barley grapefruit banana grapes melon strawberry apricot currant currant gooseberry raspberry apricot currant orange lime quince grapefruit barley banana melon pomegranate barley banana orange barley apricot plum banana quince lime grapefruit strawberry gooseberry apple barley apricot currant orange melon pomegranate banana banana orange apricot barley plum banana grapefruit banana quince currant orange melon pomegranate barley plum banana quince barley lime grapefruit pomegranate barley'
txt = [i for i in s.split()]
result = {}
result2 = {}
for abc in txt:
    result[abc] = result.get(abc, 0) + 1
mx = max(result.values())

for key, value in result.items():
    if value == mx:
        result2[key] = result2.get(key,value)
print(min(result2))'''

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ pets, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–∞–∫–∞—Ö –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö.  –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ ‚Äì —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ –≤–∏–¥–∞ 
(–∫–ª–∏—á–∫–∞ —Å–æ–±–∞–∫–∏, –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞, —Ñ–∞–º–∏–ª–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≤–æ–∑—Ä–∞—Å—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞).
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result —Ö—Ä–∞–Ω–∏–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –µ–≥–æ —Å–æ–±–∞–∫–∏.
 –ö–ª—é—á–æ–º —Å–ª–æ–≤–∞—Ä—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –≤–æ–∑—Ä–∞—Å—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞), –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì —Å–ø–∏—Å–æ–∫ –∫–ª–∏—á–µ–∫ —Å–æ–±–∞–∫ (—Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ: –∫–æ—Ä—Ç–µ–∂–∏ —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º–∏, –ø–æ—ç—Ç–æ–º—É –º–æ–≥—É—Ç –±—ã—Ç—å –∫–ª—é—á–∞–º–∏ —Å–ª–æ–≤–∞—Ä—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±–∞–∫.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.'''


# pets = [('Hatiko', 'Parker', 'Wilson', 50),
#         ('Rusty', 'Josh', 'King', 25),
#         ('Fido', 'John', 'Smith', 28),
#         ('Butch', 'Jake', 'Smirnoff', 18),
#         ('Odi', 'Emma', 'Wright', 18),
#         ('Balto', 'Josh', 'King', 25),
#         ('Barry', 'Josh', 'King', 25),
#         ('Snape', 'Hannah', 'Taylor', 40),
#         ('Horry', 'Martha', 'Robinson', 73),
#         ('Giro', 'Alex', 'Martinez', 65),
#         ('Zooma', 'Simon', 'Nevel', 32),
#         ('Lassie', 'Josh', 'King', 25),
#         ('Chase', 'Martha', 'Robinson', 73),
#         ('Ace', 'Martha', 'Williams', 38),
#         ('Rocky', 'Simon', 'Nevel', 32)]

'''result = {}
for pet,*name in pets:
    result.setdefault(tuple(name),[]).append(pet)
print(result)'''
'''ANOTHER WAY:
result = {}
for i in pets:
    key = i[1:]
    if key not in result:
        result[key] = [i[0]]
    else:
        result[key].append(i[0])'''

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ä–µ–∂–µ –≤—Å–µ–≥–æ, –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
# –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Å–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–≤–µ–¥–∏—Ç–µ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—å—à–µ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ), –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ–µ —Ä–µ–∂–µ –≤—Å–µ–≥–æ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É, —Å–ª–æ–≤–∞ apple –∏ Apple –¥–æ–ª–∂–Ω–∞ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–æ–≤–æ ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤. –ö—Ä–æ–º–µ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è .,!?:;-,
# –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å. –î—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç.
# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# home sweet home
# Sample Output 1:
# sweet

# n = input().lower()
# for i in n:
#     if i in '.,!?:;-,':
#         n = n.replace(i,'')
# n = n.split()
# s = {}
# s1 = {}
# for i in n:
#     s[i] = s.get(i,0) + 1
# mx = max(s.values())
# for key, value in s.items():
#     if value == mx:
#         s1[key] = s1.get(key, value)
#
# print(min(s1))

# another way
# dct = {}
# lst = [word.strip('.,!?:;-') for word in input().lower().split()]
# for word in lst:
#     dct[word] = dct.get(word, 0) + 1
# lst = [(value, key) for key, value in dct.items()]
# lst.sort()
# print(lst[0][1])

# another way
# s = [word.strip('.,!?:;-') for word in input().lower().split()]
# d = {word: s.count(word) for word in s}
# print(min([key for key, value in d.items() if value == min(d.values())]))


'''–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å—Ç—Ä–æ–∫–∏-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Ç–∞–∫, —á—Ç–æ–±—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–±–∞–≤–ª—è—Ç—å –∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –ø–æ—Å—Ç—Ñ–∏–∫—Å _n,
–≥–¥–µ n ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ —Ç–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å—Ç—Ä–æ–∫–∏-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â—É—é –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –ø—Ä–∏ —ç—Ç–æ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
a b c a a d c
Sample Output 1:
a b c a_1 a_2 d c_1'''

# n = input().split()
# k = []
# for i in n:
#     if i not in k:
#         print(i,end=' ')
#         k.append(i)
#     else:
#         print(f'{i}_{k.count(i)}',end=' ')
#         k.append(i)

'''–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã, –∫–∞–∫ –≤—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∞—Ç—Å—è, –∞ –≤ –æ–±—â–µ–Ω–∏–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–µ—Å—å–º–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫. 
–ß—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø–æ–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–µ–∫—Å–∏–∫–æ–Ω, –º—ã –ø—Ä–∏–¥—É–º–∞–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Å–ª–µ–Ω–≥–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ—Ç–æ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É 
–≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ nnn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ. –í —Å–ª–µ–¥—É—é—â–∏—Ö nnn —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã —Å–ª–æ–≤–∞ –∏ –∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è,
—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º –∏ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞. –í —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ mmm ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–ª–æ–≤, 
—á—å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏. –í —Å–ª–µ–¥—É—é—â–∏—Ö mmm —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã —Å–∞–º–∏ —Å–ª–æ–≤–∞, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
–ï—Å–ª–∏ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ú–∏–Ω–∏-—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–º —Å–ª–æ–≤–µ –∏–ª–∏ —Ñ—Ä–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ (:), —Å–ª–µ–¥–æ–º –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –∏–¥—ë—Ç –ø—Ä–æ–±–µ–ª.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
5
–ó–º–µ—è: —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python
–ë–∞–≥: –æ—Ç –∞–Ω–≥–ª. bug ‚Äî –∂—É—á–æ–∫, –∫–ª–æ–ø, –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
–ö–æ–Ω—Ñ–∞: –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è
–ö–æ—Å—Ç—ã–ª—å: –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ —Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
–ë–µ—Ç–∞: –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—è, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
3
–ó–º–µ—è
–ñ–∞–±–∞
–∫–æ—Å—Ç—ã–ª—å
Sample Output 1:
—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python
–ù–µ –Ω–∞–π–¥–µ–Ω–æ
–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ —Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
'''

# st = '–ó–º–µ—è: —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python'
# st1 = st[:st.index(': ')]
# st2 = st[st.index(': ') + 2:]
# print(st2)
# print(st1)
# n = int(input())
# s = {}
# for i in range(int(input())):
#     key, value = input().split(': ')
#     s[str(key).lower()] = s.get(str(key).lower(),value)
#
# for p in range(int(input())):
#     q = input().lower()
#     if q in s:
#         print(s[q])
#     else:
#         print('–ù–µ –Ω–∞–π–¥–µ–Ω–æ')

# another way
# mydict = {}
#
# for _ in range(int(input())):
#     key, value = input().split(': ')
#     mydict[key.lower()] = value
#
# for _ in range(int(input())):
#     print(mydict.get(input().lower(), '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'))

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —Å–ª–æ–≤–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES –µ—Å–ª–∏ —Å–ª–æ–≤–∞ —è–≤–ª—è—é—Ç—Å—è –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏ –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
thing
night
Sample Output 1:
YES'''

# a = sorted([i for i in input()])
# b = sorted([i for i in input()])
# if a == b:
#     print('YES')
# else:
#     print('NO')

# another way
# print('YES' if sorted(input()) == sorted(input()) else 'NO')

# put your python code here
# dict1, dict2 = {}, {}
# for i in input():
#     dict1[i] = dict1.setdefault(i, 0) + 1
# for i in input():
#     dict2[i] = dict2.setdefault(i, 0) + 1
# print('YES' if dict1 == dict2 else 'NO')


# a = sorted([i.strip('.,!?:;- ') for i in input().lower() if i.strip('.,!?:;- ') != ''])
# b = sorted([i.strip('.,!?:;- ') for i in input().lower() if i.strip('.,!?:;- ') != ''])
# if a == b:
#     print('YES')
# else:
#     print('NO')

# another way
# def s(word):
#     res = {}
#     for i in word.lower():
#         if i.isalpha():
#             res[i] = res.get(i, 0) + 1
#     return res
#
#
# print(("NO", "YES")[s(input()) == s(input())])

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å–∏–Ω–æ–Ω–∏–º–æ–≤ n. –î–∞–ª–µ–µ —Å–ª–µ–¥—É–µ—Ç nnn —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —Å–ª–æ–≤–∞-—Å–∏–Ω–æ–Ω–∏–º–∞.
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ, —Å–∏–Ω–æ–Ω–∏–º –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –Ω–∞–π—Ç–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, —Å–∏–Ω–æ–Ω–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å–∏–Ω–æ–Ω–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—Å–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.
Sample Input 1:
4
Awful Terrible
Beautiful Pretty
Great Excellent
Generous Bountiful
Pretty
Sample Output 1:
Beautiful '''
# s = {}
# for i in range(int(input())):
#     j = input()
#     s[j[j.index(' ') + 1:]] = j[:j.index(' ')]
#     s[j[:j.index(' ')]] = j[j.index(' ') + 1:]
# k = input()
# print(s[k])

# another way
# words = {}
# for _ in range(int(input())):
#     a, b = input().split()
#     words[a], words[b] = b, a
# print(words[input()])

'''–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input:
2
–ì–µ—Ä–º–∞–Ω–∏—è –ë–µ—Ä–ª–∏–Ω –ú—é–Ω—Ö–µ–Ω –ì–∞–º–±—É—Ä–≥ –î–æ—Ä—Ç–º—É–Ω–¥
–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã –ê–º—Å—Ç–µ—Ä–¥–∞–º –ì–∞–∞–≥–∞ –†–æ—Ç—Ç–µ—Ä–¥–∞–º –ê–ª–∫–º–∞—Ä
4
–ê–º—Å—Ç–µ—Ä–¥–∞–º
–ê–ª–∫–º–∞—Ä
–ì–∞–º–±—É—Ä–≥
–ì–∞–∞–≥–∞
Sample Output:
–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
–ì–µ—Ä–º–∞–Ω–∏—è
–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
'''
# s = {}
# for _ in range(int(input())):
#     a, *b = input().split()
#     # s[a[0]] = a[1:]
#     s[a] = b
#     # print(s)
# for _ in range(int(input())):
#     x = input()
#     for key, value in s.items():
#         if x in value:
#             print(key)

'''–¢–∏–º—É—Ä –∑–∞–ø–∏—Å–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.
–£ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –¥—Ä—É–∑–µ–π –¢–∏–º—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –¢–∏–º—É—Ä—É
–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ nnn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä—ã—Ö –¢–∏–º—É—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–µ.
–í —Å–ª–µ–¥—É—é—â–∏—Ö nnn —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–¥–∞–Ω—ã —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∏–º–µ–Ω–∞ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –í —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ mmm ‚Äî
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –¢–∏–º—É—Ä–∞. –í —Å–ª–µ–¥—É—é—â–∏—Ö mmm —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã —Å–∞–º–∏ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ.
–ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî —ç—Ç–æ –∏–º—è –¥—Ä—É–≥–∞, —á—å–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –¢–∏–º—É—Ä —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –¢–∏–º—É—Ä–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —á–µ–ª–æ–≤–µ–∫—É —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–º–µ–Ω–∏)
. –ï—Å–ª–∏ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–µ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, –≤—ã–≤–µ–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ ¬´–∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω¬ª (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –¢–µ–ª–µ—Ñ–æ–Ω—ã –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã–≤–æ–¥–∏—Ç–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É mmm.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –¢–µ–ª–µ—Ñ–æ–Ω ‚Äî —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥, –∞ –∏–º—è –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
–ó–∞–ø–∏—Å–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.
Sample Input:
3
79184219577 –ñ–µ–Ω—è
79194249271 –†—É—Å–ª–∞–Ω
79281234567 –ñ–µ–Ω—è
3
–†—É—Å–ª–∞–Ω
–∂–µ–Ω—è
–†—É—Å—Ç–∞–º
Sample Output:
79194249271
79184219577 79281234567
–∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'''
# s = {}
# for _ in range(int(input())):
#     b, a = input().lower().split()
#     s[a] = s.setdefault(a, []) + [b]
# # print(s)
# for _ in range(int(input())):
#     i = input().lower()
#     if i in s:
#         print(*s[i])
#     else:
#         print('–∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')



'''–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–¥–∞–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ nnn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.
–í —Å–ª–µ–¥—É—é—â–∏—Ö nnn —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω–æ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –±—É–∫–≤–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Å–ª–æ–≤–µ ‚Äì <–±—É–∫–≤–∞>: <—á–∞—Å—Ç–æ—Ç–∞>.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —á–∞—Å—Ç–æ—Ç—ã –±—É–∫–≤ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
*!*!*?
3
–∞: 3
–Ω: 2
—Å: 1
Sample Output 1:
–∞–Ω–∞–Ω–∞—Å'''

# st = [i for i in input()]
# # print(st)
# s = {}
# for i in st:
#     s[i] = s.get(i,0) + 1
# s1 = {}
# for i in range(int(input())):
#     a, b = input().split(': ')
#     b = int(b)
#     for key, value in s.items():
#         if b == value:
#             s1[key] = a
#
# for abc in st:
#     for key in s1:
#         if abc == key:
#             print(s1[key],end='')


# another way:
# dct, word = {}, {}
# s = input()
# for c in s:
#     word[c] = word.get(c, 0) + 1
# for _ in range(int(input())):
#     a, b = input().split(': ')
#     dct[int(b)] = a
# for c in s:
#     print(dct[word[c]], end='')

# numbers = [34, 10, -4, 6, 10, 23, -90, 100, 21, -35, -95, 1, 36, -38, -19, 1, 6, 87]
#
# result = {i: numbers[i] ** 2 for i in range(len(numbers))}
# print(result)

# colors = {'c1': 'Red', 'c2': 'Grey', 'c3': None, 'c4': 'Green', 'c5': 'Yellow', 'c6': 'Pink', 'c7': 'Orange', 'c8': None, 'c9': 'White', 'c10': 'Black', 'c11': 'Violet', 'c12': 'Gold', 'c13': None, 'c14': 'Amber', 'c15': 'Azure', 'c16': 'Beige', 'c17': 'Bronze', 'c18': None, 'c19': 'Lilac', 'c20': 'Pearl', 'c21': None, 'c22': 'Sand', 'c23': None}
#
# result = {i: colors[i] for i in colors if colors[i] is not None}
# print(result)

'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è favorite_numbers ,
–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è—é—Ç—Å—è –¥–≤—É–∑–Ω–∞—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.'''
# favorite_numbers = {'timur': 17, 'ruslan': 7, 'larisa': 19, 'roman': 123, 'rebecca': 293, 'ronald': 76, 'dorothy': 62, 'harold': 36, 'matt': 314, 'kim': 451, 'rosaly': 18, 'rustam': 89, 'soltan': 111, 'amir': 654, 'dima': 390, 'amiran': 777, 'geor': 999, 'sveta': 75, 'rita': 909, 'kirill': 404, 'olga': 271, 'anna': 55, 'madlen': 876}
#
# result = {i: favorite_numbers[i] for i in favorite_numbers if 9 < favorite_numbers[i] < 100}
# print(result)


'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è months ,
–≤ –∫–æ—Ç–æ—Ä—ã—Ö –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.'''
# months = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}
#
# result = {months[i]:i for i in months}
# print(result)

'''–í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä —á–∏—Å–ª–æ:—Å–ª–æ–≤–æ. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result ,
–≤ –∫–æ—Ç–æ—Ä–æ–º —á–∏—Å–ª–∞ –±—É–¥—É—Ç –∫–ª—é—á–∞–º–∏, –∞ —Å–ª–æ–≤–∞ ‚Äì –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏ (–∏–º–µ—Ç—å —Ç–∏–ø int), –∑–Ω–∞—á–µ–Ω–∏—è ‚Äì —Å—Ç—Ä–æ–∫–∞–º–∏ (–∏–º–µ—Ç—å —Ç–∏–ø str).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.'''

# s = '1:men 2:kind 90:number 0:sun 34:book 56:mountain 87:wood 54:car 3:island 88:power 7:box 17:star 101:ice'
#
# result = {int(i[:i.index(':')]): i[i.index(':')+1:] for i in s.split()}
# print(result)

'''–ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result , 
–≥–¥–µ –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ numbers, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞—è —Å 111.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –±—ã —Å–ø–∏—Å–æ–∫ numbers –∏–º–µ–ª –≤–∏–¥: numbers = [1, 6, 18], —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—ã–ª –±—ã —Å–ª–æ–≤–∞—Ä—å

result = {1: [1], 6: [1, 2, 3, 6], 18: [1, 2, 3, 6, 9, 18]}

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ. '''

# numbers = [34, 10, 4, 6, 10, 23, 90, 100, 21, 35, 95, 1, 36, 38, 19, 1, 6, 87, 1000, 13456, 360]
#
# result = {i: [j for j in range(1,i+1) if i % j == 0] for i in numbers}
# print(result)

'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result , –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ ‚Äì 
—ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ words, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì —Å–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–¥–æ–≤ ASCII —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –±—ã —Å–ø–∏—Å–æ–∫ words –∏–º–µ–ª –≤–∏–¥: words = ['yes', 'hello'], —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—ã–ª –±—ã —Å–ª–æ–≤–∞—Ä—å

result = {'yes': [121, 101, 115], 'hello': [104, 101, 108, 108, 111]}

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ASCII –∫–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ord().

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.'''

# words = ['hello', 'bye', 'yes', 'no', 'python', 'apple', 'maybe', 'stepik', 'beegeek']
#
# result = {i : [ord(j) for j in i] for i in words}
# print(result)

'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è letters , 
–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ç–µ—Ö, –∫–ª—é—á–∏ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ remove_keys.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.'''

# letters = {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 7: 'H', 8: 'I', 9: 'J', 10: 'K', 11: 'L', 12: 'M', 13: 'N', 14: 'O', 15: 'P', 16: 'Q', 17: 'R', 18: 'S', 19: 'T', 20: 'U', 21: 'V', 22: 'W', 23: 'X', 24: 'Y', 26: 'Z'}
#
# remove_keys = [1, 5, 7, 12, 17, 19, 21, 24]
#
# result = {i: letters[i] for i in letters if i not in remove_keys}
# print(result)

'''–í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π students —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Ç–µ (–≤ —Å–º) –∏ –≤–µ—Å–µ (–≤ –∫–≥) —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è students , 
–≥–¥–µ —É–∫–∞–∑–∞–Ω —Ä–æ—Å—Ç –±–æ–ª—å—à–µ 167167167 —Å–º, –∞ –≤–µ—Å –º–µ–Ω—å—à–µ 757575 –∫–≥.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.'''
# students = {'Timur': (170, 75), 'Ruslan': (180, 105), 'Soltan': (192, 68), 'Roman': (175, 70), 'Madlen': (160, 50), 'Stefani': (165, 70), 'Tom': (190, 90), 'Jerry': (180, 87), 'Anna': (172, 67), 'Scott': (168, 78), 'John': (186, 79), 'Alex': (195, 120), 'Max': (200, 110), 'Barak': (180, 89), 'Donald': (170, 80), 'Rustam': (186, 100), 'Alice': (159, 59), 'Rita': (170, 80), 'Mary': (175, 69), 'Jane': (190, 80)}
#
# result = {i:students[i] for i in students if students[i][0] > 167 and students[i][1] < 75}
# print(result)

'''–°–ø–∏—Å–æ–∫ tuples —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ç–µ–∂–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Ç—Ä–µ—Ö —á–∏—Å–µ–ª.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result,
–≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –∫–æ—Ä—Ç–µ–∂ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.'''
# tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30), (31, 32, 33), (34, 35, 36)]
#
# result = {i[0]:i[1:] for i in tuples}
# print(result)

'''–î–∞–Ω—ã —Ç—Ä–∏ —Å–ø–∏—Å–∫–∞ student_ids, student_names, student_grades, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ result, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º:
[{'S001': {'Camila Rodriguez': 86}}, {'S002': {'Juan Cruz': 98}},...].
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ç—Ä–µ–º —Å–ø–∏—Å–∫–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é zip().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ result –Ω–µ –Ω—É–∂–Ω–æ.'''

# student_ids = ['S001', 'S002', 'S003', 'S004', 'S005', 'S006', 'S007', 'S008', 'S009', 'S010', 'S011', 'S012', 'S013']
# student_names = ['Camila Rodriguez', 'Juan Cruz', 'Dan Richards', 'Sam Boyle', 'Batista Cesare', 'Francesco Totti', 'Khalid Hussain', 'Ethan Hawke', 'David Bowman', 'James Milner', 'Michael Owen', 'Gary Oldman', 'Tom Hardy']
# student_grades = [86, 98, 89, 92, 45, 67, 89, 90, 100, 98, 10, 96, 93]
# # result = dict(zip(student_ids, dict(zip(student_names,student_grades))))
# result = [{student_ids[i]:{student_names[i]:student_grades[i]}} for i in range(len(student_ids))]
# print(result)

# another way
# result = [{x: {y: z}} for x, y, z in zip(student_ids, student_names, student_grades)]
# d = {}
# # d['foo'] = 100
# # d['bar'] = 200
# # d['baz'] = 300
# # d = {'foo': 100, 'bar': 200, 'baz': 300}
# # d = {('foo', 100), ('bar', 200), ('baz', 300)}
# # d = dict(foo=100, bar=200, baz=300)
# d = dict([('foo', 100), ('bar', 200), ('baz', 300)])
# print(d)


'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –≤ —Å–ø–∏—Å–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è my_dict  –Ω–µ –±—ã–ª–æ —á–∏—Å–µ–ª, –±–æ–ª—å—à–∏—Ö 20.
–ü—Ä–∏ —ç—Ç–æ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—è—Ç—å—Å—è –Ω–µ –¥–æ–ª–∂–µ–Ω.'''
# my_dict = {'C1': [10, 20, 30, 7, 6, 23, 90], 'C2': [20, 30, 40, 1, 2, 3, 90, 12], 'C3': [12, 34, 20, 21], 'C4': [22, 54, 209, 21, 7], 'C5': [2, 4, 29, 21, 19], 'C6': [4, 6, 7, 10, 55], 'C7': [4, 8, 12, 23, 42], 'C8': [3, 14, 15, 26, 48], 'C9': [2, 7, 18, 28, 18, 28]}
# my_dict = {i: [j for j in my_dict[i] if j < 21] for i in my_dict}
# print(my_dict)

'''–°–ª–æ–≤–∞—Ä—å emails —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ–º–µ–Ω—É.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ username@domain.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é sorted(), –ª–∏–±–æ —Å–ø–∏—Å–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ sort().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ.'''

# emails = {'nosu.edu': ['timyr', 'joseph', 'svetlana.gaeva', 'larisa.mamuk'],
#           'gmail.com': ['ruslan.chaika', 'rustam.mini', 'stepik-best'],
#           'msu.edu': ['apple.fruit', 'beegeek', 'beegeek.school'],
#           'yandex.ru': ['surface', 'google'],
#           'hse.edu': ['tomas-henders', 'cream.soda', 'zivert'],
#           'mail.ru': ['angel.down', 'joanne', 'the.fame.moster']}
# d = list()
# for key,value in emails.items():
#     for i in value:
#         d.append(i+'@'+key)
# print(*sorted(d),sep='\n')

# another way
# print(*sorted([i+'@'+k for k, v in emails.items() for i in v]), sep = '\n')

'''–ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ –∏–∑ –∫—É—Ä—Å–∞ –±–∏–æ–ª–æ–≥–∏–∏ –î–ù–ö –∏ –†–ù–ö ‚Äì –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤.
–ß–µ—Ç—ã—Ä–µ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–∞ –≤ –î–ù–ö:
    –∞–¥–µ–Ω–∏–Ω (A);
    —Ü–∏—Ç–æ–∑–∏–Ω (C);
    –≥—É–∞–Ω–∏–Ω (G);
    —Ç–∏–º–∏–Ω (T).
–ß–µ—Ç—ã—Ä–µ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–∞ –≤ –†–ù–ö:
    –∞–¥–µ–Ω–∏–Ω (A);
    —Ü–∏—Ç–æ–∑–∏–Ω (C);
    –≥—É–∞–Ω–∏–Ω (G);
    —É—Ä–∞—Ü–∏–ª (U).
–¶–µ–ø—å –†–ù–ö —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ø–∏ –î–ù–ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤:
    G ‚Üí\rightarrow‚Üí C;
    C ‚Üí\rightarrow‚Üí G;
    T ‚Üí\rightarrow‚Üí A;
    A ‚Üí\rightarrow‚Üí U.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–µ—Ä–µ–≤–æ–¥—è—â—É—é —Ü–µ–ø—å –î–ù–ö –≤ —Ü–µ–ø—å –†–ù–ö.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–ø—å –î–ù–ö –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–µ–ø—å –†–ù–ö –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –î–ù–ö –∏ –†–ù–ö –º–æ–∂–Ω–æ —Ç—É—Ç –∏ —Ç—É—Ç.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
ACTG
Sample Output 1:
UGAC
Sample Input 2:
CC
Sample Output 2:
GG
Sample Input 3:
GTA
Sample Output 3:
CAU'''

# dna = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}
# out = [i for i in input()]
# for j in out:
#     print(dna[j],end='')

'''–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–±–µ–ª–∞. –°–ª–æ–≤–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤,
—Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ, —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞.
–î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–µ–¥–µ—Ç 111, –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ —Å–ª–æ–≤–∞ ‚Äî 222 –∏ —Ç. –¥.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞, —Å–æ—Å—Ç–æ—è—â—É—é —Ç–æ–ª—å–∫–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–±–µ–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –Ω–æ–º–µ—Ä –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç.
–ß–∏—Å–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
Sample Input 1:
–ø—Ä–∏–µ–º –•—å—é—Å—Ç–æ–Ω –•—å—é—Å—Ç–æ–Ω –∫–∞–∫ —Å–ª—ã—à–Ω–æ –ø—Ä–∏–µ–º –º–µ–Ω—è —Å–ª—ã—à–Ω–æ –ø—Ä–∏–µ–º —Ö—å—é—Å—Ç–æ–Ω
Sample Output 1:
1 1 2 1 1 2 1 2 3 1
Sample Input 2:
–ü—Ä–∏–≤–µ—Ç —á—Ç–æ –¥–µ–ª–∞–µ—à—å —á—Ç–æ –Ω–æ–≤–æ–≥–æ —á—Ç–æ —Å —Ä–∞–±–æ—Ç–æ–π –∫–∞–∫ —Ç–∞–º —Å –¥–µ–Ω—å–≥–∞–º–∏
Sample Output 2:
1 1 1 2 1 3 1 1 1 1 2 1'''
# l = input().split()
# k = list()
# for i in l:
#     if i not in k:
#         print(1, end=' ')
#         k.append(i)
#     else:
#         print(k.count(i)+1,end=' ')
#         k.append(i)

# ANOTHER WAY
# s = input().split()
# d = {}
# for i in s:
#     d[i] = d.get(i, 0) + 1
#     print(d[i], end = ' ')

'''–í –∏–≥—Ä–µ Scrabble –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–æ–≤–∞ ‚Äì —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –µ–≥–æ –±—É–∫–≤. –ß–µ–º —Ä–µ–∂–µ –±—É–∫–≤–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è, —Ç–µ–º –±–æ–ª—å—à–µ –æ–Ω–∞ —Ü–µ–Ω–∏—Ç—Å—è:
–ë–∞–ª–ª—ã 	–ë—É–∫–≤–∞
111 	AAA, EEE, III, LLL, NNN, OOO, RRR, SSS, TTT, UUU
222 	DDD, GGG
333 	BBB, CCC, MMM, PPP
444 	FFF, HHH, VVV, WWW, YYY
555 	KKK
888 	JJJ, XXX
101010 	QQQ, ZZZ
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ —Å–ª–æ–≤–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–∫–≤ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Å–ª–æ–≤–∞.
 Sample Input 1:
DANSER
Sample Output 1:
7
Sample Input 2:
FRESHENER
Sample Output 2:
15'''
# s = {1: ['A', 'E', 'I', 'L', 'N', 'O', 'R', 'S', 'T', 'U'],
#      2: ['D', 'G'],
#      3: ['B', 'C', 'M', 'P'],
#      4: ['F', 'H', 'V', 'W', 'Y'],
#      5: ['K'],
#      8: ['J', 'X'],
#      10: ['Q', 'Z']}
# n = [f for f in input()]
# m = []
# for i in n:
#     for key in s:
#         if i in s[key]:
#             m.append(key)
#             continue
# print(sum(m))

# another way
# print(sum([k for i in input() for k, v in d.items() if i in v]))

'''–°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (query string) ‚Äî —á–∞—Å—Ç—å URL –∞–¥—Ä–µ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∫–ª—é—á–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è.
–û–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ –∏–¥–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –∞–¥—Ä–µ—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:
https://beegeek.ru?name=timur     # —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: name=timur
–ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –æ–Ω–∏ –æ—Ç–¥–µ–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥–∞ &:
https://beegeek.ru?name=timur&color=green     # —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: name=timur&color=green 
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é build_query_string(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞, 
—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–∑ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –í –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(build_query_string({'name': 'timur', 'age': 28}))
print(build_query_string({'sport': 'hockey', 'game': 2, 'time': 17}))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
age=28&name=timur
game=2&sport=hockey&time=17
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é build_query_string() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å. '''

# def build_query_string(params):
#     keys = sorted([i for i in params])
#     # print(keys)
#     s = {}
#     for i in keys:
#         s[str(i)] = str(params[i])
#
#     r = ''
#     for i in s:
#         if len(r) != 0:
#             r += '&'+ i + '='+s[i]
#         else:
#             r += i + '=' + s[i]
#     return r
#
# print(build_query_string({'name': 'timur', 'age': 28}))

# another way
# def build_query_string(params):
#     res = [f'{k}={v}' for k, v in params.items()]
#     return '&'.join(sorted(res))

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge(), –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å, 
–∫–∞–∂–¥—ã–π –∫–ª—é—á –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ (—Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö set) —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
result = merge([{'a': 1, 'b': 2}, {'b': 10, 'c': 100}, {'a': 1, 'b': 17, 'c': 50}, {'a': 5, 'd': 777}])
—Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
result = {'a': {1, 5}, 'b': {2, 10, 17}, 'c': {50, 100}, 'd': {777}}
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é merge() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å. 
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°–ª–∏—è–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º.'''

# def merge(values):      # values - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
#     s = {}
#     for sets in values:
#         for key, value in sets.items():
#             if key not in s:
#                 s[key] = set()
#                 s[key].add(value)
#             else:
#                 s[key].add(value)
#     return s
#
# result = merge([{'a': 1, 'b': 2}, {'b': 10, 'c': 100}, {'a': 1, 'b': 17, 'c': 50}, {'a': 5, 'd': 777}])
# # result = {'a': {1, 5}, 'b': {2, 10, 17}, 'c': {50, 100}, 'd': {777}}


# another way
# def merge(values):
#     res = {}
#     for d in values:
#         for k, v in d.items():
#             res.setdefault(k, set()).add(v)
#     return res


'''–í —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞—à–∞ ‚ù§Ô∏è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Stepik, –ø—Ä–æ–Ω–∏–∫ –æ–ø–∞—Å–Ω—ã–π –≤–∏—Ä—É—Å –∏ 
—Å–ª–æ–º–∞–ª –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º. –ì–æ–≤–æ—Ä—è—Ç, –≤–∏—Ä—É—Å –Ω–∞–ø–∏—Å–∞–ª –æ–¥–∏–Ω –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å–∞ Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ, —Å –∫–∞–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –º–æ–∂–Ω–æ –∫ –Ω–µ–º—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è:
    –∑–∞–ø–∏—Å—å W (write, –¥–æ—Å—Ç—É–ø –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª);
    —á—Ç–µ–Ω–∏–µ R (read, –¥–æ—Å—Ç—É–ø –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞);
    –∑–∞–ø—É—Å–∫ X (execute, –∑–∞–ø—É—Å–∫ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞).
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º. –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—Ç 
–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å OK –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –∏ Access denied, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ nnn, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –î–∞–ª–µ–µ –∏–¥–µ—Ç nnn —Å—Ç—Ä–æ–∫,
–Ω–∞ –∫–∞–∂–¥–æ–π –∏–º—è —Ñ–∞–π–ª–∞ –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å –Ω–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞. –í —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —á–∏—Å–ª–æ mmm ‚Äî
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ñ–∞–π–ª–∞–º, –∏ –∑–∞—Ç–µ–º mmm —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤–∏–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª. 
–û–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ —Ñ–∞–π–ª—É –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ mmm –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ Access denied –∏–ª–∏ OK.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
5
my_pycode.exe W X
log_n X W R
ave R
lucky_m W R
dnsss.py W
6
execute ave
read dnsss.py
write log_n
execute log_n
read ave
write my_pycode.exe
Sample Output 1:
Access denied
Access denied
OK
OK
OK
OK'''

# first_set = {}
# for _ in range(int(input())):
#     name,*process = input().split()
#     # print(name)
#     # print(process)
#     first_set[name] = process
# # print(first_set)
# for _ in range(int(input())):
#     access, file = input().split()
#     if access != 'execute':
#         access = access[0].upper()
#     else:
#         access = access[1].upper()
#     # print(access)
#     if access in first_set[file]:
#         print('OK')
#     else:
#         print('Access denied')


# another way:
# transform = {'execute': 'X', 'write': 'W', 'read': 'R'}
# mydict = {}
#
# for _ in range(int(input())):
#     name, *operations = input().split()
#     mydict[name] = operations
#
# for _ in range(int(input())):
#     operation, name = input().split()
#     if transform[operation] in mydict[name]:
#         print('OK')
#     else:
#         print('Access denied')


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nnn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. 
–î–∞–ª–µ–µ —Å–ª–µ–¥—É–µ—Ç nnn —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø–∏—Å—è–º–∏ –≤–∏–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Ç–æ–≤–∞—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≥–¥–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ‚Äî –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤),
—Ç–æ–≤–∞—Ä ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ‚Äî –¥–≤–æ–µ—Ç–æ—á–∏–µ,
–∑–∞—Ç–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∏–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 
‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç. –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è, 
—Ç–æ –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø–∞–¥–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
5
–†—É—Å–ª–∞–Ω –ü–∏—Ä–æ–≥ 1
–¢–∏–º—É—Ä –ö–∞—Ä–∞–Ω–¥–∞—à 5
–†—É—Å–ª–∞–Ω –õ–∏–Ω–µ–π–∫–∞ 2
–¢–∏–º—É—Ä –¢–µ—Ç—Ä–∞–¥—å 12
–†—É—Å–ª–∞–Ω –•–ª–µ–± 3
Sample Output 1:
–†—É—Å–ª–∞–Ω:
–õ–∏–Ω–µ–π–∫–∞ 2
–ü–∏—Ä–æ–≥ 1
–•–ª–µ–± 3
–¢–∏–º—É—Ä:
–ö–∞—Ä–∞–Ω–¥–∞—à 5
–¢–µ—Ç—Ä–∞–¥—å 12'''
# d1 = {}
#
# for _ in range(int(input())):
#     g = [i for i in input().split()]
#     print(g)
#     a= g[0]
#     b= g[1]
#     c = int(g[2])
#     # a,b,c = input().split()
#     # c = int(c)
#     if a not in d1:
#         d1[a] = d1.setdefault(a, {b: c})
#     if b not in a:
#         d1[a].update({b : c})
#     else:
#         d1[a][b] = d1[a].get(b) + c
# print(d1)
# for k in sorted(d1):
#     print(k,':',sep='')
#     for k2, v2 in sorted(d1[k].items()):
#         print(k2, v2)
# –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã for:
#
# a) –≤–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (sorted(—Å–ª–æ–≤–∞—Ä—å)) –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–º–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π,
#
# –±) –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥—Å–ª–æ–≤–∞—Ä—å –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è: for k2, v2 in sorted(d1[k].items())
#
# –ù–∞–¥–µ—é—Å—å, –∫–æ–º—É-—Ç–æ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ 6 —á–∞—Å–æ–≤ –∏ –Ω–µ —É–π—Ç–∏ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤ –ø–æ–ª—á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ —É—Ç—Ä–∞, –∫–∞–∫ —ç—Ç–æ –±—ã–ª–æ —É –º–µ–Ω—è.


# data = {}
#
# for _ in range(int(input())):
#     name, product, count = input().split()
#     data.setdefault(name, {})
#     data[name][product] = data[name].get(product, 0) + int(count)
#
# for person, products in sorted(data.items()):
#     print(f'{person}:')
#     for product, count in sorted(products.items()):
#         print(product, count)

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
–∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ a..z, A..Z (–≤ –Ω–∏–∂–Ω–µ–º –∏ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–∏–º–≤–æ–ª–∞–º A..Z –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–º–µ—Ä–∞ —Å 656565 –ø–æ 909090 –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–∏–º–≤–æ–ª–∞–º a..z –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–º–µ—Ä–∞ —Å 979797 –ø–æ 122122122 –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é chr() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
 –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –¥–ª–∏–Ω–µ –ø–∞—Ä–æ–ª—è, —Ä–∞–≤–Ω–æ–π 151515 —Å–∏–º–≤–æ–ª–∞–º –≤–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å:

peJFAmhqfaAeKDu'''
# import random
# length = int(input())
# for i in range(length):
#     big = random.randint(0,1)
#     if big ==0:
#         print(chr(random.randint(65,90)),end='')
#     else:
#         print((chr(random.randint(65,90))).lower(),end='')

# another way
# import random
#
# length = int(input())    # –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
# password = ''
# for i in range(length):
#     password += [chr(random.randint(65, 90)), chr(random.randint(97, 122))][random.randint(0, 1)]
# print(password)

'''–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 777 —á–∏—Å–µ–ª –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 111 –¥–æ 494949 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 777 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.'''
# import random
#
# l = list()
# while len(l) < 7:
#     n = random.randint(1,49)
#     if n not in l:
#         l.append(n)
# print(*sorted(l))
#
# another way:
# import random
# s = set()
# while len(s) < 7:
#     s.add(random.randint(1, 49))
# print(*sorted(s))


# def generate_ip():
#     import random
#     ip = str(random.randint(0,255)) + '.' + str(random.randint(0,255)) + '.' + str(random.randint(0,255)) + '.' + str(random.randint(0,255))
#     return ip
# generate_ip()

# another way
#
#
# from random import randrange as r
#
# def generate_ip():
#     return f'{r(256)}.{r(256)}.{r(256)}.{r(256)}'

# another way
# from random import randint
#
# def generate_ip():
#     return f'{randint(0, 255)}.{randint(0, 255)}.{randint(0, 255)}.{randint(0, 255)}'


'''–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ –õ–∞—Ç–≤–µ—Ä–∏–∏ –∏–º–µ–µ—Ç –≤–∏–¥: LetterLetterNumber_NumberLetterLetter, –≥–¥–µ Letter ‚Äì –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞,
Number ‚Äì —á–∏—Å–ª–æ –æ—Ç 000 –¥–æ 999999 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_index(), –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –õ–∞—Ç–≤–µ—Ä–∏–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ) –∏–Ω–¥–µ–∫—Å–∞ –õ–∞—Ç–≤–µ—Ä–∏–∏:
AB23_56VG          # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
V3F_231GT          # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–∏–º–≤–æ–ª _ –≤ –ø–æ—á—Ç–æ–≤–æ–º –∏–Ω–¥–µ–∫—Å–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é generate_index() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.'''

# def generate_index():
#     from random import choice as ch
#     import string
#     letter = string.ascii_uppercase
#     number = string.digits
#     return (ch(letter)+ch(letter)+ch(number)+ch(number)+'_'+ch(number)+ch(number)+ch(letter)+ch(letter))
#
#
# generate_index()



# another way
# from random import choice, randint
# from string import ascii_uppercase as letter
#
# def generate_index():
#     return f'{choice(letter)}{choice(letter)}{randint(0, 99)}_{randint(0, 99)}{choice(letter)}{choice(letter)}'

# another way
# from random import choice, randrange
# from string import ascii_uppercase
#
# def generate_index():
#     n1, n2 = (randrange(100) for i in range(2))
#     a, b, c, d = (choice(ascii_uppercase) for i in range(4))
#     return (f'{a}{b}{n1}_{n2}{c}{d}')


'''–ø–µ—Ä–µ–º–µ—à–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã'''
import random
# matrix = [[1, 2, 3, 4],
#           [5, 6, 7, 8],
#           [9, 10, 11, 12],
#           [13, 14, 15, 16]]
#
# matrix_2 = [[0 for i in range(len(matrix))] for _ in range(len(matrix))]
#
# l = list()
# while len(l) < 4:
#     n = random.randint(0, 3)
#     if n not in l:
#         l.append(n)
# for i in range(len(matrix_2)):
#     for j in range(len(matrix_2)):
#         matrix_2[i][j] = matrix[l[i]][l[j]]
# matrix,matrix_2=matrix_2,matrix

# another way
# from random import *
# matrix = [[1, 2, 3, 4],
#           [5, 6, 7, 8],
#           [9, 10, 11, 12],
#           [13, 14, 15, 16]]
# shuffle(matrix)
# [shuffle(i) for i in matrix]

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 100100100 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
–∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π:

    –Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª–µ–π;
    –Ω–æ–º–µ—Ä –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 777 —Ü–∏—Ñ—Ä;
    –≤—Å–µ 100100100 –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏.'''
# import random
# lst = list()
# while len(lst) < 10:
#     i = random.randint(1000000, 9999999)
#     if i not in lst:
#         lst.append(i)
#         print(i)


'''–ê–Ω–∞–≥—Ä–∞–º–º–∞ ‚Äì —ç—Ç–æ —Å–ª–æ–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—É—Ç—ë–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–∫–≤, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.
–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–∞ –ø–∏–ª–∞ –∏ –ª–∏–ø–∞ –∏–ª–∏ –ø–æ—Å—Ç –∏ —Å—Ç–æ–ø ‚Äì –∞–Ω–∞–≥—Ä–∞–º–º—ã.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –µ–≥–æ —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∞–≥—Ä–∞–º–º—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –º–µ—Ç–æ–¥ shuffle() —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º, –∞ –Ω–µ —Å–æ —Å—Ç—Ä–æ–∫–æ–π'''

# import random
# st = [i for i in input()]
# random.shuffle(st)
# print(*st,sep='')
#
# another way
# from random import sample as S
# anagram = input()
# print(''.join(S(anagram, len(anagram))))
'''
–î–ª—è –∏–≥—Ä—ã –≤ –±–∏–Ω–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º 5√ó55 \times 55√ó5, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 111 –¥–æ 757575 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), 
–ø—Ä–∏ —ç—Ç–æ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π (–æ–Ω–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º 000).
–ò–≥—Ä–∞-–ª–æ—Ç–æ "C—É–ø–µ—Ä –ë–∏–Ω–≥–æ". –ò–≥—Ä–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ—é –æ–Ω–ª–∞–π–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–≥—Ä—ã –≤ –±–∏–Ω–≥–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–≤–æ–¥–∏—Ç—å –Ω–∞ –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ —Ä–æ–≤–Ω–æ 333 —Å–∏–º–≤–æ–ª–∞. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ ljust().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–º–µ—Ä –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
1  16 31 46 61
10 30 42 47 68
3  18 0  48 63
9  19 34 49 70
5  20 35 50 65
–í–æ–∑–º–æ–∂–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –±–∏–Ω–≥–æ.
–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–¥–∞ üü°'''

# import random
# lst = list()
# list_final = [[0]*5 for _ in range(5)]
# # print(list_final)
# while len(lst) < 25:
#     n = random.randint(1, 75)
#     if n not in lst:
#         lst.append(n)
# lst[12] = 0
# # print(lst)
# c = 0
# for i in range(len(list_final)):
#     for j in range(len(list_final)):
#         list_final[i][j] = lst[c]
#         c += 1
#         print(str(list_final[i][j]).ljust(3),end='')
#     print()

# another way
# from random import sample
#
# numbers = sample(list(range(1, 76)), 25)
# bingo = [numbers[i:i + 5] for i in range(0, 21, 5)]
# bingo[2][2] = 0
#
# for i in range(5):
#     for j in range(5):
#         print(str(bingo[i][j]).ljust(3), end=' ')
#     print()

# another way
# from random import sample as r
#
# n = r(range(1, 75), 24)
# n = n[:12] + [0] + n[12:]
# [print(''.join(str(n[i * 5 + j]).ljust(3) for j in range(5))) for i in range(5)]


# another way
# from random import sample
# line = sample(range(1, 76), 25)
# card = [line[i: i + 5] for i in (0, 5, 10, 15, 20)]
# card[2][2] = 0
# for line in card:
#     line = [str(x).ljust(3, ' ') for x in line]
#     print(*line, sep='')

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É –µ–≥–æ —Ç–∞–π–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º 
—Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nnn ‚Äì –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤. –î–∞–ª–µ–µ –∏–¥—É—Ç nnn —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞ (–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º) –∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –µ–≥–æ —Ç–∞–π–Ω–æ–≥–æ –¥—Ä—É–≥–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å–æ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–ª—å–∑—è –±—ã—Ç—å —Ç–∞–π–Ω—ã–º –¥—Ä—É–≥–æ–º —Å–∞–º–æ–º—É —Å–µ–±–µ –∏ –Ω–µ–ª—å–∑—è –±—ã—Ç—å —Ç–∞–π–Ω—ã–º –¥—Ä—É–≥–æ–º –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ç–µ—Å—Ç—ã —ç—Ç–æ –ª–∏—à—å –æ–±—Ä–∞–∑—Ü—ã –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–±–æ—Ä–∞ —Ç–∞–π–Ω—ã—Ö –¥—Ä—É–∑–µ–π.'''
'''Sample Input 1:
3
–°–≤–µ—Ç–ª–∞–Ω–∞ –ó—É–µ–≤–∞
–ê—Ä–∫–∞–¥–∏–π –ë–µ–ª—ã—Ö
–ë–æ—Ä–∏—Å –ë–æ–∫–æ–≤
Sample Output 1:
–°–≤–µ—Ç–ª–∞–Ω–∞ –ó—É–µ–≤–∞ - –ë–æ—Ä–∏—Å –ë–æ–∫–æ–≤
–ê—Ä–∫–∞–¥–∏–π –ë–µ–ª—ã—Ö - –°–≤–µ—Ç–ª–∞–Ω–∞ –ó—É–µ–≤–∞
–ë–æ—Ä–∏—Å –ë–æ–∫–æ–≤ - –ê—Ä–∫–∞–¥–∏–π –ë–µ–ª—ã—Ö'''
# import random
# n = int(input())
# lst = [input() for i in range(n)]   #—Å–æ–∑–¥–∞–ª —Å–ø–∏—Å–æ–∫
# lst_friends = lst[:]
# lst_final = list()
# random.shuffle(lst_friends)     #–ø–µ—Ä–µ–º–µ—à–∞–ª –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
# def searching():    #—Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è,–≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç—Ä–µ—Ç–∏–π —Å–ø–∏—Å–æ–∫(–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–º —Å–∞–º —Å–µ–±–µ)
#     for i in range(n):
#         if lst[i] == lst_friends[i]:
#             lst_final.clear()
#             random.shuffle(lst_friends)
#             searching()
#         else:
#             lst_final.append(lst_friends[i])
#
# searching()
# for i in range(n):
#     print(lst[i],'-',lst_final[i])



# another way
# from random import shuffle
#
# lst1 = [input() for _ in range(int(input()))]
# lst2 = lst1[:]
# while not all([lst1[i] != lst2[i] for i in range(len(lst2))]):
#   shuffle(lst2)
# for i in range(len(lst1)):
#   print(f"{lst1[i]} - {lst2[i]}")


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç nnn –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π mmm —Å–∏–º–≤–æ–ª–æ–≤, 
—Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∫—Ä–æ–º–µ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å –º–µ–∂–¥—É —Å–æ–±–æ–π:
    ¬´l¬ª (L –º–∞–ª–µ–Ω—å–∫–æ–µ);
    ¬´I¬ª (i –±–æ–ª—å—à–æ–µ);
    ¬´1¬ª (—Ü–∏—Ñ—Ä–∞);
    ¬´o¬ª –∏ ¬´O¬ª (–±–æ–ª—å—à–∞—è –∏ –º–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤—ã);
    ¬´0¬ª (—Ü–∏—Ñ—Ä–∞).
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞ nnn –∏ mmm, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ nnn –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π mmm —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞—Ç—å, —á—Ç–æ —á–∏—Å–ª–∞ nnn –∏ mmm –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–æ–≤—ã, —á—Ç–æ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í –∫–∞–∂–¥–æ–º –ø–∞—Ä–æ–ª–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ –∏ –±—É–∫–≤–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º –∏ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É–¥–æ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ –¥–≤—É—Ö –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
    —Ñ—É–Ω–∫—Ü–∏—è generate_password(length) ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π length —Å–∏–º–≤–æ–ª–æ–≤;
    —Ñ—É–Ω–∫—Ü–∏—è generate_passwords(count, length) ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ count —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π length —Å–∏–º–≤–æ–ª–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ç–µ—Å—Ç—ã ‚Äì —ç—Ç–æ –ª–∏—à—å –æ–±—Ä–∞–∑—Ü—ã –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.
–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–¥–∞ üü°
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
9
7
Sample Output 1:
YbykdW8
heEWSyL
MDxYCzf
syWRujr
mFGBYNJ
bhmg5ip
2XmPgsx
hy7UMVs
JzKPyBw'''

# import random
# from string import *
#
# letter = ''.join((set(ascii_letters) | set(digits)) - set('lI1oO0'))
# def generate_password(length):
#     l = [print(*random.choice(letter),sep='') for _ in range(length)]
#     return l
# def generate_passwords(count, length):
#     l = [print(*[random.choice(letter) for _ in range(length)], sep='') for _ in range(count)]
#
# n, m = int(input()), int(input())
# # print(generate_password(m))
# generate_passwords(n,m)

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç nnn –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π mmm —Å–∏–º–≤–æ–ª–æ–≤, 
—Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∫—Ä–æ–º–µ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å –º–µ–∂–¥—É —Å–æ–±–æ–π:
    ¬´l¬ª (L –º–∞–ª–µ–Ω—å–∫–æ–µ);
    ¬´I¬ª (i –±–æ–ª—å—à–æ–µ);
    ¬´1¬ª (—Ü–∏—Ñ—Ä–∞);
    ¬´o¬ª –∏ ¬´O¬ª (–±–æ–ª—å—à–∞—è –∏ –º–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤—ã);
    ¬´0¬ª (—Ü–∏—Ñ—Ä–∞).
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –≤ –∫–∞–∂–¥–æ–º –ø–∞—Ä–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ –∏ 
–∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º –∏ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞ nnn –∏ mmm, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ nnn –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π mmm —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞—Ç—å, —á—Ç–æ —á–∏—Å–ª–∞ nnn –∏ mmm –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–æ–≤—ã, —á—Ç–æ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É–¥–æ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ –¥–≤—É—Ö –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
    —Ñ—É–Ω–∫—Ü–∏—è generate_password(length) ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π length —Å–∏–º–≤–æ–ª–æ–≤;
    —Ñ—É–Ω–∫—Ü–∏—è generate_passwords(count, length) ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ count —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π length —Å–∏–º–≤–æ–ª–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ç–µ—Å—Ç—ã ‚Äì —ç—Ç–æ –ª–∏—à—å –æ–±—Ä–∞–∑—Ü—ã –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.
–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–¥–∞ üü°
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
9
7
Sample Output 1:
iHnPg7q
Njj9m3N
tQ9v5ut
6qPZ3tV
6gVScya
kU8ncAY
5CKX9Da
UTQRve4
FyRe8NN'''

# import random
# from string import *
#
# letter = ''.join((set(ascii_letters) | set(digits)) - set('lI1oO0'))
# digit = ''.join(set(digits) - set('lI1oO0'))
# upper = ''.join(set(ascii_uppercase) - set('lI1oO0'))
# lower = ''.join(set(ascii_lowercase) - set('lI1oO0'))
# def generate_passwords(count, length):
#     for _ in range(count):
#         s = [random.choice(letter) for _ in range(length-3)]
#         s.append(random.choice(digit))
#         s.append(random.choice(upper))
#         s.append(random.choice(lower))
#         random.shuffle(s)
#         print(*s,sep='')
#
# n, m = int(input()), int(input())
# # n , m = 5,6
# generate_passwords(n,m)


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —Ñ–∏–≥—É—Ä—ã, –∑–∞–¥–∞–≤–∞–µ–º–æ–π —Å –ø–æ–º–æ—â—å—é —Å–∏—Å—Ç–µ–º—ã –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤:

{‚àí2‚â§x‚â§2‚àí2‚â§y‚â§2x3+y4+2‚â•03x+y2‚â§2
\begin{cases} -2\le x \le 2\\ -2\le y \le 2\\ x^3+y^4 + 2 \ge 0\\ 3x+y^2 \le 2 \end{cases}
‚é©
‚é®
‚éß‚Äã‚àí2‚â§x‚â§2‚àí2‚â§y‚â§2x3+y4+2‚â•03x+y2‚â§2‚Äã'''


# import random
#
# n = 10**6       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
# k = 0
# s0 = 16
# for _ in range(n):
#     x = random.uniform(-2, 2)
#     y = random.uniform(-2, 2)
#
#     if x ** 3 + y ** 4 >= 0 and 3 * x + y ** 2 <= 2:
#         k += 1
#
# print((k/n)*s0)

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ œÄ\piœÄ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–ª–æ—â–∞–¥—å –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∫—Ä—É–≥–∞, —Ç–æ –µ—Å—Ç—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º, —Ä–∞–≤–Ω—ã–º R=1R = 1R=1 —Ä–∞–≤–Ω–∞ S=œÄR2=œÄS = \pi R^2 = \piS=œÄR2=œÄ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏–º–µ–µ—Ç –≤–∏–¥ x2+y2=1x^2+y^2 = 1x2+y2=1.'''

# import random
#
# n = 10**6       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
# k = 0
# s0 = 4
# for _ in range(n):
#     x = random.uniform(-1, 1)
#     y = random.uniform(-1, 1)
#
#     if x ** 2 + y ** 2 < 1 :
#         k += 1
#
# print((k/n)*s0)

'''Decimal —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s. 
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å—É–º–º—É –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ Decimal —á–∏—Å–ª–∞.'''
# from decimal import *
# s = '0.77 4.03 9.06 3.80 7.08 5.88 0.23 4.65 2.79 0.90 4.23 2.15 3.24 8.57 0.10 8.57 1.49 5.64 3.63 8.36 1.56 6.67 1.46 5.26 4.83 7.23 1.22 1.02 7.82 9.97 5.40 9.79 9.82 2.78 2.96 0.07 1.72 7.24 7.84 9.23 1.71 6.24 5.78 5.37 0.03 9.60 8.86 2.73 5.83 6.50'
# l = [Decimal(i) for i in s.split()]
# maximum = max(l)
# minimum = min(l)
# print(maximum + minimum)

'''Decimal —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, 
—á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª, –∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ 555 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.'''
# from decimal import *
# s = '9.73 8.84 8.92 9.60 9.32 8.97 8.53 1.26 6.62 9.85 1.85 1.80 0.83 6.75 9.74 9.11 9.14 5.03 5.03 1.34 3.52 8.09 7.89 8.24 8.23 5.22 0.30 2.59 1.25 6.24 2.14 7.54 5.72 2.75 2.32 2.69 9.32 8.11 4.53 0.80 0.08 9.36 5.22 4.08 3.86 5.56 1.43 8.36 6.29 5.13'
#
# l = [Decimal(i) for i in s.split()]
# print(sum(l))
# l1 = sorted(l,reverse=True)
# print(*l1[:5])



'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å—É–º–º—É –Ω–∞–∏–±–æ–ª—å—à–µ–π –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–π —Ü–∏—Ñ—Ä—ã Decimal —á–∏—Å–ª–∞.
–ü–æ–¥—Å–∫–∞–∑–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ as_tuple().
–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–¥–∞ üü°
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
12.1244354689
Sample Output 1:
10
Sample Input 2:
0.1244354689
Sample Output 2:
9'''
# from decimal import *
# num = input()
# num_tuple = Decimal(num)
# l = num_tuple.as_tuple()
# if '0' in num:
#     print(max(l.digits)+ 0)
# else:
#     print(max(l.digits)+min(l.digits))


'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è Decimal —á–∏—Å–ª–æ ddd. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:
ed+ln‚Å°(d)+lg‚Å°(d)+de^{d} + \ln(d) + \lg (d) + \sqrt{d}
ed+ln(d)+lg(d)+d
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ ddd.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
–ü–æ–¥—Å–∫–∞–∑–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã —Ç–∏–ø–∞ 
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1.1
Sample Output 1:
4.189677737079134559844013562'''
# from decimal import *
# d = Decimal(input())
# print(d.exp() + d.ln() + d.log10() + d.sqrt())


'''–î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ numbers –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥,
—á—Ç–æ–±—ã –æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤—ã–≤–µ–ª –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–π –¥—Ä–æ–±–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ = –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è –¥—Ä–æ–±—å
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏
6.34 = 317/50
4.08 = 102/25
3.04 = 76/25
...'''

# from fractions import Fraction
#
# numbers = ['6.34', '4.08', '3.04', '7.49', '4.45', '5.39', '7.82', '2.76', '0.71', '1.97', '2.54', '3.67', '0.14', '4.29', '1.84', '4.07', '7.26', '9.37', '8.11', '4.30', '7.16', '2.46', '1.27', '0.29', '5.12', '4.02', '6.95', '1.62', '2.26', '0.45', '6.91', '7.39', '0.52', '1.88', '8.38', '0.75', '0.32', '4.81', '3.31', '4.63', '7.84', '2.25', '1.10', '3.35', '2.05', '7.87', '2.40', '1.20', '2.58', '2.46']
#
# l = [print(f'{i} = {Fraction(i)}') for i in numbers]

'''–î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å—É–º–º—É –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —á–∏—Å–ª–∞ –≤ –≤–∏–¥–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–π –¥—Ä–æ–±–∏.'''

# from fractions import Fraction
#
# s = '0.78 4.3 9.6 3.88 7.08 5.88 0.23 4.65 2.79 0.90 4.23 2.15 3.24 8.57 0.10 8.57 1.49 5.64 3.63 8.36 1.56 6.67 1.46 5.26 4.83 7.13 1.22 1.02 7.82 9.97 5.40 9.79 9.82 2.78 2.96 0.07 1.72 7.24 7.84 9.23 1.71 6.24 5.78 5.37 0.03 9.60 8.86 2.73 5.83 6.50 0.123 0.00021'
#
# l = [Fraction(i) for i in s.split()]
# print(max(l)+ min(l))

'''–î–∞–Ω—ã –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ mmm –∏ nnn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∫—Ä–∞—â–∞–µ—Ç –¥—Ä–æ–±—å mn\dfrac{m}{n}nm‚Äã –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, —á–∏—Å–ª–∏—Ç–µ–ª—å –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥—Ä–æ–±–∏, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
3
6
Sample Output 1:
1/2'''
# from fractions import Fraction as F
# n, m = int(input()),int(input())
# print(F(n,m))

'''–î–∞–Ω—ã –¥–≤–µ –¥—Ä–æ–±–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ a/b. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö —Å—É–º–º—É, —Ä–∞–∑–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ —á–∞—Å—Ç–Ω–æ–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –¥—Ä–æ–±–∏, –∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É, —Ä–∞–∑–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ —á–∞—Å—Ç–Ω–æ–µ –¥–≤—É—Ö –¥—Ä–æ–±–µ–π.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç—Ä–µ—Ç–∏–π —Ç–µ—Å—Ç: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥—Ä–æ–±–∏ —Å–æ–∫—Ä–∞—â–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–Ω–æ.
 Sample Input 1:
2/3
3/7
Sample Output 1:
2/3 + 3/7 = 23/21
2/3 - 3/7 = 5/21
2/3 * 3/7 = 2/7
2/3 / 3/7 = 14/9'''

# from fractions import Fraction as F
# a, b = input(), input()
# print(f'{a} + {b} = {F(a)+F(b)}')
# print(f'{a} - {b} = {F(a)-F(b)}')
# print(f'{a} * {b} = {F(a)*F(b)}')
# print(f'{a} / {b} = {F(a)/F(b)}')

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —Ä–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—é –≤—ã—Ä–∞–∂–µ–Ω–∏—è 
112+122+132+142+‚Ä¶+1n2\dfrac{1}{1^2} + \dfrac{1}{2^2} + \dfrac{1}{3^2} + \dfrac{1}{4^2} + \ldots + \dfrac{1}{n^2}
121‚Äã+221‚Äã+321‚Äã+421‚Äã+‚Ä¶+n21‚Äã
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –¥—Ä–æ–±—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º–æ–π.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä—è–¥–µ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1
Sample Output 1:
1
Sample Input 2:
2
Sample Output 2:
5/4'''

# from fractions import Fraction as F
#
# n = int(input())
# summ = 0
# for det in range(1,n + 1):
#     summ += F(1, det ** 2)
# print(summ)

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —Ä–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—é –≤—ã—Ä–∞–∂–µ–Ω–∏—è 
11!+12!+13!+14!+‚Ä¶+1n!\dfrac{1}{1!} + \dfrac{1}{2!} + \dfrac{1}{3!} + \dfrac{1}{4!} + \ldots + \dfrac{1}{n!}
1!1‚Äã+2!1‚Äã+3!1‚Äã+4!1‚Äã+‚Ä¶+n!1‚Äã
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –¥—Ä–æ–±—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º–æ–π.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é factorial –∏–∑ –º–æ–¥—É–ª—è math.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1
Sample Output 1:
1'''

# from fractions import Fraction as F
# from math import factorial
# n = int(input())
# summ = 0
# for det in range(1,n + 1):
#     summ += F(1, factorial(det))
# print(summ)

'''–î–∏–º–∞ —É—á–∏—Ç—Å—è –≤ —Å–µ–¥—å–º–æ–º –∫–ª–∞—Å—Å–µ –∏ —Å–µ–π—á–∞—Å –æ–Ω–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –¥—Ä–æ–±–∏ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∏—Ç–µ–ª–µ–º –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–º.
–í—á–µ—Ä–∞ –Ω–∞ —É—Ä–æ–∫–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –î–∏–º–∞ —É–∑–Ω–∞–ª, —á—Ç–æ –¥—Ä–æ–±—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π, –µ—Å–ª–∏ –µ–µ —á–∏—Å–ª–∏—Ç–µ–ª—å –º–µ–Ω—å—à–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è,
–∏ –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–≤–Ω–æ–π –µ–π –¥—Ä–æ–±–∏ —Å –º–µ–Ω—å—à–∏–º–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∏—Ç–µ–ª–µ–º –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–º.
–î–∏–º–∞ –æ—á–µ–Ω—å –ª—é–±–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ø–æ—ç—Ç–æ–º—É –¥–æ–º–∞ –æ–Ω –¥–æ–ª–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª, –ø—Ä–∏–¥—É–º—ã–≤–∞—è –∏ —Ä–µ—à–∞—è —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º—ã–º–∏ –¥—Ä–æ–±—è–º–∏. 
–û–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á –î–∏–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, 
–∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º—É—é –¥—Ä–æ–±—å —Å —Å—É–º–º–æ–π —á–∏—Å–ª–∏—Ç–µ–ª—è –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è —Ä–∞–≤–Ω–æ–π nnn.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è gcd(), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å (–ù–û–î) –¥–≤—É—Ö —á–∏—Å–µ–ª.
–§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –º–æ–¥—É–ª–µ math.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
10
Sample Output 1:
3/7'''
# from fractions import Fraction
# num = int(input())
# l = list()
# j1 = 0
# for i in range(1, num + 1):
#     for j in range(num, 0, -1):
#         if i < j and i + j == num:
#             l.append(Fraction(i, j))
# l1 = [i for i in l if i.numerator + i.denominator == num]
# print(max(l1))

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –≤—Å–µ –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º—ã–µ –¥—Ä–æ–±–∏,
–∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–µ –º–µ–∂–¥—É 000 –∏ 111, –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç nnn.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n,‚Äân>1n, \, n > 1n,n>1.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è gcd(), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å (–ù–û–î) –¥–≤—É—Ö —á–∏—Å–µ–ª.
–§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –º–æ–¥—É–ª–µ math.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
5
Sample Output 1:
1/5
1/4
1/3
2/5
1/2
3/5
2/3
3/4
4/5'''
# from fractions import Fraction as F
# n = int(input())
# l = list()
# for i in range(1, n + 1):
#     for j in range(1, n + 1):
#         if F(i, j) < 1:
#             l.append(F(i,j))
# print(*sorted(set(l)),sep='\n')


'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é find_top_20 *
–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º (candidates)  –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å  –∏–º–µ–Ω–∞–º–∏ 20 —á–µ–ª–æ–≤–µ–∫, 
–Ω–∞–±—Ä–∞–≤—à–∏—Ö –Ω–∞–∏–±–æ–ª—å—à–µ–µ –°–£–ú–ú–ê–†–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (—Å —É—á–µ—Ç–æ–º extra –±–∞–ª–ª–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω—É—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.
–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ–¥–µ–Ω –Ω–∏–∂–µ.'''

# candidates = [
#  {"name": "Vasya",  "scores": {"math": 58, "russian_language": 62, "computer_science": 48}, "extra_scores":0},
#  {"name": "Fedya",  "scores": {"math": 33, "russian_language": 85, "computer_science": 42},  "extra_scores":2},
#  {"name": "Petya",  "scores": {"math": 92, "russian_language": 33, "computer_science": 34},  "extra_scores":1}
# ]
# l = list()
# s = {}
# for i in candidates:
#     summ = 0
#     for j in i["scores"].values():
#         summ +=j
#     summ += i["extra_scores"]
#     s.setdefault(i['name'], summ)
#
# sorted_dict = {}
# sorted_keys = sorted(s, key=s.get, reverse=True)
#
# for w in sorted_keys:
#     sorted_dict[w] = s[w]
#
# list_final = list()
# for i in sorted_dict.keys():
#     list_final.append(i)
# print(list_final[:20])


'''–í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_inductees *
–§—É–Ω–∫—Ü–∏—è get_inductees –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 3 —Å–ø–∏—Å–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã. –í –ø–µ—Ä–≤–æ–º —Å–ø–∏—Å–∫–µ (names) ‚Äî –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, 
–ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –∏—Ö —Ç–æ—á–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å. –í–æ –≤—Ç–æ—Ä–æ–º (birthday_years) ‚Äî –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è. 
–í —Ç—Ä–µ—Ç—å–µ–º (genders) ‚Äî –ø–æ–ª —Å—Ç—É–¥–µ–Ω—Ç–∞.–ß–∞—Å—Ç–∏—á–Ω–æ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–≤–∏–¥—É –∏—Å–ø–æ—Ä—á–µ–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –±—É–º–∞–≥–∏.
 –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –∏–ª–∏ –º–æ–≥—É—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å 18 –ª–µ—Ç –≤ 2021 –≥–æ–¥—É,
  –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Å—Ç–∞—Ä—à–µ 30 –ª–µ—Ç. C—Ç—É–¥–µ–Ω—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ—á–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - –ø–æ–ø–∞–¥–∞—é—Ç –æ–Ω–∏ –≤ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –Ω–µ—Ç (–∏–∑-–∑–∞ –ø–æ—Ä—á–∏ –¥–∞–Ω–Ω—ã—Ö),
   –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.                                                                                                                                                                                   –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ–¥–µ–Ω –Ω–∏–∂–µ                                                                                                                                                                                                                        
–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:'''
# names = ["Vasya","Alice","Petya","Jenny","Fedya","Viola","Mark","Chris","Margo"]
# birthday_years = [1962,1995,2000,None,None,None,None,1998,2001]
# genders = ["Male","Female","Male","Female","Male",None,None,None,None]
# # print(len(names))
# recruit = [names[i] for i in range(len(names)) if birthday_years[i] is not None and 18 < (2021 - birthday_years[i]) <= 30 and genders[i] is not None and genders[i] == 'Male']
# not_recruit = [names[i] for i in range(len(names)) if birthday_years[i] is None or genders[i] is None]
# print(recruit)
# print(not_recruit)

'''–í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é find_athlets *
–§—É–Ω–∫—Ü–∏—è find_athlets –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 3 —Å–ø–∏—Å–∫–∞ —Å –∏–º–µ–Ω–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –í –ø–µ—Ä–≤–æ–º —Å–ø–∏—Å–∫–µ (know_english) ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, 
–∫—Ç–æ —Ö–æ—Ä–æ—à–æ –≤–ª–∞–¥–µ–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º. –í—Ç–æ—Ä–æ–π (sportsmen) ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∞ —Ç–µ—Ö, –∫—Ç–æ —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º. 
–ù—É –∏ —Ç—Ä–µ—Ç–∏–π (more_than_20_years) ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö, –∫—Ç–æ —Å—Ç–∞—Ä—à–µ 20 –ª–µ—Ç. 
–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –≤—Å–µ —Ç—Ä–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è. 
                                                            –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ–¥–µ–Ω –Ω–∏–∂–µ.
–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:'''
# know_english = ["Vasya","Jimmy","Max","Peter","Eric","Zoi","Felix"]
# sportsmen = ["Don","Peter","Eric","Jimmy","Mark"]
# more_than_20_years = ["Peter","Julie","Jimmy","Mark","Max"]
# print(list(set(know_english)& set(sportsmen) & set(more_than_20_years)))

'''–î–∞–Ω—ã –¥–≤–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö —Å—É–º–º—É, —Ä–∞–∑–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –¥–≤–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–ª–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1+2j
-2+4j
Sample Output 1:
(1+2j) + (-2+4j) = (-1+6j)
(1+2j) - (-2+4j) = (3-2j)
(1+2j) * (-2+4j) = (-10+0j)'''

# n, m = complex(input()), complex(input())
# print(f'{n} + {m} = {n+m}')
# print(f'{n} - {m} = {n-m}')
# print(f'{n} * {m} = {n*m}')


'''–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ numbers. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, 
—á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –º–æ–¥—É–ª–µ–º –∏ —Å–∞–º –º–æ–¥—É–ª—å —á–∏—Å–ª–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ú–æ–¥—É–ª—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ abs().'''

# numbers = [3 + 4j, 3 + 1j, -7 + 3j, 4 + 8j, -8 + 10j, -3 + 2j, 3 - 2j, -9 + 9j, -1 - 1j, -1 - 10j, -20 + 15j, -21 + 1j, 1j, -3 + 8j, 4 - 6j, 8 + 2j, 2 + 3j]
#
# num_list = [abs(complex(i)) for i in numbers]
# print(numbers[num_list.index(max(num_list))])
# print(max(num_list))

'''–î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn –∏ –¥–≤–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–ª–∞ z1,‚Äâz2z_1, \, z_2z1‚Äã,z2‚Äã. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, 
–∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
z1n+z2n+z1Àân+z2Àân+1.z_1^n + z_2^n + \bar{z_1}^n + \bar{z_2}^{n+1}.
z1n‚Äã+z2n‚Äã+z1‚ÄãÀâ‚Äãn+z2‚ÄãÀâ‚Äãn+1.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn –∏ –¥–≤–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–ª–∞ z1z_1z1‚Äã –∏ z2z_2z2‚Äã, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ß–∏—Å–ª–æ z1Àâ\bar{z_1}z1‚ÄãÀâ‚Äã —è–≤–ª—è–µ—Ç—Å—è —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã–º –∫ —á–∏—Å–ª—É z1z_1z1‚Äã.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1
2+3j
1+4j
Sample Output 1:
(-10-4j)'''

# n, z1, z2 = int(input()), complex(input()), complex(input())
# print(z1 ** n + z2 ** n + z1.conjugate()**n + z2.conjugate()**(n + 1))


# import turtle
# i = 0
# while i < 72:
#     turtle.left(5)
#     turtle.forward(10)
#     i += 1

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫.
–ü—Ä–æ–≥—Ä–∞–º–º—É –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ rectangle(width, height), –≥–¥–µ width, height ‚Äì —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.'''

# import turtle
# def rectangle(width,height):
#     for _ in range(2):
#         turtle.forward(width)
#         turtle.left(90)
#         turtle.forward(height)
# rectangle(int(input()),int(input()))

'''
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫.'''
# import turtle
# def triangle(side):
#     for _ in range(3):
#         turtle.forward(side)
#         turtle.left(60)
# triangle(int(input()))

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Ç—Ä–µ—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.'''
# import turtle
# def three_rectangles(side):
#     for _ in range(3):
#         for _ in range(4):
#             turtle.forward(side)
#             turtle.left(90)
#         turtle.left(15)
# three_rectangles(int(input()))


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É –∏–∑ –≤–æ—Å—å–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.'''
# import turtle
# def eight_rectangles(side):
#     for _ in range(2):
#         for _ in range(4):
#             for _ in range(4):
#                 turtle.forward(side)
#                 turtle.left(90)
#             turtle.left(90)
#         turtle.left(45)
# eight_rectangles(int(input()))


'''hexagon(side)'''
# import turtle
# def hexagon(side):
#     for _ in range(6):
#         turtle.forward(side)
#         turtle.left(60)
#
# hexagon(100)

'''
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç —Å–æ—Ç—ã.'''
# import turtle
# def comb(side):
#     for _ in range(6):
#         for _ in range(6):
#             turtle.forward(side)
#             turtle.right(60)
#         turtle.forward(side)
#         turtle.left(60)
# comb(50)

'''
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç —Ä–æ–º–± —Å —É–≥–ª–∞–º–∏ 606060 –∏ 120120120 –≥—Ä–∞–¥—É—Å–æ–≤.'''
# import turtle
# def romb(side):
#     for _ in range(2):
#         turtle.forward(side)
#         turtle.left(120)
#         turtle.forward(side)
#         turtle.left(60)
# romb(100)

'''
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç —Å–Ω–µ–∂–∏–Ω–∫—É –∏–∑ 101010 —Ä–æ–º–±–æ–≤.'''
# import turtle
# def romb(side):
#     for _ in range(10):
#         for _ in range(2):
#             turtle.forward(side)
#             turtle.left(60)
#             turtle.forward(side)
#             turtle.left(120)
#         turtle.left(36)
# romb(100)

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –ª—É—á–∏ –∑–≤–µ–∑–¥—ã, –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ.
# forward() –∏ backward()
# import turtle
# def lights(height):
#     for _ in range(12):
#         turtle.forward(height)
#         turtle.backward(height)
#         turtle.left(30)
# lights(100)

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—è—Ç–∏–∫–æ–Ω–µ—á–Ω—É—é –∑–≤–µ–∑–¥—É.'''
# import tu

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–∑–æ—Ä, –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ.
'''
# import turtle
# def many_sq(side,num):
#     turtle.left(90)
#     for _ in range(num):
#         for _ in range(4):
#             turtle.forward(side)
#             turtle.left(90)
#         side += 5
# many_sq(50,15)


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∏—Å—É–µ—Ç —É–∑–æ—Ä, –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ.
'''
# import turtle
# def snail(len, angles):
#     turtle.left(90)
#     for _ in range(angles):
#         turtle.forward(len)
#         turtle.left(90)
#         len += 5
# snail(10,30)

# def fancy(length, char1, char2):
#     return (char1 + char2) * length + char1
#
#
# print(fancy(5, '-', '*'))

# def fancy(length, char1='-', char2='*'):
#     return (char1 + char2) * length + char1
#
#
# print(fancy(3, '.'))


'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é matrix(), –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
–ü—Ä–∏ —ç—Ç–æ–º (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ —Å–µ–±—è —Ç–∞–∫:
    matrix() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É 1√ó 11 \times 11√ó 1, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é;
    matrix(n) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É n√ó nn \times nn√ó n, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏;
    matrix(n, m) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∏–∑ nnn —Å—Ç—Ä–æ–∫ –∏ mmm —Å—Ç–æ–ª–±—Ü–æ–≤, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏;
    matrix(n, m, value) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∏–∑ nnn —Å—Ç—Ä–æ–∫ –∏ mmm —Å—Ç–æ–ª–±—Ü–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É value.
–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
print(matrix())                   # –º–∞—Ç—Ä–∏—Ü–∞ 1 √ó 1 –∏–∑ 0
print(matrix(3))                  # –º–∞—Ç—Ä–∏—Ü–∞ 3 √ó 3 –∏–∑ 0
print(matrix(2, 5))               # –º–∞—Ç—Ä–∏—Ü–∞ 2 √ó 5 –∏–∑ 0
print(matrix(3, 4, 9))            # –º–∞—Ç—Ä–∏—Ü–∞ 3 √ó 4 –∏–∑ 9
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
[[0]]
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
[[9, 9, 9, 9], [9, 9, 9, 9], [9, 9, 9, 9]]
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é matrix() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.'''

# def matrix(x = 1, y = None, num = 0):
#     if y == None:
#         y = x
#         return [[num*i for i in range(1, x + 1)] for j in range(1, x + 1)]
#     else:
#         return [[num for i in range(1, y  + 1)] for j in range(1, x + 1)]
#
# print(matrix(4,4,9))

# def my_func(*args):
#     print(type(args))
#     print(args)
#
#
# my_func()
# my_func(1, 2, 3)
# my_func('a', 'b')
'''–í –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ my_func() —É–∫–∞–∑–∞–Ω –≤—Å–µ–≥–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä args, –Ω–æ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π –ø–µ—Ä–µ–¥ –Ω–∏–º. 
–ó–≤–µ–∑–¥–æ—á–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–ø–∞—Ä–∞–º–µ—Ç—Ä) args –ø–æ–ª—É—á–∏—Ç –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, 
–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –µ–µ –≤—ã–∑–æ–≤–µ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–æ –∫–æ–Ω—Ü–∞.'''

'''–ü—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–º–µ—á–µ–Ω–Ω—ã–π –∑–≤–µ–∑–¥–æ—á–∫–æ–π, 
–ø—Ä–∏—á–µ–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –æ–Ω –¥–æ–ª–∂–µ–Ω –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏–Ω–∞—á–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–π.'''

'''–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
sum1 = sum([1, 2, 3, 4])        # —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ
sum2 = sum((10, 20, 30, 40))    # —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É —á–∏—Å–µ–ª –≤ –∫–æ—Ä—Ç–µ–∂–µ
print(sum1, sum2)
–≤—ã–≤–æ–¥–∏—Ç:
10 100
–û–¥–Ω–∞–∫–æ —Ñ—É–Ω–∫—Ü–∏—è sum() –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
sum1 = sum(1, 2, 3, 4)        
print(sum1)
–ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—é –æ—à–∏–±–∫–∏:
TypeError: sum expected at most 2 arguments, got 4
–ù–∞–ø–∏—à–µ–º —Å–≤–æ—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ sum(), —Ñ—É–Ω–∫—Ü–∏—é my_sum(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –∏—Ö —Å—É–º–º—É:
def my_sum(*args):
    return sum(args)    # args - —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂
–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
print(my_sum())
print(my_sum(1))
print(my_sum(1, 2))
print(my_sum(1, 2, 3))
print(my_sum(1, 2, 3, 4))
–≤—ã–≤–æ–¥–∏—Ç:
0
1
3
6
10'''


'''–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ my_func():
def my_func(**kwargs):
    print(type(kwargs))
    print(kwargs)
–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
my_func()
my_func(a=1, b=2)
my_func(name='Timur', job='Teacher')
–≤—ã–≤–æ–¥–∏—Ç: 
<class 'dict'>
{}
<class 'dict'>
{'a': 1, 'b': 2}
<class 'dict'>
{'name': 'Timur', 'job': 'Teacher'}
–ü–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ–ª—É—á–∞—é—â–∏–π –ø–æ–¥–æ–±–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å,
–ø—Ä–∏–Ω—è—Ç–æ –Ω–∞–∑—ã–≤–∞—Ç—å kwargs (–æ—Ç —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è keyword arguments). –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —ç—Ç–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.'''

'''–ü–∞—Ä–∞–º–µ—Ç—Ä  **kwargs –ø–∏—à–µ—Ç—Å—è –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
 –ü—Ä–∏ —ç—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏ *args –∏ **kwargs –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –≤–∏–¥—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
def my_func(a, b, *args, name='Gvido', age=17, **kwargs):
    print(a, b)
    print(args)
    print(name, age)
    print(kwargs)
–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
my_func(1, 2, 3, 4, name='Timur', age=28, job='Teacher', language='Python')
my_func(1, 2, name='Timur', age=28, job='Teacher', language='Python')
my_func(1, 2, 3, 4, job='Teacher', language='Python')
–≤—ã–≤–æ–¥–∏—Ç (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏):

1 2
(3, 4)
Timur 28
{'job': 'Teacher', 'language': 'Python'}

1 2
()
Timur 28
{'job': 'Teacher', 'language': 'Python'}

1 2
(3, 4)
Gvido 17
{'job': 'Teacher', 'language': 'Python'}
–ù–µ –Ω—É–∂–Ω–æ –ø—É–≥–∞—Ç—å—Å—è, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Å–µ —ç—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. 
–ù–æ –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ –∫–∞–∂–¥–∞—è –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏ –∫–∞–∫ —Ç–∞–∫–∏–µ —Ñ–æ—Ä–º—ã —Å–æ—á–µ—Ç–∞—Ç—å ‚Äî –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ.'''


'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é count_args(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ –Ω–µ–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(count_args())
print(count_args(10))
print(count_args('stepik', 'beegeek'))
print(count_args([], (''), 'a', 12, False))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
0
1
2
5
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é count_args() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.'''
# def count_args(*args):
#     return len(args)
#
# print(count_args())
# print(count_args(10))
# print(count_args('stepik', 'beegeek'))
# print(count_args([], (''), 'a', 12, False))


'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sq_sum(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(sq_sum())
print(sq_sum(2))
print(sq_sum(1.5, 2.5))
print(sq_sum(1, 2, 3))
print(sq_sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
0
4
8.5
14
385
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sq_sum() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.'''

# def sq_sum(*args):
#     summ = 0
#     for i in args:
#         summ += i ** 2
#     return summ
# print(sq_sum())
# print(sq_sum(2))
# print(sq_sum(1.5, 2.5))
# print(sq_sum(1, 2, 3))
# print(sq_sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é mean(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏
–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ –Ω–µ–µ —á–∏—Å–ª–æ–≤—ã—Ö (int –∏–ª–∏ float) –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Å–µ—Ö —Ç–∏–ø–æ–≤, –∫—Ä–æ–º–µ int –∏–ª–∏ float.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(mean())
print(mean(7))
print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
print(mean(True, ['stepik'], 'beegeek', (1, 2)))
print(mean(-1, 2, 3, 10, ('5')))
print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
0.0
7.0
2.0
0.0
3.5
5.5
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é type().'''

# def mean(*args):
#
#     l = [i for i in args if type(i) == int or type(i) == float]
#     if len(l) == 0:
#         return 0.0
#     else:
#         return (sum(l)/len(l))
#
# print(mean())
# print(mean(7))
# print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
# print(mean(True, ['stepik'], 'beegeek', (1, 2)))
# print(mean(-1, 2, 3, 10, ('5')))
# print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))


'''another way
'''
# def mean(*args):
#     s = [float(i) for i in args if type(i) in (int, float)]
#     if len(s) > 0:
#         return sum(s)/len(s)
#     else:
#         return 0.0

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é greet(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫ –∏–º–µ–Ω (–∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ) 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(greet('Timur'))
print(greet('Timur', 'Roman'))
print(greet('Timur', 'Roman', 'Ruslan'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
Hello, Timur!
Hello, Timur and Roman!
Hello, Timur and Roman and Ruslan!
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –§—É–Ω–∫—Ü–∏—è greet() –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç!
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é greet() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.'''

# def greet(a, *args):
#     if len(args) > 0:
#         st = 'Hello, ' + a + ' and ' + ' and '.join(args) + '!'
#     else:
#         st = 'Hello, ' + a + '!'
#     return st


# print(greet('Timur'))
# print(greet('Timur', 'Roman'))
# print(greet('Timur', 'Roman', 'Ruslan'))


# another way
# def greet(name, *args):
#     return f'Hello, {" and ".join((name,) + args)}!'

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_products(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ 
(–ª—é–±–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞) –ø–æ –æ–±—Ä–∞–∑—Ü—É: <–Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞>) <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> (–Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã). 
    –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ß–∏—Å–ª–∞, —Å–ø–∏—Å–∫–∏, –∫–æ—Ä—Ç–µ–∂–∏, —Å–ª–æ–≤–∞—Ä–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏ –∏—Ö –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print_products('–ë–∞–Ω–∞–Ω—ã', [1, 2], ('Stepik',), '–Ø–±–ª–æ–∫–∏', '', '–ú–∞–∫–∞—Ä–æ–Ω—ã', 5, True)
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
1) –ë–∞–Ω–∞–Ω—ã
2) –Ø–±–ª–æ–∫–∏
3) –ú–∞–∫–∞—Ä–æ–Ω—ã
–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print_products([4], {}, 1, 2, {'Beegeek'}, '') 
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ñ—É–Ω–∫—Ü–∏—è print_products() –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å (–ø–µ—á–∞—Ç–∞—Ç—å) –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–≥–æ.
'''

# def print_products(*args):
#     l = [i for i in args if type(i) == str and len(i) > 0]
#     if len(l) > 0:
#         for j in range(len(l)):
#             print(f'{j+1}) {l[j]}')
#     else:
#         print('–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
# print_products('–ë–∞–Ω–∞–Ω—ã', [1, 2], ('Stepik',), '–Ø–±–ª–æ–∫–∏', '', '–ú–∞–∫–∞—Ä–æ–Ω—ã', 5, True)


# another way
# def print_products(*products):
#     products = [i for i in products if isinstance(i, str) and i != '']
#     [print(f'{i+1}) {products[i]}') for i in range(len(products))] if len(products) > 0 else print('–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤')


'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é info_kwargs(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ 
–ø–µ—á–∞—Ç–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º: <–∏–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞>: <–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞>, 
–ø—Ä–∏ —ç—Ç–æ–º –∏–º–µ–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–ª–µ–¥—É—é—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher') 
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
age: 28
first_name: Timur
job: teacher
last_name: Guev'''

# def info_kwargs(**kwargs):
#     l = {i: kwargs[i] for i in kwargs}
#
#     for key, value in sorted(l.items()):
#         print(f'{key} : {value}')
#     # print(l)
# info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher')
#
# another way
# def info_kwargs(**kwargs):
#     for k, v in sorted(kwargs.items()):
#         print(f'{k}: {v}')

'''–ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ —è–∑—ã–∫ Python –º—É–ª—å—Ç–∏–ø–∞—Ä–∞–¥–∏–≥–º–µ–Ω–Ω—ã–π,
–æ–Ω –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ö–æ—Ä–æ—à–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∏ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞—Ä–∞–¥–∏–≥–º—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.'''

'''–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ min(), max(), sorted() ‚Äì —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã—à–µ—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∫–æ–¥–∞:
numbers = [10, -7, 8, -100, -50, 32, 87, 117, -210]
print(max(numbers, key=abs))        #  —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
print(min(numbers, key=abs))        #  —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
print(sorted(numbers, key=abs))     #  —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é abs –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –≤—ã—à–µ –∫–æ–¥ –≤—ã–≤–æ–¥–∏—Ç:
-210                                         # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç
-7                                           # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç
[-7, 8, 10, 32, -50, 87, -100, 117, -210]    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

'''–†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
def compare_by_second(point):
    return point[1]
def compare_by_sum(point):
    return point[0] + point[1]
points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]
print(sorted(points, key=compare_by_second))   # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ç–æ—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—Ä—Ç–µ–∂–∞
print(sorted(points, key=compare_by_sum))      # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ –∫–æ—Ä—Ç–µ–∂–∞
–û–Ω –≤—ã–≤–æ–¥–∏—Ç:
[(2, -4), (1, -1), (2, 3), (1, 5), (10, 9), (-10, 15), (7, 18)]
[(2, -4), (1, -1), (2, 3), (-10, 15), (1, 5), (10, 9), (7, 18)]'''

# def comparator(pair):
#     return pair[1]
#
#
# pairs = [(5, 4), (3, 2), (1, 7), (8, 2)]
# pairs.sort(key=comparator)
# print(pairs)
'''[(3, 2), (8, 2), (5, 4), (1, 7)]
'''

# def comparator(pair):
#     return pair[0] + pair[1]
#
# pairs = [(5, 4), (3, 2), (1, 7), (8, 2)]
# pairs.sort(key=comparator, reverse=True)
# print(pairs)
'''[(8, 2), (5, 4), (1, 7), (3, 2)]
'''

# def f1(x):
#     return 2*x+1
#
#
# def f2(x):
#     return x**2
#
#
# def f3(x):
#     return -x**2+1
#
#
# def f4(x):
#     return x-3
#
#
# funcs = [f1, f2, f3, f4]
# i = int(input())
# print(funcs[i](2))


'''–î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ—Ä—Ç–µ–∂–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π min() –∏ max()
–≤—ã–≤–æ–¥–∏—Ç —Ç–µ –∫–æ—Ä—Ç–µ–∂–∏ (–∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ), –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key.'''
# def comparator(a):
#     return sum(a)/len(a)
#
#
#
# numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34), (10, 20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4), (90, 1, -45, -21)]
#
# print(min(numbers, key=comparator))
# print(max(numbers, key=comparator))

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ points –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
# (—Ç–æ—á–∫–∏ (0;‚Äâ0)(0; \, 0)(0;0)). –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.

# def dist(args):
#     x, y = args[0], args[1]
#     return (x**2 + y**2)**0.5
#
#
#
# points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2), (0, 0), (-1, 3), (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]
#
# points.sort(key=dist)
#
# print(points)

'''–î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ—Ä—Ç–µ–∂–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ numbers 
–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å—É–º–º–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä—Ç–µ–∂–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –í —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –º—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–æ—Ä—Ç–µ–∂ (2,1,3)(2, 1, 3)(2,1,3) –º–µ–Ω—å—à–µ –∫–æ—Ä—Ç–µ–∂–∞ 
(6,4,5)(6, 4, 5)(6,4,5), —Ç–∞–∫ –∫–∞–∫ 1+3<4+61+3 < 4+61+3<4+6. –ü—Ä–∏ —ç—Ç–æ–º –∫–æ—Ä—Ç–µ–∂ (1,2,9)(1, 2, 9)(1,2,9) 
—Ä–∞–≤–µ–Ω –∫–æ—Ä—Ç–µ–∂—É (4,5,6)(4, 5, 6)(4,5,6), —Ç–∞–∫ –∫–∞–∫ 1+9 = 4+61+9 = 4+61+9 = 4+6.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key'''

# numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100), (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]
#
# def minmax(args):
#     return min(args) + max(args)
#
# numbers.sort(key=minmax)
# print(numbers)

'''C–ø–∏—Å–æ–∫ athletes —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞—Ö –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–µ–π: (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å).
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—é:
    111: –ø–æ –∏–º–µ–Ω–∏;
    222: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É;
    333: –ø–æ —Ä–æ—Å—Ç—É;
    444: –ø–æ –≤–µ—Å—É.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 111 –¥–æ 444 ‚Äì –Ω–æ–º–µ—Ä –ø–æ–ª—è –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—é —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
3
Sample Output 1:
–†—É—Å—Ç–∞–º 10 128 30
–î–∏–º–∞ 10 130 35
–¢–∏–º—É—Ä 11 135 39
–†—É—Å–ª–∞–Ω 9 140 33
–ú–∞—Ç–≤–µ–π 17 168 68
–ê–º–∏—Ä 16 170 70
–†–æ–º–∞ 16 188 100
–ü–µ—Ç—è 15 190 90'''

# athletes = [('–î–∏–º–∞', 10, 130, 35), ('–¢–∏–º—É—Ä', 11, 135, 39), ('–†—É—Å–ª–∞–Ω', 9, 140, 33), ('–†—É—Å—Ç–∞–º', 10, 128, 30), ('–ê–º–∏—Ä', 16, 170, 70), ('–†–æ–º–∞', 16, 188, 100), ('–ú–∞—Ç–≤–µ–π', 17, 168, 68), ('–ü–µ—Ç—è', 15, 190, 90)]

# def f1(x):
#     return x[0]
#
#
# def f2(x):
#     return x[1]
#
#
# def f3(x):
#     return x[2]
#
#
# def f4(x):
#     return x[3]
# commands = {1: f1, 2: f2, 3: f3, 4: f4}
# i = int(input())
# athletes_sorted = sorted(athletes, key=commands[i])
# [print(*i) for i in athletes_sorted]

# another way
# athletes = [('–î–∏–º–∞', 10, 130, 35), ('–¢–∏–º—É—Ä', 11, 135, 39), ('–†—É—Å–ª–∞–Ω', 9, 140, 33), ('–†—É—Å—Ç–∞–º', 10, 128, 30), ('–ê–º–∏—Ä', 16, 170, 70), ('–†–æ–º–∞', 16, 188, 100), ('–ú–∞—Ç–≤–µ–π', 17, 168, 68), ('–ü–µ—Ç—è', 15, 190, 90)]
#
# def gen_comparator(field=1):
#     def comp(seq):
#         return seq[field - 1]
#     return comp
#
# cmp = gen_comparator(int(input()))
# athletes.sort(key=cmp)
# for a in athletes:
#     print(*a)

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É.
–°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
    –∫–≤–∞–¥—Ä–∞—Ç: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç;
    –∫—É–±: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫—É–±;
    –∫–æ—Ä–µ–Ω—å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∏–∑ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞;
    –º–æ–¥—É–ª—å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –º–æ–¥—É–ª—å;
    —Å–∏–Ω—É—Å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ (–≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–Ω—É—Å —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫ —á–∏—Å–ª—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.'''

''' Sample Input 1:
5
–∫–≤–∞–¥—Ä–∞—Ç
Sample Output 1:
25'''
# from math import *
# def f1(num):
#     return num**2
# def f2(num):
#     return num **3
# def f3(num):
#     return num ** 0.5
# def f4(num):
#     return abs(num)
# def f5(num):
#     return sin(num)
#
# commands = {'–∫–≤–∞–¥—Ä–∞—Ç': f1, '–∫—É–±': f2, '–∫–æ—Ä–µ–Ω—å': f3, '–º–æ–¥—É–ª—å': f4, '—Å–∏–Ω—É—Å': f5}
# num = int(input())
# i = input()
# print(commands[i](num))

# another way
# import math
#
# def pwr(p):
#   def numpower(n):
#     return n**p
#   return numpower
#
# commands = {"–∫–≤–∞–¥—Ä–∞—Ç": pwr(2), "–∫—É–±": pwr(3), "–∫–æ—Ä–µ–Ω—å": pwr(0.5), "–º–æ–¥—É–ª—å": abs, "—Å–∏–Ω—É—Å": math.sin}
#
# n = int(input())
# command = input()
# print(commands[command](n))

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è —Å—É–º–º—ã –∏—Ö —Ü–∏—Ñ—Ä. 
–ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä, —Å–ª–µ–¥—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤–∑–∞–∏–º–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º.
–ü–æ–¥—Å–∫–∞–∑–∫–∞
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
12 14 79 7 4 123 45 90 111
Sample Output 1:
12 111 4 14 123 7 45 90 79
Sample Input 2:
10 11 12 13 14 15 16 17 18 19 20 21 22 23
Sample Output 2:
10 11 20 12 21 13 22 14 23 15 16 17 18 19'''

# def summa_tsifr(args):
#     return sum([int(i) for i in args])
#
# lis = [i for i in input().split()]
# print(*sorted(lis,key=summa_tsifr))

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è —Å—É–º–º—ã –∏—Ö —Ü–∏—Ñ—Ä.
–ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ —É –¥–≤—É—Ö —á–∏—Å–µ–ª –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —Å—É–º–º–∞ —Ü–∏—Ñ—Ä, –∏—Ö —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º.
–ü–æ–¥—Å–∫–∞–∑–∫–∞
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
111 14 79 7 4 123 90 45 12 171
Sample Output 1:
12 111 4 14 123 7 45 90 171 79
Sample Input 2:
19 20 21 22 23 10 11 12 13 14 15 16 17 18
Sample Output 2:
10 11 20 12 21 13 22 14 23 15 16 17 18 19
'''

# def summa_tsifr(args):
#     num = (int(i) for i in str(args))
#     return sum(num), args
#
# lis = [int(i) for i in input().split()]
# print(*sorted(lis, key=summa_tsifr))

# numbers = [-2, 45, 45, -7, -45, 37, -42, 27, -58, -58, -12, -27, -49, -27, -56, 4, -99, -11, 86]
#
# var1 = max(numbers, key=abs)
# var2 = min(map(abs, numbers))
# print(var2)



'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ map() 
–æ–∫—Ä—É–≥–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ numbers –¥–æ 222 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –∏—Ö, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.'''

# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item,2))
#     return result
#
#
# numbers = [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.12013, 23.22222, 90.09873, 45.45, 314.1528, 2.71828, 1.41546]
#
# num = map(round,numbers)
# print(*num,sep='\n')


# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
#
# def round_two(a):
#     return round(a, 2)
#
#
# numbers = [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.12013, 23.22222, 90.09873, 45.45, 314.1528, 2.71828,
#            1.41546]
#
# print(*map(round_two, numbers), sep='\n')


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ map() –æ—Ç–±–∏—Ä–∞–µ—Ç –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ numbers —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞,
–¥–∞—é—â–∏–µ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 555 –æ—Å—Ç–∞—Ç–æ–∫ 222, –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –∫—É–±—ã, –∫–∞–∂–¥—ã–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û—Å—Ç–∞—Ç–æ–∫ 222 –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 555 –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å —Å–∞–º–æ —á–∏—Å–ª–æ, –∞ –Ω–µ –µ–≥–æ –∫—É–±.'''


# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
# # another way
# # def numb(num):
# #     return 99 < num < 1000 and num % 5 == 2
#
# def filter(function, items):
#     result = []
#     for item in items:
#         if function(item):
#             result.append(item)
#     return result
#
# def three(a):
#     if 99 < a < 1000:
#         if a % 5 == 2:
#             return a
#
# def cube(a):
#     return a ** 3
#
# numbers = [1014, 1321, 675, 1215, 56, 1386, 1385, 431, 1058, 486, 1434, 696, 1016, 1084, 424, 1189, 475, 95, 1434, 1462, 815, 776, 657, 1225, 912, 537, 1478, 1176, 544, 488, 668, 944, 207, 266, 1309, 1027, 257, 1374, 1289, 1155, 230, 866, 708, 144, 1434, 1163, 345, 394, 560, 338, 232, 182, 1438, 1127, 928, 1309, 98, 530, 1013, 898, 669, 105, 130, 1363, 947, 72, 1278, 166, 904, 349, 831, 1207, 1496, 370, 725, 926, 175, 959, 1282, 336, 1268, 351, 1439, 186, 273, 1008, 231, 138, 142, 433, 456, 1268, 1018, 1274, 387, 120, 340, 963, 832, 1127]
#
# print(*map(cube, filter(three, numbers)),sep='\n')

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ numbers. 
–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏: —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ reduce(), –∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–π map() –∏ sum().'''

# def reduce(operation, items, initial_value):
#     acc = initial_value
#     for item in items:
#         acc = operation(acc, item)
#     return acc
#
# def add(x, y):
#     return x+y**2
#
# numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23, 35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58, 60, 30, 38, 67, 62, 36, 72, 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29, 84, 38, 35, 7, 54, 31, 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]
#
# red = reduce(add,numbers,0)
# print(red)

# another way
# def reduce(operation, items, initial_value):
#     acc = initial_value
#     for item in items:
#         acc = operation(acc, item)
#     return acc
#
# def x_on_x(element):
#     return element**2
#
# def add(one, two):
#     return one + two**2
#
# numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23, 35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58, 60, 30, 38, 67, 62, 36, 72, 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29, 84, 38, 35, 7, 54, 31, 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]
#
# #print(sum(map(x_on_x, numbers)))
# print(reduce(add, numbers, 0))


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 7 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ filter(), map() –∏ sum().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–∞ 7 –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω–æ–µ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ, –∞ –Ω–µ –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞.'''

# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
#
# def filter(function, items):
#     result = []
#     for item in items:
#         if function(item):
#             result.append(item)
#     return result
#
# def del_7(a):
#     return 9 < abs(a) < 100 and abs(a) % 7 == 0
#
# def square(a):
#     return a ** 2
#
#
# numbers = [77, 293, 28, 242, 213, 285, 71, 286, 144, 276, 61, 298, 280, 214, 156, 227, 228, 51, -4, 202, 58, 99, 270, 219, 94, 253, 53, 235, 9, 158, 49, 183, 166, 205, 183, 266, 180, 6, 279, 200, 208, 231, 178, 201, 260, -35, 152, 115, 79, 284, 181, 92, 286, 98, 271, 259, 258, 196, -8, 43, 2, 128, 143, 43, 297, 229, 60, 254, -9, 5, 187, 220, -8, 111, 285, 5, 263, 187, 192, -9, 268, -9, 23, 71, 135, 7, -161, 65, 135, 29, 148, 242, 33, 35, 211, 5, 161, 46, 159, 23, 169, 23, 172, 184, -7, 228, 129, 274, 73, 197, 272, 54, 278, 26, 280, 13, 171, 2, 79, -2, 183, 10, 236, 276, 4, 29, -10, 41, 269, 94, 279, 129, 39, 92, -63, 263, 219, 57, 18, 236, 291, 234, 10, 250, 0, 64, 172, 216, 30, 15, 229, 205, 123, -105]
#
# print(sum(map(square,filter(del_7,numbers))))


'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é func_apply(), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫, 
–≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è func_apply() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
def add3(x):
    return x + 3
def mul7(x):
    return x * 7
print(func_apply(mul7, [1, 2, 3, 4, 5, 6]))
print(func_apply(add3, [1, 2, 3, 4, 5, 6]))
print(func_apply(str, [1, 2, 3, 4, 5, 6]))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
[7, 14, 21, 28, 35, 42]
[4, 5, 6, 7, 8, 9]
['1', '2', '3', '4', '5', '6']
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é func_apply() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.'''



# def func_apply(function, list_num):
#     return [function(i) for i in list_num]
#
#
# def add3(x):
#     return x + 3
# def mul7(x):
#     return x * 7
# print(func_apply(mul7, [1, 2, 3, 4, 5, 6]))
# print(func_apply(add3, [1, 2, 3, 4, 5, 6]))
# print(func_apply(str, [1, 2, 3, 4, 5, 6]))

'''–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

def increase(num):
    return num + 7


numbers = [1, 2, 3, 4, 5, 6]
new_numbers = map(increase, numbers)     #  –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é map()

print(new_numbers)

–≤—ã–≤–µ–¥–µ—Ç –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç:

<map object at 0x...>

–¢–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –ø–æ—Ö–æ–∂ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç–µ–º, —á—Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —Ü–∏–∫–ª–æ–º for, —Ç–æ –µ—Å—Ç—å –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å. –¢–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤ Python –Ω–∞–∑—ã–≤–∞—é—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.

–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

def increase(num):
    return num + 7


numbers = [1, 2, 3, 4, 5, 6]
new_numbers = map(increase, numbers)

for num in new_numbers:    #  –∏—Ç–µ—Ä–∏—Ä—É–µ–º —Ü–∏–∫–ª–æ–º for
    print(num)

–≤—ã–≤–æ–¥–∏—Ç:

8
9
10
11
12
13

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ø–∏—Å–æ–∫, –Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π list():

new_numbers = list(map(increase, numbers))'''

# high_ord_func = lambda x, func: x + func(x)
#
# result = high_ord_func(2, lambda x: x * x) + high_ord_func(5, lambda x: x + 3)
#
# print(result)

'''–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è:
    –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ floats –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –≤–æ–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ –∫–≤–∞–¥—Ä–∞—Ç –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ–¥–Ω–æ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞;
    —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ words  –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã –¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 444 —Å–∏–º–≤–æ–ª–æ–≤;
    –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ numbers.
–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ç–æ—Ä–æ–ø–∏–ª—Å—è –∏ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º—É.'''

# from functools import reduce
#
# floats = [4.35, 6.09, 3.25, 9.77, 2.16, 8.88, 4.59, 34.23, 12.12, 4.67, 2.45, 9.32]
# words = ['racecar', 'akinremi', 'deed', 'temidayo', 'omoseun', 'civic', 'TATTARRATTAT', 'malayalam', 'nun']
# numbers = [4, 6, 9, 23, 5]
#
# # –ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥
# map_result = list(map(lambda num: round(num ** 2,1), floats))
# filter_result = list(filter(lambda name: len(name) > 4 and name == name[::-1], words))
# reduce_result = reduce(lambda num1, num2: num1 * num2, numbers, 1)
#
# print(map_result)
# print(filter_result)
# print(reduce_result)


'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter(), map(), sorted() –∏ reduce()
–≤—ã–≤–æ–¥–∏—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–ø–∏—Å–æ–∫ primary –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 10 000 000 —á–µ–ª–æ–≤–µ–∫, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
Cities: Beijing, Buenos Aires, ...
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –¢–µ—Å—Ç–∏—Ä—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∏–∫–∞–∫ –Ω–µ "–ø–æ–∫–∞—Ä–∞–µ—Ç" –≤–∞—Å –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter(),
map(), sorted() –∏ reduce(), –æ–¥–Ω–∞–∫–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Å—Ç–Ω–æ üòÉ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°—Ç–∞–≤–∏—Ç—å –∑–∞–ø—è—Ç—É—é –≤ –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥–∞ –Ω–µ –Ω—É–∂–Ω–æ.'''

# from functools import reduce
# data = [['Tokyo', 35676000, 'primary'],
#         ['New York', 19354922, 'nan'],
#         ['Mexico City', 19028000, 'primary'],
#         ['Mumbai', 18978000, 'admin'],
#         ['Sao Paulo', 18845000, 'admin'],
#         ['Delhi', 15926000, 'admin'],
#         ['Shanghai', 14987000, 'admin'],
#         ['Kolkata', 14787000, 'admin'],
#         ['Los Angeles', 12815475, 'nan'],
#         ['Dhaka', 12797394, 'primary'],
#         ['Buenos Aires', 12795000, 'primary'],
#         ['Karachi', 12130000, 'admin'],
#         ['Cairo', 11893000, 'primary'],
#         ['Rio de Janeiro', 11748000, 'admin'],
#         ['Osaka', 11294000, 'admin'],
#         ['Beijing', 11106000, 'primary'],
#         ['Manila', 11100000, 'primary'],
#         ['Moscow', 10452000, 'primary'],
#         ['Istanbul', 10061000, 'admin'],
#         ['Paris', 9904000, 'primary']]
#
# primary = list(filter(lambda prim: prim[2] == 'primary' and prim[1] > 10000000, data))
# f1 = sorted(list(map(lambda f1: f1[0], primary)))
# # print(f1)
# print('Cities: ', end='')
# print(*f1, sep=', ')


# another way
# cities = filter(lambda city: city[1] > 10 ** 7 and city[2] == 'primary', data)
# cities = map(lambda city: city[0], cities)
# cities = sorted(cities)
# cities = 'Cities: ' + reduce(lambda city1, city2: f'{city1}, {city2}', cities)
# print(cities)


# another way
# st = list(filter(lambda x: x[1] > 10000000 and x[2] == 'primary', data))
# st = list(map(lambda x: x[0], st))
# st.sort()
# result = 'Cities: ' + reduce(lambda num1, num2: num1 + ', ' + num2, st)
# print(result)

# numbers = [1, 2, 5, 3, 4]
# numbers.sort(key=lambda x: -x)
# print(numbers)
# [5, 4, 3, 2, 1]

# full_name = lambda first, last: f'Full name: {first.title()} {last.title()}'
# print(full_name('ben', 'affleck'))
# Full name: Ben Affleck

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é func, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True,
# –µ—Å–ª–∏ –æ–Ω –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ 19 –∏–ª–∏ –Ω–∞ 13 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
#
# print(func(19))
# print(func(13))
# print(func(20))
# print(func(15))
# print(func(247))
#
# –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
#
# True
# True
# False
# False
# True
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ –Ω—É–∂–Ω–æ.
# func = lambda x: True if x%13 ==0 or x%19 == 0 else False
# print(func(247))

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é func, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True,
–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –±—É–∫–≤—É a (—Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤—ã –Ω–µ–≤–∞–∂–µ–Ω) –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(func('abcd'))
print(func('bcda'))
print(func('abcda'))
print(func('Abcd'))
print(func('bcdA'))
print(func('abcdA'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
False
False
True
False
False
True'''

# func = lambda x: True if x[0].lower() == 'a' and x[-1].lower() == 'a' else False
# print(func('bbcd'))

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_non_negative_num, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π,
# –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True,
# –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (—Ü–µ–ª—ã–º –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º) –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
# print(is_non_negative_num('10.34ab'))
# print(is_non_negative_num('10.45'))
# print(is_non_negative_num('-18'))
# print(is_non_negative_num('-34.67'))
# print(is_non_negative_num('987'))
# print(is_non_negative_num('abcd'))
# print(is_non_negative_num('123.122.12'))
# print(is_non_negative_num('123.122'))
# –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
# False
# True
# False
# False
# True
# False
# False
# True

# is_non_negative_num = lambda x: True if x.count('.') < 2 and x.upper() == x.lower() else False
# print(is_non_negative_num('123.122'))

# another way
# is_non_negative_num = lambda q: q.replace('.', '', 1).isdigit()

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_num, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏
–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (—Ü–µ–ª—ã–º –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º) –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(is_num('10.34ab'))
print(is_num('10.45'))
print(is_num('-18'))
print(is_num('-34.67'))
print(is_num('987'))
print(is_num('abcd'))
print(is_num('123.122.12'))
print(is_num('-123.122'))
print(is_num('--13.2'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
False
True
True
True
True
False
False
True
False
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å—Ç–µ–ø–∞.'''
# is_num = lambda x: True if x.count('.') < 2 and x.upper() == x.lower() and x.count('-') < 2 and x.index('-') < 1 else False
# is_num = lambda q: q.replace('.', '', 1).replace('-','',1).isdigit() and '-' not in q[1:]

# is_num = lambda q: q.replace('.', '', 1).isdigit()
# print(is_num('10.34ab'))
# print(is_num('10.45'))
# print(is_num('-18'))
# print(is_num('-34.67'))
# print(is_num('987'))
# print(is_num('abcd'))
# print(is_num('123.122.12'))
# print(is_num('-123.122'))
# print(is_num('--13.2'))
# print(is_num('1-1'))

# another way
# is_non_negative_num = lambda q: q.replace('.', '', 1).isdigit()
#
# is_num = lambda q: is_non_negative_num(q[1:]) if q[0] == '-' else is_non_negative_num(q)

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ sorted() –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ words, 
–∏–º–µ—é—â–∏–µ –¥–ª–∏–Ω—É —Ä–æ–≤–Ω–æ 6 —Å–∏–º–≤–æ–ª–æ–≤. –°–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.'''

# words = ['beverage', 'monday', 'abroad', 'bias', 'abuse', 'abolish', 'abuse', 'abuse', 'bid', 'wednesday', 'able', 'betray', 'accident', 'abduct', 'bigot', 'bet', 'abandon', 'besides', 'access', 'friday', 'bestow', 'abound', 'absent', 'beware', 'abundant', 'abnormal', 'aboard', 'about', 'accelerate', 'abort', 'thursday', 'tuesday', 'sunday', 'berth', 'beyond', 'benevolent', 'abate', 'abide', 'bicycle', 'beside', 'accept', 'berry', 'bewilder', 'abrupt', 'saturday', 'accessory', 'absorb']
#
# l = lambda x: len(x) == 6
# print(*sorted(list(filter(l,words))))

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π map() –∏ filter() —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ numbers –≤—Å–µ –Ω–µ—á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã,
–±–æ–ª—å—à–∏–µ 47, –∞ –≤—Å–µ —á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Ü–µ–ª–æ –¥–µ–ª–∏—Ç –Ω–∞ –¥–≤–∞ (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ ‚Äì //).
–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.'''

# numbers = [46, 61, 34, 17, 56, 26, 93, 1, 3, 82, 71, 37, 80, 27, 77, 94, 34, 100, 36, 81, 33, 81, 66, 83, 41, 80, 80, 93, 40, 34, 32, 16, 5, 16, 40, 93, 36, 65, 8, 19, 8, 75, 66, 21, 72, 32, 41, 59, 35, 64, 49, 78, 83, 27, 57, 53, 43, 35, 48, 17, 19, 40, 90, 57, 77, 56, 80, 95, 90, 27, 26, 6, 4, 23, 52, 39, 63, 74, 15, 66, 29, 88, 94, 37, 44, 2, 38, 36, 32, 49, 5, 33, 60, 94, 89, 8, 36, 94, 46, 33]
#
# l = lambda x: x % 2 != 1 or x < 48
#
# print(*map(lambda x: x//2 if x%2==0 else x,filter(l, numbers)))

'''–≤—ã–≤–æ–¥–∏–º (—á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥–æ—á–∫—É map(–∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∏—Å–ª–∞: –Ω–∞—Ü–µ–ª–æ –¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ 2 –µ—Å–ª–∏ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2 
–±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –µ—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 47 –∏–Ω–∞—á–µ None —Å–ø–∏—Å–∫–∞ numbers '''
# another way
# print(*map(lambda x: [x // 2, x][x % 2], filter(lambda x: x < 48 or not x % 2, numbers)))

# another way
# num1 = filter(lambda n: (n <= 47) or (n % 2 == 0), numbers)  # –£–¥–∞–ª—è–µ–º –Ω–µ—á–µ—Ç–Ω—ã–µ –±–æ–ª—å—à–∏–µ 47
# num2 = map(lambda n: n // 2 if n % 2 == 0 else n, num1)  # –î–µ–ª–∏–º —á–µ—Ç–Ω—ã–µ –Ω–∞ 2
# print(*num2)


'''–°–ø–∏—Å–æ–∫ data —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à—Ç–∞—Ç–æ–≤ –°–®–ê.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞ data –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —à—Ç–∞—Ç–∞.
–ó–∞—Ç–µ–º —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<–Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞—Ç–∞>: <—á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è>
Vermont: 626299
Massachusetts: 7029917
...
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É) –ø–æ —É–±—ã–≤–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ 
–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —à—Ç–∞—Ç–∞. –ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –¥–≤–∞ —à—Ç–∞—Ç–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª, 
—Å–ª–µ–¥—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤–∑–∞–∏–º–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.'''

# data = [(19542209, 'New York'), (4887871, 'Alabama'), (1420491, 'Hawaii'), (626299, 'Vermont'), (1805832, 'West Virginia'), (39865590, 'California'), (11799448, 'Ohio'), (10711908, 'Georgia'), (10077331, 'Michigan'), (10439388, 'Virginia'), (7705281, 'Washington'), (7151502, 'Arizona'), (7029917, 'Massachusetts'), (6910840, 'Tennessee')]
# data_sorted = sorted(data, key=lambda x: x[1][-1], reverse=True)
# print_this = lambda x: f'{x[1]}: {x[0]}'
# print(*map(print_this,data_sorted),sep='\n')


'''–°–ø–∏—Å–æ–∫ data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª–∏–Ω—ã —Å–ª–æ–≤,
–∞ –∑–∞—Ç–µ–º –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.'''

# data = ['–≥–æ–¥', '—á–µ–ª–æ–≤–µ–∫', '–≤—Ä–µ–º—è', '–¥–µ–ª–æ', '–∂–∏–∑–Ω—å', '–¥–µ–Ω—å', '—Ä—É–∫–∞', '—Ä–∞–∑', '—Ä–∞–±–æ—Ç–∞', '—Å–ª–æ–≤–æ', '–º–µ—Å—Ç–æ', '–ª–∏—Ü–æ', '–¥—Ä—É–≥', '–≥–ª–∞–∑', '–≤–æ–ø—Ä–æ—Å', '–¥–æ–º', '—Å—Ç–æ—Ä–æ–Ω–∞', '—Å—Ç—Ä–∞–Ω–∞', '–º–∏—Ä', '—Å–ª—É—á–∞–π', '–≥–æ–ª–æ–≤–∞', '—Ä–µ–±–µ–Ω–æ–∫', '—Å–∏–ª–∞', '–∫–æ–Ω–µ—Ü', '–≤–∏–¥', '—Å–∏—Å—Ç–µ–º–∞', '—á–∞—Å—Ç—å', '–≥–æ—Ä–æ–¥', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–Ω—å–≥–∏']
#
# sort = lambda x: (len(x),x) #sorting with two arguments
# print(*sorted(data,key=sort))

'''–°–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π 
—Ñ—É–Ω–∫—Ü–∏–∏ max() –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key  —Ñ—É–Ω–∫—Ü–∏–∏ max().'''

# mixed_list = ['tuesday', 'abroad', 'abuse', 'beside', 'monday', 'abate', 'accessory', 'absorb', 1384878, 'sunday', 'about', 454805, 'saturday', 'abort', 2121919, 2552839, 977970, 1772933, 1564063, 'abduct', 901271, 2680434, 'bicycle', 'accelerate', 1109147, 942908, 'berry', 433507, 'bias', 'bestow', 1875665, 'besides', 'bewilder', 1586517, 375290, 1503450, 2713047, 'abnormal', 2286106, 242192, 701049, 2866491, 'benevolent', 'bigot', 'abuse', 'abrupt', 343772, 'able', 2135748, 690280, 686008, 'beyond', 2415643, 'aboard', 'bet', 859105, 'accident', 2223166, 894187, 146564, 1251748, 2851543, 1619426, 2263113, 1618068, 'berth', 'abolish', 'beware', 2618492, 1555062, 'access', 'absent', 'abundant', 2950603, 'betray', 'beverage', 'abide', 'abandon', 2284251, 'wednesday', 2709698, 'thursday', 810387, 'friday', 2576799, 2213552, 1599022, 'accept', 'abuse', 'abound', 1352953, 'bid', 1805326, 1499197, 2241159, 605320, 2347441]
#
# print(max(filter(lambda x: type(x) == int,mixed_list)))

# another way:
# print(max(mixed_list, key=lambda x: (isinstance(x, int), x)))


'''–°–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏–π
—ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–æ —Å—Ç—Ä–æ–∫.  –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key  —Ñ—É–Ω–∫—Ü–∏–∏ sorted().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –±—ã —Å–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∞–ª –∑–Ω–∞—á–µ–Ω–∏—è:
mixed_list = ['a', 'ab', 3, 5, 1, 8, 0, 'c', 'ac', 'aab']
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
0 1 3 5 8 a aab ab ac c'''

# mixed_list = ['beside', 48, 'accelerate', 28, 'beware', 'absorb', 'besides', 'berry', 15, 65, 'abate', 'thursday', 76, 70, 94, 35, 36, 'berth', 41, 'abnormal', 'bicycle', 'bid', 'sunday', 'saturday', 87, 'bigot', 41, 'abort', 13, 60, 'friday', 26, 13, 'accident', 'access', 40, 26, 20, 75, 13, 40, 67, 12, 'abuse', 78, 10, 80, 'accessory', 20, 'bewilder', 'benevolent', 'bet', 64, 38, 65, 51, 95, 'abduct', 37, 98, 99, 14, 'abandon', 'accept', 46, 'abide', 'beyond', 19, 'about', 76, 26, 'abound', 12, 95, 'wednesday', 'abundant', 'abrupt', 'aboard', 50, 89, 'tuesday', 66, 'bestow', 'absent', 76, 46, 'betray', 47, 'able', 11]

# print(*sorted(mixed_list,key= lambda x: ((isinstance(x, str),x))))
# # mixed_list= list(map(lambda x: str(x) ,mixed_list))
# print(*sorted(filter(lambda x: type(x)== int,mixed_list)),*sorted(filter(lambda x: type(x) == str, mixed_list)))

# another way
# print(*sorted(mixed_list, key=lambda x: (isinstance(x, str), x)))

'''–í —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–µ RGB —Ü–≤–µ—Ç–∞ –∑–∞–¥–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ç—Ä–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
    R ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∫—Ä–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞;
    G ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∑–µ–ª–µ–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞;
    B ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–∏–Ω–µ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞.
–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∑–∞–¥–∞—é—Ç—Å—è –∫–∞–∫ RGB –∏ (255-R)(255-G)(255-B). –°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —Ö–æ—Ä–æ—à–æ –≥–∞—Ä–º–æ–Ω–∏—Ä—É—é—Ç –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ —Ç—Ä–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞. 
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç—Ä–∏ —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã R, G –∏ B –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞,  —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ R, G –∏ B –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ map().'''
'''Sample Input 1:
244 11 120
Sample Output 1:
11 244 135
Sample Input 2:
0 0 0
Sample Output 2:
255 255 255
Sample Input 3:
255 255 255
Sample Output 3:
0 0 0'''

# print(*map(lambda x: 255 - int(x) ,input().split()))


'''–ú–Ω–æ–≥–æ—á–ª–µ–Ω–æ–º —Å—Ç–µ–ø–µ–Ω–∏ nnn –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∞ 
anxn+an‚àí1xn‚àí1+‚Ä¶+a2x2+a1x+a0a_nx^n + a_{n-1}x^{n-1}+\ldots + a_2x^2+a_1x+a_0
an‚Äãxn+an‚àí1‚Äãxn‚àí1+‚Ä¶+a2‚Äãx2+a1‚Äãx+a0‚Äã–≥–¥–µ an,‚Äâan‚àí1,‚Ä¶,a2,‚Äâa1,‚Äâa0a_n, 
\, a_{n-1}, \ldots , a_2, \, a_1,\, a_0an‚Äã,an‚àí1‚Äã,‚Ä¶,a2‚Äã,a1‚Äã,a0‚Äã ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ (an‚â†0a_n \neq 0an‚ÄãÓÄ†=0).
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—é—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ xxx –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ.
 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ xxx.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—é—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏
 —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ xxx –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ xxx.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –∑–∞–¥–∞–µ—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω 2x2+4x+32x^2+4x+32x2+4x+3, –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç –∑–∞–¥–∞–µ—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω 
x6+2x5+3x4+4x3+5x2+6x+7x^6+2x^5+3x^4+4x^3+5x^2+6x+7x6+2x5+3x4+4x3+5x2+6x+7.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ evaluate(coefficients, x), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫
 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –§—É–Ω–∫—Ü–∏—è evaluate() –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π map() –∏ reduce().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é evaluate(), —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç üòÄ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢'''
'''
Sample Input 1:
2 4 3
10
Sample Output 1:
243
Sample Input 2:
1 2 3 4 5 6 7
1
Sample Output 2:
28
Sample Input 3:
-2 4 5
3
Sample Output 3:
-1
Sample Input 4:
10
2
Sample Output 4:
10
Sample Input 5:
3 19
10
Sample Output 5:
49'''
from functools import reduce
# def evaluate(coefficients, x):
#     coef = list(map(lambda y: int(y), coefficients.split()))
#     x_list = sorted([i for i in range(len(coef))], reverse=True)
#     summ_1 = [coef[i] * int(x) ** x_list[i] for i in range(len(coef))]
#     return sum(summ_1)
#
#
# # print(evaluate('2 4 3','10'))
# print(evaluate(input(), input()))

# another way
# from functools import reduce
# evaluate = lambda coefficients, x: reduce(lambda s, a: s * x + a, coefficients, 0)
# print(evaluate([*map(int, input().split())], int(input())))

#
# words1 = ['—è–±–ª–æ–∫–æ', '–∞–Ω–∞–Ω–∞—Å', '–∞–ø–µ–ª—å—Å–∏–Ω', '—Ö—É—Ä–º–∞', '–≥—Ä–∞–Ω–∞—Ç', '–º–∞–Ω–¥–∞—Ä–∏–Ω', '–∞–π–≤–∞']
# words2 = ['ÊûóÊ™é', '„Éë„Ç§„Éä„ÉÉ„Éó„É´', '„Ç™„É¨„É≥„Ç∏', 'Êüø']
# words3 = ['apple', 'pineapple', 'orange', 'persimmon', 'pomegranate']
#
# print(list(zip(words1, words2, words3)))


'''–§—É–Ω–∫—Ü–∏—è ignore_command() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –æ–¥–∏–Ω —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç command ‚Äì –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å,
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ignore –∏ False ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç.
def ignore_command(command):
    ignore = ['alias', 'configuration', 'ip', 'sql', 'select', 'update', 'exec', 'del', 'truncate']
    for word in ignore:
        if word in command:
            return True
    return False
–ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ignore_command(), —á—Ç–æ–±—ã –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ all()/any() —Å–æ—Ö—Ä–∞–Ω–∏–≤ –ø—Ä–∏ —ç—Ç–æ–º –µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(ignore_command('get ip'))
print(ignore_command('select all'))
print(ignore_command('delete'))
print(ignore_command('trancate'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
True
True
True
False'''

# def ignore_command(command):
#     ignore = ['alias', 'configuration', 'ip', 'sql', 'select', 'update', 'exec', 'del', 'truncate']
#     return any(map(lambda x: x in command, ignore))
#
# print(ignore_command('get ip'))
# print(ignore_command('select all'))
# print(ignore_command('delete'))
# print(ignore_command('trancate'))

'''–ò—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø–æ —Ç—Ä–µ–º —Å–ø–∏—Å–∫–∞–º countries, capitals –∏ population –≤—ã–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<capital> is the capital of <country>, population equal <population> people.
Moscow is the capital of Russia, population equal 145934462 people.
Washington is the capital of USA, population equal 331002651 people.'''

# countries = ['Russia', 'USA', 'UK', 'Germany', 'France', 'India']
# capitals = ['Moscow', 'Washington', 'London', 'Berlin', 'Paris', 'Delhi']
# population = [145_934_462, 331_002_651, 80_345_321, 67_886_011, 65_273_511, 1_380_004_385]
# for (count, cap, pop) in zip(countries,capitals,population):
#     print(f'{cap} is the capital of {count}, population equal {pop} people.')


'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∞–±—Å—Ü–∏—Å—Å (xxx), –æ—Ä–¥–∏–Ω–∞—Ç (yyy) –∏ –∞–ø–ø–ª–∏–∫–∞—Ç (zzz)
—Ç–æ—á–µ–∫ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –ª–∏–±–æ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —à–∞—Ä–∞ —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ –Ω–∞—á–∞–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ä–∞–¥–∏—É—Å–æ–º R =2R = 2R =2.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ ‚Äì –∞–±—Å—Ü–∏—Å—Å—ã, –æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∞–ø–ø–ª–∏–∫–∞—Ç—ã —Ç–æ—á–µ–∫ –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ True –µ—Å–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∏–ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ —à–∞—Ä–∞ –∏ False, –µ—Å–ª–∏ –≤–Ω–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —à–∞—Ä–∞ (—Å—Ñ–µ—Ä—ã) –∏–º–µ–µ—Ç –≤–∏–¥ x2+y2+z2=R2x^2+y^2+z^2 = R^2x2+y2+z2=R2.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ all() –∏ zip().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è abscissas, ordinates, applicates –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤.'''

'''Sample Input 1:
0.0 1.0 2.0
0.0 0.0 1.1
0.0 1.0 1.5
Sample Output 1:
False
Sample Input 2:
0.0 0.0
1.5 0.0
1.1 1.1
Sample Output 2:
True
Sample Input 3:
0.637 -0.411 -0.247 1.658 0.061
-0.78 -1.374 0.762 0.306 -0.614
-1.317 -0.444 -0.572 -0.341 0.295
Sample Output 3:
True
'''

# abscissas = [float(x) for x in input().split()]
# ordinates = [float(y) for y in input().split()]
# applicates = [float(z) for z in input().split()]
# true_list = list()
# for (x,y,z) in zip(abscissas,ordinates,applicates):
#     if x**2 + y**2 + z**2 <= 4:
#         true_list.append(True)
#     else:
#         true_list.append(False)
# print(all(true_list))

# another way
# abscissas, ordinates, applicates=(map(float, input().split()) for _ in range(3))
# # print(all(map(lambda x, y, z: (x**2+y**2+z**2)**0.5 <=2, abscissas,ordinates,applicates)))
# print(all(x**2 + y**2 + z**2 <= 4 for x, y, z in zip(abscissas, ordinates, applicates)))

'''IP-–∞–¥—Ä–µ—Å ‚Äì —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Å–µ—Ç–∏, —Ä–∞–±–æ—Ç–∞—é—â–µ–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É TCP/IP.

–í 4-–π –≤–µ—Ä—Å–∏–∏ IP-–∞–¥—Ä–µ—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —á–µ—Ç—ã—Ä—ë—Ö –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª 
(–æ–∫—Ç–µ—Ç–æ–≤) —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 000 –¥–æ 255 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.2
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ all() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞: –≤—Å–µ –ª–∏ –æ–∫—Ç–µ—Ç—ã –≤ IP-–∞–¥—Ä–µ—Å–µ 
‚Äì —á–∏—Å–ª–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 0 –¥–æ 255.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ x.x.x.x, –≥–¥–µ x ‚Äì –Ω–µ–ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ 0-9, a-z.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ True –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í–µ–¥—É—â–∏–µ –Ω—É–ª–∏ —Å–ª–µ–¥—É–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å:
0001 = 1
006 = 6
0213 = 213
0000 = 0
00345 = 345
...
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
10.0.1.1
Sample Output 1:
True
Sample Input 2:
10.1.1.a
Sample Output 2:
False
Sample Input 3:
10.1.1.260
Sample Output 3:
False
Sample Input 4:
10.0023.0123.0000015
Sample Output 4:
True'''
# print(all(list(map(lambda elem: elem.isdigit() and 0 <= int(elem) <= 255, input().split('.')))))


'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ aaa –∏ bbb. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ all()
–¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [a;‚Äâb][a; \, b][a;b], –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ –∫–∞–∂–¥—É—é —Å–æ–¥–µ—Ä–∂–∞—â—É—é—Å—è –≤ –Ω–∏—Ö —Ü–∏—Ñ—Ä—É –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ aaa –∏ bbb –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [a;‚Äâb][a; \, b][a;b], —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏, –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, 
—Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ß–∏—Å–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω—É–ª–∏, –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –∏—Ö –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
1
25
Sample Output 1:
1 2 3 4 5 6 7 8 9 11 12 15 22 24
Sample Input 2:
20
30
Sample Output 2:
22 24
Sample Input 3:
50
150
Sample Output 3:
55 66 77 88 99 111 112 115 122 124 126 128 132 135 144'''

# a, b = int(input()), int(input())
# # a, b = 100, 115
# list1 = [i for i in range(a, b)]
# # print(list1)
# list2 = list(filter(lambda x: '0' not in str(x),list1))
# # print(list2)
# for i in list2:
#     if all(i%int(x)==0 for x in str(i)):
#         print(i,end=' ')

# another way
# def check(num):
#     return all(map(lambda x: int(x) and num % int(x) == 0, str(num)))
#
# a, b = int(input()), int(input())
# seq = range(a, b + 1)
# print(*list(filter(lambda x: check(x), seq)))

# another way
# a, b = int(input()), int(input())
# l = list(int(i) for i in range(a,b+1))
# res = []
# for i in l:
#     if all(map(lambda x: int(x)!=0 and i%int(x)==0, list(str(i)))):
#         res.append(i)
# print(*res)


'''–•–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å –ø–æ —É—Å–ª–æ–≤–∏—è–º —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —Å–æ—Å—Ç–æ–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∏–∑ 7 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É,
 –∑–∞–≥–ª–∞–≤–Ω—É—é –∏ —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π any() –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–æ—Ä–æ—à –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äì —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å, –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
abcABC9
Sample Output 1:
YES
Sample Input 2:
abAB34
Sample Output 2:
NO
Sample Input 3:
DFSDFSDFSDsdfjsdfnsm
Sample Output 3:
NO'''


# n = list(map(lambda x: x,input()))
# # n = list(map(lambda x: x,'abcABC9'))
# if all([any(map(lambda x: x.isdigit(),n)),any(map(lambda x: x.islower(),n)),any(map(lambda x: x.isupper(),n)),len(n)>6]):
#     print('YES')
# else:
#     print('NO')


# another way
# s = input()
# print('YES' if all((any(i.isupper() for i in s),
#                     any(i.islower() for i in s),
#                     any(i.isdigit() for i in s),
#                     len(s) >= 7)) else 'NO')


'''–£—á–∏—Ç–µ–ª—å –¢–∏–º—É—Ä –ø—Ä–æ–≤–µ—Ä—è–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞—Å—Å–∞—Ö –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã BEEGEEK –∏ —Ä–µ—à–∏–ª —É–±–µ–¥–∏—Ç—å—Å—è, 
—á—Ç–æ –≤ –∫–∞–∂–¥–æ–º –∫–ª–∞—Å—Å–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–ª–∏—á–Ω–∏–∫ ‚Äì —É—á–µ–Ω–∏–∫ —Å –æ—Ü–µ–Ω–∫–æ–π 5 –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π all(), any() –¥–ª—è –ø–æ–º–æ—â–∏ –¢–∏–º—É—Ä—É –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤. –ó–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤–≤–æ–¥–∏—Ç—Å—è –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–∏–¥–∞:
    –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ kkk ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ;
    –¥–∞–ª–µ–µ –≤–≤–æ–¥–∏—Ç—Å—è kkk —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞: —Ñ–∞–º–∏–ª–∏—è –æ—Ü–µ–Ω–∫–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –≤ –∫–∞–∂–¥–æ–º –∫–ª–∞—Å—Å–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–ª–∏—á–Ω–∏–∫, –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
4
3
–í–∞—Å–µ—á–∫–∏–Ω 4
–ò–ª—é—à–∏–Ω 5
–ö—Ä–∏–≤—Ü–æ–≤ 3
2
–ë–æ—Ç–∞–ª–æ–≤ 5
–ü–µ—Ç—Ä–æ–≤ 5
3
–õ–µ–±–µ–¥–∞ 4
–ò–≤–ª–µ–≤ 4
–°—É–≤–æ—Ä–æ–≤ 5
2
–õ–∞—Å–∫–µ—Ä 4
–ö–æ–∑–ª–æ–≤ 5
Sample Output 1:
YES
Sample Input 2:
4
3
–í–∞—Å–µ—á–∫–∏–Ω 4
–ò–ª—é—à–∏–Ω 5
–ö—Ä–∏–≤—Ü–æ–≤ 3
2
–ë–æ—Ç–∞–ª–æ–≤ 5
–ü–µ—Ç—Ä–æ–≤ 5
3
–õ–µ–±–µ–¥–∞ 4
–ò–≤–ª–µ–≤ 4
–°—É–≤–æ—Ä–æ–≤ 4
2
–õ–∞—Å–∫–µ—Ä 4
–ö–æ–∑–ª–æ–≤ 5
Sample Output 2:
NO'''

# ans = all(list(map(lambda x: 5 if 5 in x else 0,[[int(input()[-1]) for _ in range(int(input()))] for _ in range(int(input()))])))
# if ans:
#     print('YES')
# else:
#     print('NO')

# another way
# students = []
# for _ in range(int(input())):
#     if any(map(lambda x: '5' in x, [input() for _ in range(int(input()))])):
#         students.append(True)
#     else:
#         students.append(False)
# print('YES' if all(students) else 'NO')


'''ANOTHER WAY
classes = int(input())

tabel = [[input().split() for _ in range(int(input()))] for _ in range(classes)]
tabel = [[int(rec[1]) for rec in elem] for elem in tabel]

print(['NO', 'YES'][all(map(lambda check: any([el == 5 for el in check]) , tabel))]) ''' #—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —à–∏–∫–∞—Ä–Ω–∞—è ,–Ω–∞–¥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å


# num = int('1000001', 2)
# print(num)
# ???????????



'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_letter(), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —à–∞–±–ª–æ–Ω–æ–º:
To: <mail>
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <name>!
–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç <date>, –≤ <time>.
–ü–æ –∞–¥—Ä–µ—Å—É: <place>. 
–≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å <teacher> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ <number>. 
–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –ø—è—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ mail, name, date, time, place –∏ –¥–≤–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö teacher,
 number –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞. –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ teacher —É—á–∏—Ç–µ–ª–µ–º –±—É–¥–µ—Ç –¢–∏–º—É—Ä –ì—É–µ–≤, –∞ –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ number, —Ç–æ –∫–∞–±–∏–Ω–µ—Ç –±—É–¥–µ—Ç 171717.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(generate_letter('lara@yandex.ru', '–õ–∞—Ä–∏—Å–∞', '10 –¥–µ–∫–∞–±—Ä—è', '12:00', '–ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2'))
print()
print(generate_letter('lara@yandex.ru', '–õ–∞—Ä–∏—Å–∞', '10 –¥–µ–∫–∞–±—Ä—è', '12:00', 
                      '–ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2', '–í–∞—Å–∏–ª—å –Ø—Ä–æ—à–µ–≤–∏—á', 23))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
To: lara@yandex.ru
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –õ–∞—Ä–∏—Å–∞!
–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç 10 –¥–µ–∫–∞–±—Ä—è, –≤ 12:00.
–ü–æ –∞–¥—Ä–µ—Å—É: –ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2. 
–≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¢–∏–º—É—Ä –ì—É–µ–≤ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 17. 
–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!
To: lara@yandex.ru

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –õ–∞—Ä–∏—Å–∞!
–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç 10 –¥–µ–∫–∞–±—Ä—è, –≤ 12:00.
–ü–æ –∞–¥—Ä–µ—Å—É: –ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2. 
–≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –í–∞—Å–∏–ª—å –Ø—Ä–æ—à–µ–≤–∏—á –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 23. 
–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é generate_letter() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.'''

# def generate_letter(mail, name, date, time, place, teacher='–¢–∏–º—É—Ä –ì—É–µ–≤',number=17):
#     stri = f'To: {mail} \n –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! \n –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç {date}, –≤ {time}. \n –ü–æ –∞–¥—Ä–µ—Å—É: {place}. \n –≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å {teacher} –≤ –∫–∞–±–∏–Ω–µ—Ç–µ {number}. \n –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!'
#     return stri
#
#
#
# print(generate_letter('lara@yandex.ru', '–õ–∞—Ä–∏—Å–∞', '10 –¥–µ–∫–∞–±—Ä—è', '12:00', '–ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2'))
# print()
# print(generate_letter('lara@yandex.ru', '–õ–∞—Ä–∏—Å–∞', '10 –¥–µ–∫–∞–±—Ä—è', '12:00',
#                       '–ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2', '–í–∞—Å–∏–ª—å –Ø—Ä–æ—à–µ–≤–∏—á', 23))


'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é pretty_print(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ —Å —Ä–∞–º–∫–æ–π. 

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –æ–¥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç data ‚Äì —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –∏ –¥–≤–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö 
—Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã—Ö  –∞—Ä–≥—É–º–µ–Ω—Ç–∞ side –∏ delimiter –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç side, —Ç–æ –ø–æ–ª–∞–≥–∞–µ–º side='-', –∞ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç delimiter, —Ç–æ –ø–æ–ª–∞–≥–∞–µ–º delimiter='|'.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
pretty_print([1, 2, 10, 23, 123, 3000])
pretty_print(['abc', 'def', 'ghi', '12345'])
pretty_print(['abc', 'def', 'ghi'], side='*')
pretty_print(['abc', 'def', 'ghi'], delimiter='#')
pretty_print(['abc', 'def', 'ghi'], side='*', delimiter='#')
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
 ------------------------------ 
| 1 | 2 | 10 | 23 | 123 | 3000 |
 ------------------------------ 
 ------------------------- 
| abc | def | ghi | 12345 |
 ------------------------- 
 ***************** 
| abc | def | ghi |
 ***************** 
 ----------------- 
# abc # def # ghi #
 ----------------- 
 ***************** 
# abc # def # ghi #
 ***************** 
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é pretty_print() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ side –∏ delimiter —Å–æ—Å—Ç–æ—è—Ç –≤—Å–µ–≥–¥–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.'''

# def pretty_print(data, side= '-', delimiter= '|'):
#
#     s = f' {delimiter} '.join(map(str, data))
#     print(f' {side* (len(s)+2)}  ')
#     print(delimiter,s,delimiter)
#     print(f' {side* (len(s)+2)}  ')


# pretty_print([1, 2, 10, 23, 123, 3000])
# pretty_print(['abc', 'def', 'ghi', '12345'])
# pretty_print(['abc', 'def', 'ghi'], side='*')
# pretty_print(['abc', 'def', 'ghi'], delimiter='#')
# pretty_print(['abc', 'def', 'ghi'], side='*', delimiter='#')

# another way
# def pretty_print(data, side='-', delimeter='|'):
#     line = f" {delimeter} ".join(map(str, data))
#     print(' ' + side * (2 + len(line)))
#     print(delimeter + ' ' + line + ' ' + delimeter)
#     print(' ' + side * (2 + len(line)))

# data = [['p', 'y', 't', 'h', 'o', 'n'], ['s', 't', 'e', 'p', 'i', 'k']]
# result = list(map(lambda x: '.'.join(x), data))
# print(result[1])

# result = list(filter(str.swapcase, ['a', '1', '', 'b', '2']))
#
# print(result)

'''from functools import reduce

numbers = [1, 2, 3]
result = reduce(lambda x, y: x + y, numbers)
print(result)'''

# from functools import reduce
#
# numbers = [1, 2, 3]
# result = reduce(lambda a, b: a * b, numbers, 10)
# print(result)

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é concat(), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (sep).
 –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω, –∏–º —Å–ª—É–∂–∏—Ç –ø—Ä–æ–±–µ–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è concat() –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è concat() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
print(concat('hello', 'python', 'and', 'stepik'))
print(concat('hello', 'python', 'and', 'stepik', sep='*'))
print(concat('hello', 'python', sep='()()()'))
print(concat('hello', sep='()'))
print(concat(1, 2, 3, 4, 5, 6, 7, 8, 9, sep='$$'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
hello python and stepik
hello*python*and*stepik
hello()()()python
hello
1$$2$$3$$4$$5$$6$$7$$8$$9
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é concat() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.'''

# def concat(*args,sep=' '):
#
#     s = reduce(lambda x,y: f'{x}{sep}{y}',args)
#     return s
#
# print(concat('hello', 'python', 'and', 'stepik'))
# print(concat('hello', 'python', 'and', 'stepik', sep='*'))
# print(concat('hello', 'python', sep='()()()'))
# print(concat('hello', sep='()'))
# print(concat(1, 2, 3, 4, 5, 6, 7, 8, 9, sep='$$'))


'''–ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é product_of_odds() –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ reduce().
def product_of_odds(data):   # data - —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    result = 1
    for i in data:
        if i % 2 == 1:
            result *= i
    return result
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –¢–µ—Å—Ç–∏—Ä—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∏–∫–∞–∫ –Ω–µ "–ø–æ–∫–∞—Ä–∞–µ—Ç" –≤–∞—Å –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ reduce(), 
–æ–¥–Ω–∞–∫–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Å—Ç–Ω–æ üòÉ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é product_of_odds() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ.'''

# from functools import reduce
# def product_of_odds(data):
#     s = reduce(lambda x, y: x*y,list(filter(lambda x: x % 2 == 1,data)),1 if data else 1)
#     return s

'''–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ words. –î–æ–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ (*), 
–∫–æ—Ç–æ—Ä—ã–π –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ words, –∞ –∑–∞—Ç–µ–º –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é map() –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.'''

# words = 'the world is mine take a look what you have started'.split()
#
# print(*(map(lambda x: f'"{x}"',words)))

'''–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª numbers. –î–æ–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ (*), 
–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª-–ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –∏ –ø–µ—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é filter() –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.'''

# numbers = [18, 191, 9009, 5665, 78, 77, 45, 23, 19991, 908, 8976, 6565, 5665, 10, 1000, 908, 909, 232, 45654, 786]
# print(*filter(lambda x: str(x) != str(x)[::-1],numbers))

'''–î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π. –î–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ sorted_numbers
–±—ã–ª —É–ø–æ—Ä—è–¥–æ—á–µ–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ç–µ–∂–µ–π —Å–ø–∏—Å–∫–∞ numbers.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.'''


# numbers = [(10, -2, 3, 4), (-13, 56), (1, 9, 2), (-1, -9, -45, 32), (-1, 5, 1), (17, 0, 1), (0, 1), (3,), (39, 12), (11, -23), (10, -100, 21, 32), (3, -8), (1, 1)]
# sorted_numbers = sorted(numbers, key=lambda x: sum(x)/len(x),reverse=True)
# print(sorted_numbers)

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é call(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–µ—ë –∏ –¥–µ–ª–∞–µ—Ç –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è call() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
def mul7(x):
    return x * 7
def add2(x, y):
    return x + y

def add3(x, y, z):
    return x + y + z

print(call(mul7, 10))
print(call(add2, 2, 7))
print(call(add3, 10, 30, 40))
print(call(bool, 0))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

70
9
80
False

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é call() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.'''
# def mul7(x):
#     return x * 7
# def add2(x, y):
#     return x + y
#
# def add3(x, y, z):
#     return x + y + z
#
'''# def call(func,*args):
#     return func(*args)'''
# print(call(mul7, 10))
# print(call(add2, 2, 7))
# print(call(add3, 10, 30, 40))
# print(call(bool, 0))


'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compose(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–µ –¥—Ä—É–≥–∏—Ö –æ–¥–Ω–æ–∞—Ä–≥—É–º–µ–Ω—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏ f –∏ g –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é. 
–≠—Ç–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç x –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫ –Ω–µ–º—É –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: 
–¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å, –∫–∞–∫ f(g(x)).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è compose() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
def add3(x):
    return x + 3

def mul7(x):
    return x * 7

print(compose(mul7, add3)(1))
print(compose(add3, mul7)(2))
print(compose(mul7, str)(3))
print(compose(str, mul7)(5))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

28
17
3333333
35
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é compose() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g ‚Äî
—ç—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è h(x) = f(g(x)), –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g –≤–∞–∂–µ–Ω! '''

# def add3(x):
#     return x + 3
#
# def mul7(x):
#     return x * 7
#
# def compose(f,g):
#     return lambda x: f(g(x))
#     # —á–∏—Ç–∞–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∞–º–±–¥—É –æ—Ç —Ö : —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç x –≤ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
#
# print(compose(mul7, add3)(1))
# print(compose(add3, mul7)(2))
# print(compose(mul7, str)(3))
# print(compose(str, mul7)(5))

'''–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é arithmetic_operation(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–∏–º–≤–æ–ª –æ–¥–Ω–æ–π –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (+, -, *, /) 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è arithmetic_operation() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
add = arithmetic_operation('+')
div = arithmetic_operation('/')
print(add(10, 20))
print(div(20, 5))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
30
4.0
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é arithmetic_operation() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ú–æ–¥—É–ª—å operator –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ (—Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è —Ç—É—Ç). '''
# from operator import *
# def arithmetic_operation(operation):
#     result = {'+': add, '-': sub, '*': mul, '/': truediv}
#     def func(x, y):
#         return result[operation](x, y)
#     return func
#
#
# add = arithmetic_operation('+')
# div = arithmetic_operation('/')
# print(add(10, 20))
# print(div(20, 5))

# ANOTHER WAY
# from operator import *
#
# def arithmetic_operation(operation):
#     oper = {
#         '+': add,
#         '-': sub,
#         '*': mul,
#         '/': truediv
#     }
#     return oper[operation]


'''–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏ —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, 
–∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–µ—Ç –∏—Ö. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–µ—á–∞—Ç—å 
–≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –≤ –∫–∞–∫–æ–º –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –≤—Ö–æ–¥.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏ —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –ø—Ä–µ–∂–Ω–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ üòé.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è sorted() —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ,
–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤—ã. –õ—é–±–∞—è –±—É–∫–≤–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–¥—É—â–µ–π —Ä–∞–Ω—å—à–µ, —á–µ–º –±—É–∫–≤–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.'''
'''Sample Input:
cate Frog cat FROGs bee CATERS mouse cATwalk dolphin mOus Cats CatAlo
Sample Output:
bee cat CatAlo cate CATERS Cats cATwalk dolphin Frog FROGs mOus mouse'''

# print(*sorted(input().split(), key=lambda x: x.lower()))


'''–ì–µ–º–∞—Ç—Ä–∏–µ–π —Å–ª–æ–≤–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—É–º–º–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ö–æ–¥—è—â–∏—Ö –≤ –Ω–µ–≥–æ –±—É–∫–≤.
–î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–µ–º–∞—Ç—Ä–∏–∏ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ:
    –ø–µ—Ä–µ–≤–µ–¥—ë–º —Å–ª–æ–≤–æ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä;
    —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–∫–≤—ã –≤—ã—á–∏—Å–ª–∏–º –∫–∞–∫ –∫–æ–¥(–±—É–∫–≤—ã) - –∫–æ–¥(–±—É–∫–≤—ã A).
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn, –∞ –∑–∞—Ç–µ–º nnn —Å—Ç—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ) –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –∏—Ö –≥–µ–º–∞—Ç—Ä–∏–∏.
–ï—Å–ª–∏ –≥–µ–º–∞—Ç—Ä–∏—è —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º) –ø–æ—Ä—è–¥–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn, –∞ –∑–∞—Ç–µ–º nnn —Å—Ç—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π ord().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–æ–≤–∞ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü—É—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –≥–µ–º–∞—Ç—Ä–∏—é —Å–ª–æ–≤–∞ BaSis. –ü–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä BASIS. 
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å–ª–æ–≤–µ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ord():
ord('B') = 66
ord('A') = 65
ord('S') = 83
ord('I') = 73
ord('S') = 83
–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏ –≤—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–∫–≤—ã –∫–∞–∫ –∫–æ–¥(–±—É–∫–≤—ã) - –∫–æ–¥(–±—É–∫–≤—ã A). –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –∫–æ–¥–∞ –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –∑–Ω–∞—á–µ–Ω–∏–µ ord('A') = 65:
ord('B') - ord('A') = 66 - 65 = 1
ord('A') - ord('A') = 65 - 65 = 0
ord('S') - ord('A') = 83 - 65 = 18
ord('I') - ord('A') = 73 - 65 = 8
ord('S') - ord('A') = 83 - 65 = 18
–ì–µ–º–∞—Ç—Ä–∏—è —Å–ª–æ–≤–∞ BaSis —Ä–∞–≤–Ω–∞ 1+0+18+8+18=451+0+18+8+18 = 451+0+18+8+18=45. 
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
4
basis
after
chief
agenda
Sample Output 1:
agenda
chief
after
basis
Sample Input 2:
4
Basis
afTEr
CHief
agenda
Sample Output 2:
CHief
agenda
Basis
afTEr'''


# k = [[i for i in input()] for _ in range(int(input()))]
# print(sorted(k, lambda x: ))
# from functools import reduce


# p = [input() for x in range(int(input()))]
# p = sorted(p)
# p = sorted(p, key=(lambda word: sum([ord(i) - ord('A') for i in word.upper()])))
# print(*p,sep='\n')

# ANOTHER WAY
# def gem(word):
#     return sum(map(lambda c: ord(c.upper()) - ord('A'), word)), word
#
# words = [input() for _ in range(int(input()))]
#
# print(*sorted(words, key=gem), sep='\n')


'''–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤
IP-–∞–¥—Ä–µ—Å ‚Äì —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Å–µ—Ç–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É TCP/IP.
–í 444-–π –≤–µ—Ä—Å–∏–∏ IP-–∞–¥—Ä–µ—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π 323232-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —á–µ—Ç—ã—Ä—ë—Ö –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª (–æ–∫—Ç–µ—Ç–æ–≤)
 —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 000 –¥–æ 255255255, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.2192.168.1.2192.168.1.2.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç IP-–∞–¥—Ä–µ—Å–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ n ‚Äâ(n‚â•1)n \, (n \ge 1)n (n‚â•1) ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP-–∞–¥—Ä–µ—Å–æ–≤. –ó–∞—Ç–µ–º nnn —Å—Ç—Ä–æ–∫ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ IP-–∞–¥—Ä–µ—Å–∞–º–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å 192.168.1.2 –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É:
192‚ãÖ2563+168‚ãÖ2562+1‚ãÖ2561+2‚ãÖ2560=3232235778192 \cdot 256^3 + 168 \cdot 256^2 + 1 \cdot 256^1 + 2 \cdot 256^0 = 3232235778
192‚ãÖ2563+168‚ãÖ2562+1‚ãÖ2561+2‚ãÖ2560=3232235778–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input:

9
128.199.44.24
128.199.201.245
143.198.168.95
172.67.181.62
172.67.222.111
172.67.10.90
45.8.106.59
203.13.32.156
172.67.181.194

Sample Output:

45.8.106.59
128.199.44.24
128.199.201.245
143.198.168.95
172.67.10.90
172.67.181.62
172.67.181.194
172.67.222.111
203.13.32.156'''


# [print(*j,sep='.') for j in sorted([[int(i) for i in input().split('.')] for _ in range(int(input()))], key = lambda x: x[0] * 256 ** 3 + x[1] * 256**2+ x[2]* 256 + x[3] * 256 ** 0)]

'''–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

path = r'C:\new\text.txt'
print(path)

–≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ path:

C:\new\text.txt'''

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üôÇ.'''

# file_name = input()
# file = open(file_name, 'r')
# comm = file.read()
# print(comm)
# file.close()

# ANOTHER WAY
# file = open(input())
# print(file.read())
# file.close()

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,
–∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –µ–≥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –¥–≤–µ —Å—Ç—Ä–æ–∫–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üôÇ.'''
# name = input()
# file = open(name, 'r')
# file_1 = list(map(lambda line: line.strip(), file.readlines()))
# print(file_1[-2])
# file.close()


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª lines.txt –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üôÇ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.'''
# from random import randint
# file = open('lines.txt', 'r')
# file_1 = list(map(lambda line: line.strip(), file.readlines()))
# print(file_1[randint(0, len(file_1)-1)])

# another way
# from random import randint
# with open('lines.txt', encoding='utf-8') as stream:
#     s = stream.readlines()
#     print(s[randint(0, len(s)-1)])


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª numbers.txt –∏–∑ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫, –Ω–∞ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω —Å—É–º–º—É —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É —á–∏—Å–µ–ª –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üôÇ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.'''
# file = open('numbers.txt', 'r')
# print(sum(list(map(lambda line: int(line.strip()),file.readlines()))))
# file.close()

# ANOTHER WAY
# file = open('numbers.txt')
#
# print(sum(map(int, file)))
#
# file.close()


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª nums.txt. –í —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å–∞–Ω–æ –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞–º–∏ –ø—Ä–æ–±–µ–ª–∞ 
–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω —Å—É–º–º—É —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É —á–∏—Å–µ–ª –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üôÇ.'''

# file = open('nums.txt','r')
# # list_all = list(map(lambda line: line.strip(), file.readlines()))
# read = file.read()
# print(sum(map(lambda x: int(x),read.split())))
# file.close()

# another way
# file = open('nums.txt')
# print(sum(map(int, file.read().split())))
# file.close()

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª prices.txt —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞. 
–í –Ω–µ–º –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é —Å–∏–º–≤–æ–ª–∞ —Ç–∞–±—É–ª—è—Ü–∏–∏ (\t) —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏:
    –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞;
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ);
    —Ü–µ–Ω–∞ (–≤ —Ä—É–±–ª—è—Ö) —Ç–æ–≤–∞—Ä–∞ –∑–∞ 111 —à—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üôÇ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.'''

# file = open('prices.txt', 'r')
# print(sum(list(map(lambda x: int(x[1])* int(x[2]),list(map(lambda line: line.strip().split('\t'), file.readlines()))))))
# file.close()

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª text.txt —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Ç–µ–∫—Å—Ç–∞. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ üôÇ.'''

# with open('text.txt', 'r') as file:
#     print(file.readline()[::-1])

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª data.txt, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, 
–≤—ã–≤–æ–¥—è—â—É—é –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –∏ —Ç.–¥.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ üôÇ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞ –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ readlines().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Å–∏–º–≤–æ–ª –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏ '\n'.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 5. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.'''

# with open('data.txt', 'r') as file:
#     print(*list(map(lambda line: line.strip(),file.readlines()))[::-1],sep='\n')

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª lines.txt, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥–ª–∏–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∏–º–µ—é—â–∏–µ –Ω–∞–∏–±–æ–ª—å—à—É—é –¥–ª–∏–Ω—É, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–∫–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ üôÇ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª lines.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
One
Twenty one
Two
Twenty two
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç:
Twenty one
Twenty two'''

# with open('lines(1).txt','r') as file:
#     list_lines = list(map(lambda line: line.strip(), file.readlines()))
#     lenght = max(list(map(lambda l: len(l), list_lines)))
#     print(*list(filter(lambda x: len(x) == lenght, list_lines)),sep='\n')

# ANOTHER WAY
# with open('lines.txt') as stream:
#     s = stream.readlines()
#     for line in s:
#         if len(line) == len(max(s, key=len)):
#             print(line.strip())


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª numbers.txt, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —ç—Ç—É —Å—É–º–º—É –Ω–∞ —ç–∫—Ä–∞–Ω (–¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å—É–º–º–∞ —á–∏—Å–µ–ª –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ).
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª numbers.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
2 1
     3    4
 1       7
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—ã–ª–æ –±—ã:
3
7
8
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ. '''

# with open('numbers(1).txt') as file:
#     s = file.readlines()
#     for line in s:
#         print(sum(list(map(int,line.strip().split()))))

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª nums.txt. –í —Ñ–∞–π–ª–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã —Ü–µ–ª—ã–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ. –ß–∏—Å–ª–æ–º –Ω–∞–∑–æ–≤–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π –∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä, –∏–¥—É—â–∏—Ö –ø–æ–¥—Ä—è–¥ (—á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ).

–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª nums.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:

 123   jhjk
bhjip456qwerty
1x2y3 4 5 6
sfsd 0 dfgfd
10abc20de30pop5 5 5 5

—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—ã–ª–æ –±—ã:

680

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ. '''
# def string_to_int(line):
#     l = str()
#     for i in line:
#         if i.isnumeric():
#             l += i
#         else:
#             l += ' '
#     s = list(map(lambda y: int(y),filter(lambda x: x.isnumeric(),l.split())))
#     return sum(s)
#
#
# with open('nums(1).txt') as file:
#     list_1 = list(map(lambda line: string_to_int(line), file))
#
#     print(sum(list_1))


# ANOTHER WAY
# with open('nums.txt', encoding='utf-8') as file:
#     print(sum(map(int, ''.join(list(map(lambda x: x if x.isdigit() else ' ', file.read()))).split())))

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª file.txt, –Ω–∞–±—Ä–∞–Ω–Ω—ã–π –ª–∞—Ç–∏–Ω–∏—Ü–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤
–ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Å–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫. –í—ã–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤ –ø—Ä–∏–º–µ—Ä–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤ –ø—Ä–∏–º–µ—Ä–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª file.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—ã–ª–æ –±—ã:
Input file contains:
108 letters
20 words
4 lines
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–æ–≤–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –Ω–µ–ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞
abc a21 67pop    qwert bo7ok 83456
—Å–æ–¥–µ—Ä–∂–∏—Ç 666 —Å–ª–æ–≤: abc, a21, 67pop, qwert, bo7ok, 83456.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.'''

# def lines(line):
#     return len(line)
#
# def words(line):
#     s = list(map(lambda x: len(x.split()),line))
#     return sum(s)
#
# def letters(line):
#     s = list(map(lambda x: list(x),line))
#     d = list()
#     for i in s:
#         for j in i:
#             if j.isalpha():
#                 d.append(j)
#     return len(d)
#
# with open('file.txt') as file:
#     line = list(map(lambda x: x.strip(), file.readlines()))
#     print('Input file contains:')
#     print(f'{letters(line)} letters')
#     print(f'{words(line)} words')
#     print(f'{lines(line)} lines')

# ANOTHER WAY
# with open('file.txt', encoding='utf-8') as file:
#     cnt_words = 0
#     cnt_str = 0
#     cnt_let = 0
#     for i in file:
#         for j in i:
#             if j.isalpha():
#                 cnt_let += len(j)
#         cnt_words += len(i.split())
#         cnt_str += 1
#     print('Input file contains:')
#     print(cnt_let, 'letters')
#     print(cnt_words, 'words')
#     print(cnt_str, 'lines')

'''–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞ first_names.txt –∏ last_names.txt, –æ–¥–∏–Ω —Å –∏–º–µ–Ω–∞–º–∏, –¥—Ä—É–≥–æ–π —Å —Ñ–∞–º–∏–ª–∏—è–º–∏.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è c –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random —Å–æ–∑–¥–∞–µ—Ç 3 —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã –∏–º—è + —Ñ–∞–º–∏–ª–∏—è, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –∏—Ö,
–∫–∞–∂–¥—É—é –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤ –ø—Ä–∏–º–µ—Ä–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª—ã first_names.txt –∏ last_names.txt —Å–æ–¥–µ—Ä–∂–∞–ª–∏ —Å—Ç—Ä–æ–∫–∏:
Aaron
Abdul
Abe
Abel
Abraham
Albert
–∏
Abramson
Adamson
Adderiy
Addington
Adrian
Albertson
Einstein
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –º–æ–≥–ª–æ –±—ã—Ç—å:
Abdul Albertson
Abel Adamson
Albert Einstein
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –£–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–∞–º (–∏–º–µ–Ω–∞, —Ñ–∞–º–∏–ª–∏–∏). '''
# from random import choice
# with open('first_names.txt') as first_name, open('last_names.txt') as last_name:
#     first = list(map(lambda x: x.strip(), first_name))
#     last = list(map(lambda x: x.strip(), last_name))
#     print(choice(first),choice(last))
#     print(choice(first), choice(last))
#     print(choice(first), choice(last))


# ANOTHER WAY
# from random import choice
# with open('first_names.txt') as n, open('last_names.txt') as s:
#     names, surname = [i.rstrip() for i in list(n)], [i.rstrip() for i in list(s)]
#     for i in range(3):
#         print(f'{choice(names)} {choice(surname)}')

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª population.txt —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω –∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –∏—Ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–æ–º —Ç–∞–±—É–ª—è—Ü–∏–∏ '\t'.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—ã–≤–æ–¥—è—â—É—é –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã 'G', —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 
—á–µ–º 500‚Äâ000500 \, 000500000 —á–µ–ª–æ–≤–µ–∫, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á–∏, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.'''

# def func(x):
#     if x[0][0] == 'G' and int(x[-1]) > 500000:
#         print(*x[:-1])
#     # for i in x:
#     #     if 'G' == i[0] and int(x[-1]) > 500000:
#     #         print(*x[:-1])
#
# with open('population.txt') as file:
#     list_all = list(map(lambda x: x.strip().split(), file.readlines()))
#     print(len(list_all))
#     list_fil = list(filter(lambda x: func(x),list_all))
#     # print(list_fil)

# ANOTHER WAY
# def func(args):
#     if args[0][0].upper() == 'G' and int(args[1]) >= 500000:
#         return args
#
#
# with open('population.txt', encoding='utf-8') as f:
#     mylist = [i.strip().split('\t') for i in f.readlines()]
#     filterlist = list(filter(func, mylist))
#     [print(i[0]) for i in filterlist]


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω CSV-—Ñ–∞–π–ª data.csv, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ csv —Ñ–æ—Ä–º–∞—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é read_csv –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.
–û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—è –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–º–µ–Ω–∞ –∫–ª—é—á–µ–π, –∞ –∫–∞–∂–¥—É—é –ø–æ—Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è
—ç—Ç–∏—Ö –∫–ª—é—á–µ–π.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é read_csv.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é read_csv –Ω–µ –Ω—É–∂–Ω–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –§—É–Ω–∫—Ü–∏—è read_csv –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. 
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ CSV-—Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ —Ç—É—Ç
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —ç—Ç–∏–º –∫–ª—é—á–∞–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º —Å–ª–æ–≤–∞—Ä–µ –∏–º–µ—é—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø (str).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 5. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª data.csv —Å–æ–¥–µ—Ä–∂–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
name,address,age
George,4312 Abbey Road,22
John,54 Love Ave,21
—Ç–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ read_csv() –≤–µ—Ä–Ω—É–ª –±—ã —Å–ø–∏—Å–æ–∫:
[{'name': 'George', 'address': '4312 Abbey Road', 'age': '22'}, {'name': 'John', 'address': '54 Love Ave', 'age': '21'}]'''
# def read_csv():
#     with open('data.csv') as file:
#         list_all = list(map(lambda line: line.strip().split(','), file.readlines()))
#         list_new = list()
#         for i in list_all[1:]:
#             d = dict(zip(list_all[0],i))
#             list_new.append(d)
#         return list_new

# ANOTHER WAY
# def read_csv():
#     with open('data.csv', 'r', encoding='utf-8') as f:
#         a=[i.strip().split(',') for i in f.readlines()]
#         return [{a[0][i]:a[j][i] for i in range(len(a[j]))} for j in range(1, len(a))]

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ—ë –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª output.txt.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º output.txt –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–µ–≥–æ —Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞.'''

# with open('output.txt', 'w') as file:
#     file.write(input())

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∑–∞–ø–∏—Å—ã–≤–∞—é—â—É—é –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª random.txt 25 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 111 –¥–æ 777
(–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º random.txt –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–µ–≥–æ —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å random.'''
# from random import randint
# with open('random.txt', 'w') as file:
#     for i in range(24):
#         file.write(f'{randint(111,777)}')
#         file.write('\n')
#     file.write(f'{randint(111,777)}')


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª input.txt, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ñ–∞–π–ª output.txt –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, 
–≥–¥–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å—Ç–æ–∏—Ç –µ–µ –Ω–æ–º–µ—Ä, —Å–∏–º–≤–æ–ª ) –∏ –ø—Ä–æ–±–µ–ª. –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 111.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º output.txt –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–µ–≥–æ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ input.txt.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é enumerate().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª input.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
—Ç–æ —Ñ–∞–π–ª output.txt –∏–º–µ–ª –±—ã –≤–∏–¥:
1) Beautiful is better than ugly.
2) Explicit is better than implicit.
3) Simple is better than complex.
4) Complex is better than complicated.'''

# with open('input.txt') as input_file, open('output.txt', 'w') as out:
#     inp = list(map(lambda x: x.strip(), input_file))
#     for i in range(len(inp)):
#         print(f'{i+1}) {inp[i]}',file=out)


# ANOTHER WAY
# with open('input.txt') as file, open('output.txt', 'w') as output:
#     for i, w in enumerate(file, 1):
#         print(f'{i}) {w}', file=output, end='')

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª class_scores.txt —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∑–∞ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö –≤–∏–¥–∞: —Ñ–∞–º–∏–ª–∏—è –æ—Ü–µ–Ω–∫–∞ 
(—Ñ–∞–º–∏–ª–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º). –û—Ü–µ–Ω–∫–∞ - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 000 –¥–æ 100100100 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 555 –±–∞–ª–ª–æ–≤ –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–π –∏ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 
—Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª new_scores.txt.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º new_scores.txt –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª class_scores.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
Washington 83
Adams 86
Kingsman 100
MacDonald 95
Thomson 98
—Ç–æ —Ñ–∞–π–ª new_scores.txt –∏–º–µ–ª –±—ã –≤–∏–¥:
Washington 88
Adams 91
Kingsman 100
MacDonald 100
Thomson 100
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.'''


# with open('class_scores.txt') as scores, open('new_scores.txt', 'w') as new_scores:
#     l = list(map(lambda line:line.strip().split(), scores))
#     l1 = list(map(lambda x:[x[0],int(x[1]) + 5], l))
#     for i in range(len(l)):
#         if int(l1[i][1]) > 100:
#             l1[i][1] = 100
#             print(*l1[i], file=new_scores)
#         else:
#             print(*l1[i], file=new_scores)


# ANOTHER WAY
# with open('class_scores.txt') as class_scores, open('new_scores.txt', 'w') as new_scores:
#     for line in class_scores:
#         name, score = line.split()
#         score = int(score) + 5
#         if score > 100:
#             score = 100
#         print(name, score, file=new_scores)

'''–û–¥–Ω–∞–∂–¥—ã –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ —Å–ø—Ä–æ—Å–∏–ª–∏:

"–ï—Å–ª–∏ —Ç—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π, –ø–æ—á–µ–º—É –Ω–µ –±–æ–≥–∞—Ç—ã–π?"

–ñ–∞–∫ –Ω–µ —Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å—Ç–æ–ª—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–Ω –∑–∞–¥–∞–ª –∑–∞–≥–∞–¥–∫—É —Å–ø—Ä–∞—à–∏–≤–∞—é—â–µ–º—É:

"–ë—ã–ª–∏ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ –∫–æ–∑–ª—ã. –°–∫–æ–ª—å–∫–æ?"

"–°–∫–æ–ª—å–∫–æ —á–µ–≥–æ?"

"–°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ 7% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–∑–ª–æ–≤?"
'''
'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª goats.txt –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ COLOURS, –¥–∞–ª–µ–µ –∏–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∫–æ–∑–ª–æ–≤. –ó–∞—Ç–µ–º –∏–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ª–æ–≤–æ–º GOATS, –∏ –¥–∞–ª–µ–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–∑–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤. –ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–∑–ª–æ–≤ –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞.

–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ answer.txt –∏ –≤—ã–≤–æ–¥–∞ –≤ –Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é –∑–∞–≥–∞–¥–∫–∏ –æ—Ç –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º answer.txt –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –Ω–µ–≥–æ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∫–æ–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é –∑–∞–≥–∞–¥–∫–∏ –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª goats.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:

COLOURS
Pink goat
Green goat
Black goat
GOATS
Pink goat
Pink goat
Black goat
Pink goat
Pink goat
Black goat
Green goat
Pink goat
Black goat
Black goat
Pink goat
Pink goat
Black goat
Black goat
Pink goat

—Ç–æ —Ñ–∞–π–ª answer.txt –∏–º–µ–ª –±—ã –≤–∏–¥:

Black goat
Pink goat

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ. '''
# def dict_colours(goats):
#     d = dict()
#     for i in range(goats.index('COLOURS')+1,goats.index('GOATS')):
#         goats[i] = d.setdefault(goats[i],0)
#     return d
#
# with open('goats.txt') as goats, open('answer.txt', 'w') as answer:
#     l = list(map(lambda x: x.strip(), goats))
#     # print(l)
#     dict_col = dict_colours(l)
#     # print(dict_col)
#     for i in l:
#         if i in dict_col:
#             dict_col[i] += 1
#     # print(dict_col)
#     sum_values = 0
#     for values in dict_col.values():
#         sum_values+= values
#     winner_name = list()
#     for k, v in dict_col.items():
#         if v > (sum_values/100) * 7:
#             winner_name.append(k)
#     print(*sorted(winner_name),file=answer,sep='\n')


# ANOTHER WAY
# with open('goats.txt', encoding='utf-8') as inp, open('answer.txt', 'w') as out:
#     colours = {}
#     s = 0
#     for i in list(inp)[1:]:
#         colours[i.strip()] = colours.get(i.strip(), -1) + 1
#         s += colours[i.strip()] > 0
#     print(*sorted([k for k, v in colours.items() if v/s > 0.07]), sep='\n', file=out)




'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn –∏ nnn —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, 
–∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª output.txt –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–∫–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nnn –∏ nnn —Å—Ç—Ä–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º output.txt –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ'''


# with open('output.txt', 'w', encoding='utf-8') as out:
#     for _ in range(int(input())):
#         with open(input()) as file:
#             out.writelines(file)

'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª logfile.txt —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –Ω–µ–µ. 
–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞, 
–≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞, –≥–¥–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª output.txt –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –Ω–µ–≥–æ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –º–µ–Ω—è—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è), 
–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Å–µ—Ç–∏ –Ω–µ –º–µ–Ω–µ–µ —á–∞—Å–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º output.txt –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ, —Ç–æ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º 
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª logfile.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
–¢–∏–º—É—Ä –ì—É–µ–≤, 14:10, 15:50
–†—É—Å–ª–∞–Ω –ì—Ä–∏—Ü–µ–Ω–∫–æ, 12:00, 12:59
–†–æ–º–∞–Ω –ì–∞—Ü–∞–ª–æ–≤, 09:10, 17:45
–ì–∞–±–æ–ª–∞–µ–≤ –ì–µ–æ—Ä–≥–∏–π, 11:10, 12:10
—Ç–æ —Ñ–∞–π–ª output.txt –∏–º–µ–ª –±—ã –≤–∏–¥:
–¢–∏–º—É—Ä –ì—É–µ–≤
–†–æ–º–∞–Ω –ì–∞—Ü–∞–ª–æ–≤
–ì–∞–±–æ–ª–∞–µ–≤ –ì–µ–æ—Ä–≥–∏–π'''

# with open('logfile.txt') as file, open('output.txt','w') as output:
#     l = list(map(lambda x: x.strip().split(', '), file.readlines()))
#     # print(l)
#     f = list(filter(lambda x: (int(x[2][3:]) - int(x[1][3:]) + (int(x[2][:2])-int(x[1][:2]))* 60) > 59, l))
#     for i in range(len(f)):
#         print(f[i][0],file=output)

'''–ü–æ–¥—Å–ø–∏—Å–æ–∫ ‚Äî —á–∞—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ü–æ–¥—Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏ –¥–∞–∂–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ.
–ù–∞–ø—Ä–∏–º–µ—Ä, [1], [2], [3] –∏ [4] ‚Äî –ø–æ–¥—Å–ø–∏—Å–∫–∏ —Å–ø–∏—Å–∫–∞ [1, 2, 3, 4]. –°–ø–∏—Å–æ–∫ [2, 3] ‚Äî –ø–æ–¥—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–∞ [1, 2, 3, 4],
–Ω–æ —Å–ø–∏—Å–æ–∫ [2, 4] –Ω–µ –ø–æ–¥—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–∞ [1, 2, 3, 4], —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã 222 –∏ 444 –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ —Å–º–µ–∂–Ω—ã–µ. 
–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ‚Äî –ø–æ–¥—Å–ø–∏—Å–æ–∫ –ª—é–±–æ–≥–æ —Å–ø–∏—Å–∫–∞. –°–∞–º —Å–ø–∏—Å–æ–∫ ‚Äî –ø–æ–¥—Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–≥–æ —Å–µ–±—è, —Ç–æ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ [1, 2, 3, 4] –ø–æ–¥—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–∞ 
[1, 2, 3, 4].
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã. –ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥—Å–ø–∏—Å–∫–∏ —Å–ø–∏—Å–∫–∞, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥—Å–ø–∏—Å–∫–∏, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ—Ä—è–¥–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –∏—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫.
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
a b
Sample Output 1:
[[], ['a'], ['b'], ['a', 'b']]
Sample Input 2:
a b v
Sample Output 2:
[[], ['a'], ['b'], ['v'], ['a', 'b'], ['b', 'v'], ['a', 'b', 'v']]
Sample Input 3:
a
Sample Output 3:
[[], ['a']]
Sample Input 4:
1 2 3 0
Sample Output 4:
[[], ['1'], ['2'], ['3'], ['0'], ['1', '2'], ['2', '3'], ['3', '0'], ['1', '2', '3'], ['2', '3', '0'], ['1', '2', '3', '0']]'''

# l = ['a', 'b', 'v']
# l = input().split()
# fin, tot = list(),list()
# tot.append(list())
# for i in range(len(l)):
#     for j in range(len(l)):
#         fin = l[j:i + j + 1]
#         if len(fin) == i + 1:
#             tot.append(fin)
# print(tot)



# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∏–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
# n = input()
# # n = 'test.txt'
# with open(n) as file:
#     print(len(list(map(lambda line:line,file))))


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ledger.txt —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Ñ–∏—Ä–º—ã –∑–∞ –º–µ—Å—è—Ü. 
–ù–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ñ–∞–π–ª–∞ —É–∫–∞–∑–∞–Ω–æ, —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ —Ç–æ–≤–∞—Ä, –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):
$47
$100
$60
$12
$8
...
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º–∞—Ä–Ω–æ–π –º–µ—Å—è—á–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ —Ñ–∏—Ä–º—ã. 
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—ã—Ä—É—á–∫—É —Ñ–∏—Ä–º—ã (—Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –∏–∑ —Ñ–∞–π–ª–∞) –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∏–∂–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª ledger.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
$37
$44
$19
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç:
$100'''

# with open('ledger.txt') as file:
#     print('$',sum(list(map(lambda x:int(x.strip()[1:]),file))),sep='')


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª grades.txt, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞ —Ç—Ä–∏ —Ç–µ—Å—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –∏–∑ —Ç—Ä–∏–º–µ—Å—Ç—Ä–æ–≤.
 –°—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ –∏–º–µ—é—Ç –≤–∏–¥: —Ñ–∞–º–∏–ª–∏—è –æ—Ü–µ–Ω–∫–∞_1 –æ—Ü–µ–Ω–∫–∞_2 –æ—Ü–µ–Ω–∫–∞_3.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–¥–∞–≤—à–∏—Ö –≤—Å–µ —Ç—Ä–∏ —Ç–µ—Å—Ç–∞. 
–¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–¥–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ –Ω–µ–º—É –Ω–µ –º–µ–Ω—å—à–µ 65.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–¥–∞–≤—à–∏—Ö –≤—Å–µ —Ç—Ä–∏ —Ç–µ—Å—Ç–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª grades.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
Washington 83 77 54
Adams 86 69 90
Jacobson 50 49 71
MacDonald 100 99 100
Berrington 66 67 64
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç:
2'''

# with open('grades.txt') as file:
#     l = list(map(lambda line:line.strip().split(), file))
#     l1 = list(filter(lambda x:int(x[1]) > 64 and int(x[2]) > 64 and int(x[3]) > 64, l))
#     print(len(l1))


'''–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª words.txt —Å–æ —Å–ª–æ–≤–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–æ–º. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞, –Ω–µ –º–µ–Ω—è—è –ø–æ—Ä—è–¥–∫–∞ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Ñ–∞–π–ª–∞ words.txt, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–æ–≤–æ–º —Å—á–∏—Ç–∞–π—Ç–µ –ª—é–±—É—é –≥—Ä—É–ø–ø—É —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª words.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
there are many different holidays on the first of january we celebrate new year on the seventh of january and the twenty-fifth of december we have christmas the twenty-third of february is the day of the defenders of the motherland or the army day then comes easter and radonitsa the first of may is the labour day the ninth of may is victory day the third of july is independence day then comes the seventh of november the day of the october revolution and so on
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç:
twenty-fifth
twenty-third
independence'''

# with open('words.txt') as file:
#     l = file.read().split()
#     l1 = len(sorted(l,key=len,reverse=True)[0])
#     l2 = list(filter(lambda x: len(x)==l1,l))
#     print(*l2,sep='\n')

# ANOTHER WAY
# with open('words.txt') as file:
#     words = file.read().split()
#     longest = max(words, key=len)
#     print(*filter(lambda x: len(x) == len(longest), words), sep='\n')


'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ –º–µ–Ω—å—à–µ 10, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞–ª —Å—Ç—Ä–æ–∫–∏:
there are many different holidays
on the first of january we
celebrate new year on the
seventh of january and the
twenty-fifth of december we
have christmas the twenty-third
of february is the day of the
defenders of the motherland
or the army day then comes
easter and radonitsa the
first of may is the labour
day the ninth of may is
victory day the third of july
is independence day then comes
the seventh of november the day
of the october revolution and so on
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç:
of february is the day of the
defenders of the motherland
or the army day then comes
easter and radonitsa the
first of may is the labour
day the ninth of may is
victory day the third of july
is independence day then comes
the seventh of november the day
of the october revolution and so on
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ü–æ–¥—É–º–∞–π—Ç–µ –Ω–∞–¥ —Å–∏—Ç—É–∞—Ü–∏–µ–π, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –∏ –Ω–µ—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ 
–ø–∞–º—è—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.'''
# name = 'test.txt'
# name = input()
# with open(name) as file:
#     l = list(map(lambda line:line.strip(),file.readlines()))
#     print(*l[-10:],sep='\n')


'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞, –Ω–æ —Å –∑–∞–º–µ–Ω–æ–π –≤—Å–µ—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ * 
(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥–æ—á–µ–∫ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ).
–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ forbidden_words.txt. 
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, 
–≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –≥–¥–µ –±—ã –æ–Ω–∏ –Ω–∏ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤
 —Å–µ—Ä–µ–¥–∏–Ω–µ –¥—Ä—É–≥–æ–≥–æ —Å–ª–æ–≤–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª forbidden_words.txt 
—Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ exam, —Ç–æ —Å–ª–æ–≤–∞ exam, Exam, ExaM, EXAM –∏ –ø–æ–¥–æ–±–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ ****.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª forbidden_words.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Å–ª–æ–≤–∞:
hello email python the exam wor is
–∞ —Ñ–∞–π–ª –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–º–µ–Ω—è—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–º–µ–ª –±—ã –≤–∏–¥:
Hello, world! Python IS the programming language of thE future. My EMAIL is....
PYTHON is awesome!!!!
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç:
*****, ***ld! ****** ** *** programming language of *** future. My ***** **....
****** ** awesome!!!!
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –§–∞–π–ª forbidden_words.txt –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ.
–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≥–æ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ç—Ä–µ—Ö —Ñ–∞–π–ª–∞—Ö data.txt, stepik.txt –∏ beegeek.txt.'''
# n = 'data(1).txt'
# n = input()
#
# with open('forbidden_words.txt') as bad_words, open(n) as file:
#     bad_l = bad_words.read().split()
#     # l = list(map(lambda line:line,file.readlines()))
#     l = file.read()
#     l_lower = l.lower()
#     for bad in bad_l:
#         if bad in l_lower:
#             l_lower = l_lower.replace(bad.lower(), '*'*len(bad))
#     # print(l_lower)
#     for i in range(len(l_lower)):
#         if l_lower[i] == '*':
#             print(l_lower[i],end='')
#         else:
#             print(l[i],end='')


# ANOTHER WAY
# with open('forbidden_words.txt', encoding='utf-8') as p, open(input(), encoding='utf-8') as f:
#     forbidden_words = p.read().split()
#     base = "".join(list(f))
#     newline =  base.lower()
#     for word in forbidden_words:
#         if word in newline:
#             newline = newline.replace(word, '*' * len(word))
#     print("".join(map(lambda x, y: x.upper() if y.isupper() else x, newline, base)))


'''–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è ‚Äî –ø–µ—Ä–µ–¥–∞—á–∞ –∑–Ω–∞–∫–æ–≤ –æ–¥–Ω–æ–π –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç–∏ –∑–Ω–∞–∫–∞–º–∏ –¥—Ä—É–≥–æ–π –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π –∑–Ω–∞–∫ 
(–∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤) –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∏—Å—å–º–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∑–Ω–∞–∫–æ–º (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∑–Ω–∞–∫–æ–≤) 
–¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∏—Å—å–º–∞.
–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª cyrillic.txt, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞,
 —Ç–æ –µ—Å—Ç—å –∑–∞–º–µ–Ω—ã –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞–¥–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª transliteration.txt.
–ö–∏—Ä–∏–ª–ª–∏—Ü–∞  	–õ–∞—Ç–∏–Ω–∏—Ü–∞ 	–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ 	–õ–∞—Ç–∏–Ω–∏—Ü–∞ 	–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ 	–õ–∞—Ç–∏–Ω–∏—Ü–∞
–∞ 	a 	–∫ 	k 	—Ö 	h
–± 	b 	–ª 	l 	—Ü 	c
–≤ 	v 	–º 	m 	—á 	ch
–≥ 	g 	–Ω 	n 	—à 	sh
–¥ 	d 	–æ 	o 	—â 	shh
–µ 	e 	–ø 	p 	—ä 	*
—ë 	jo 	—Ä 	r 	—ã 	y
–∂ 	zh 	—Å 	s 	—å 	'
–∑ 	z 	—Ç 	t 	—ç 	je
–∏ 	i 	—É 	u 	—é 	ju
–π 	j 	—Ñ 	f 	—è 	ya
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∞–µ—Ç—Å—è.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º transliteration.txt –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –¥–æ–ª–∂–Ω—ã –∑–∞–º–µ–Ω—è—Ç—å—Å—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∂–µ –±—É–∫–≤—ã, –Ω–æ –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –∑–∞–≥–ª–∞–≤–Ω—ã–º –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∏–∑ –Ω–∏—Ö: ¬´–°¬ª –Ω–∞ ¬´S¬ª, –∞ ¬´–Ø¬ª –Ω–∞ ¬´Ya¬ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª cyrillic.txt —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–µ–∫—Å—Ç:
–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –°–®–ê –î–æ–Ω–∞–ª—å–¥ –¢—Ä–∞–º–ø –ø—Ä–æ–¥–æ–ª–∂–∏–ª –æ–±–º–µ–Ω –≤—ã–ø–∞–¥–∞–º–∏ —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ö–ù–î–†.
We all know why Joe Biden is rushing to falsely pose as the winner, and why his media allies are trying so hard to help him: they don‚Äôt want the truth to be exposed.
—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ transliteration.txt –±—É–¥–µ—Ç:
Prezident SShA Donal'd Tramp prodolzhil obmen vypadami s rukovodstvom KNDR.
We all know why Joe Biden is rushing to falsely pose as the winner, and why his media allies are trying so hard to 
help him: they don‚Äôt want the truth to be exposed.'''

# trans = '''
# –∞     a     –∫     k     —Ö     h
# –±     b     –ª     l     —Ü     c
# –≤     v     –º     m     —á     ch
# –≥     g     –Ω     n     —à     sh
# –¥     d     –æ     o     —â     shh
# –µ     e     –ø     p     —ä     *
# —ë     jo     —Ä     r     —ã     y
# –∂     zh     —Å     s     —å     '
# –∑     z     —Ç     t     —ç     je
# –∏     i     —É     u     —é     ju
# –π     j     —Ñ     f     —è     ya'''.split()
#
# abc_dict = dict(zip([trans[i] for i in range(0, len(trans), 2)],
#                     [trans[i] for i in range(1, len(trans), 2)]))
#
# abc_dict.update(zip([trans[i].upper() for i in range(0, len(trans), 2)],
#                     [trans[i].title() for i in range(1, len(trans), 2)]))
#
# with open('cyrillic.txt') as file, open('transliteration.txt','w') as output:
#     l = file.read()
#     for key in abc_dict:
#         if key in l:
#             l = l.replace(key, abc_dict[key])
#     print(l,file=output)



# ANOTHER WAY
# table = {'–∞': 'a', '–∫': 'k', '—Ö': 'h', '–±': 'b', '–ª': 'l', '—Ü': 'c', '–≤': 'v', '–º': 'm', '—á': 'ch',
#          '–≥': 'g', '–Ω': 'n', '—à': 'sh', '–¥': 'd', '–æ': 'o', '—â': 'shh', '–µ': 'e', '–ø': 'p', '—ä': '*',
#          '—ë': 'jo', '—Ä': 'r', '—ã': 'y', '–∂': 'zh', '—Å': 's', '—å': "'", '–∑': 'z', '—Ç': 't', '—ç': 'je',
#          '–∏': 'i', '—É': 'u', '—é': 'ju', '–π': 'j', '—Ñ': 'f', '—è': 'ya'}
# with open('cyrillic.txt', 'r', encoding='utf-8') as file, open('transliteration.txt', 'w', encoding='utf-8') as out:
#     text = file.read()
#     for letter in text:
#         if letter.lower() in table:
#             if letter.isupper():
#                 out.write(table[letter.lower()].title())
#             else:
#                 out.write(table[letter])
#         else:
#             out.write(letter)



'''–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
 –ß–∞—Å—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞–ø–æ—Å–ª–µ–¥–æ–∫, –∞ –ø–æ—Ç–æ–º –∏ –≤–æ–≤—Å–µ –∑–∞–±—ã–≤–∞—é—Ç –æ –Ω–∏—Ö üòÇ.
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—Å–∞–Ω –∫–æ–¥ –Ω–∞ —è–∑—ã–∫–µ Python. 
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—è—Å–Ω—è—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. 
–ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å–æ —Å–ª–æ–≤–∞ def –∏ –ø—Ä–æ–±–µ–ª–∞, —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
 –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ - #.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∏–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–æ–º –Ω–∞ —è–∑—ã–∫–µ Python.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π (–Ω–µ –º–µ–Ω—è—è –ø–æ—Ä—è–¥–∫–∞ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ), –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ,
 –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—è—Å–Ω—è—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ï—Å–ª–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ –∏–º–µ—é—Ç –ø–æ—è—Å–Ω—è—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏:
  Best Programming Team.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –±—ã —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞–ª –∫–æ–¥:

def powers(a):
    return a, a**2, a**3

# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
def sum_all(*args):
    return sum(args)

def matrix():
    pass

# —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
def count_args(*args):
    return len(args)

def mean(*args):
    total = 0.0
    count = 0  
    for i in args:
        if type(i) in (int, float):
            total += i
            count += 1
    if count == 0:
        return 0.0
    else:
        return total / count
        
def greet(name, *args):
    args = (name,) + args
    return f'Hello, {" and ".join(args)}!'
# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
def fact(n):
    res = 1
    for i in range(1, n + 1):
        res *= i
    return res
—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç:
powers
matrix
mean
greet
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ —ç—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç. 
'''

# n = 'tets_prog.txt'
# n = input()
#
# with open(n) as file:
#     l = file.readlines()
#     l1 = list()
#     counter = 0
#     # print(l)
#
#     for i in range(len(l)):
#         if 'def' in l[i] and '#' not in l[i-1]:
#             l1.append(l[i])
#             counter += 1
#     l2 = list()
#     for i in l1:
#         l2.append(i[i.index(' ')+1:i.index('(')])
#     if counter == 0:
#         print('Best Programming Team')
#     else:
#         print(*l2,sep='\n')
    # print(*l2, sep='\n')


# print('timur' in 'Timur and his team')
# a = 5
# b = 10
# d = 'a' + 'c'
#
# print(d)
# print('\\\\')



# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –¥–≤–æ–∏—á–Ω—É—é, –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—É—é –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ bin(), oct(), hex().
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã A, B, C, D, E, F.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. BOH = Binary, Octal, Hex.

s = int(input())
print(bin(s)[2:].upper())
print(oct(s)[2:].upper())
print(hex(s)[2:].upper())




